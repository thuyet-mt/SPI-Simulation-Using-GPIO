
test_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f34  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080040c0  080040c0  000140c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004320  08004320  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000088  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000078f7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014ae  00000000  00000000  00027997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00028e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006a8  00000000  00000000  00029590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bc0  00000000  00000000  00029c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009c10  00000000  00000000  0004a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c396c  00000000  00000000  00054408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117d74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023d4  00000000  00000000  00117dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040a4 	.word	0x080040a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080040a4 	.word	0x080040a4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b974 	b.w	8000e00 <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9d08      	ldr	r5, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	468e      	mov	lr, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14d      	bne.n	8000bda <__udivmoddi4+0xaa>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4694      	mov	ip, r2
 8000b42:	d969      	bls.n	8000c18 <__udivmoddi4+0xe8>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b152      	cbz	r2, 8000b60 <__udivmoddi4+0x30>
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	f1c2 0120 	rsb	r1, r2, #32
 8000b52:	fa20 f101 	lsr.w	r1, r0, r1
 8000b56:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5e:	4094      	lsls	r4, r2
 8000b60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b64:	0c21      	lsrs	r1, r4, #16
 8000b66:	fbbe f6f8 	udiv	r6, lr, r8
 8000b6a:	fa1f f78c 	uxth.w	r7, ip
 8000b6e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b76:	fb06 f107 	mul.w	r1, r6, r7
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x64>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b86:	f080 811f 	bcs.w	8000dc8 <__udivmoddi4+0x298>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 811c 	bls.w	8000dc8 <__udivmoddi4+0x298>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 f707 	mul.w	r7, r0, r7
 8000ba8:	42a7      	cmp	r7, r4
 8000baa:	d90a      	bls.n	8000bc2 <__udivmoddi4+0x92>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	f080 810a 	bcs.w	8000dcc <__udivmoddi4+0x29c>
 8000bb8:	42a7      	cmp	r7, r4
 8000bba:	f240 8107 	bls.w	8000dcc <__udivmoddi4+0x29c>
 8000bbe:	4464      	add	r4, ip
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc6:	1be4      	subs	r4, r4, r7
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa4>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d909      	bls.n	8000bf2 <__udivmoddi4+0xc2>
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	f000 80ef 	beq.w	8000dc2 <__udivmoddi4+0x292>
 8000be4:	2600      	movs	r6, #0
 8000be6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bea:	4630      	mov	r0, r6
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	fab3 f683 	clz	r6, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d14a      	bne.n	8000c90 <__udivmoddi4+0x160>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xd4>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 80f9 	bhi.w	8000df6 <__udivmoddi4+0x2c6>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	469e      	mov	lr, r3
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d0e0      	beq.n	8000bd4 <__udivmoddi4+0xa4>
 8000c12:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c16:	e7dd      	b.n	8000bd4 <__udivmoddi4+0xa4>
 8000c18:	b902      	cbnz	r2, 8000c1c <__udivmoddi4+0xec>
 8000c1a:	deff      	udf	#255	; 0xff
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	f040 8092 	bne.w	8000d4a <__udivmoddi4+0x21a>
 8000c26:	eba1 010c 	sub.w	r1, r1, ip
 8000c2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2e:	fa1f fe8c 	uxth.w	lr, ip
 8000c32:	2601      	movs	r6, #1
 8000c34:	0c20      	lsrs	r0, r4, #16
 8000c36:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c3a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c42:	fb0e f003 	mul.w	r0, lr, r3
 8000c46:	4288      	cmp	r0, r1
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x12c>
 8000c4a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x12a>
 8000c54:	4288      	cmp	r0, r1
 8000c56:	f200 80cb 	bhi.w	8000df0 <__udivmoddi4+0x2c0>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	1a09      	subs	r1, r1, r0
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c64:	fb07 1110 	mls	r1, r7, r0, r1
 8000c68:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x156>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7c:	d202      	bcs.n	8000c84 <__udivmoddi4+0x154>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	f200 80bb 	bhi.w	8000dfa <__udivmoddi4+0x2ca>
 8000c84:	4608      	mov	r0, r1
 8000c86:	eba4 040e 	sub.w	r4, r4, lr
 8000c8a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8e:	e79c      	b.n	8000bca <__udivmoddi4+0x9a>
 8000c90:	f1c6 0720 	rsb	r7, r6, #32
 8000c94:	40b3      	lsls	r3, r6
 8000c96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9e:	fa20 f407 	lsr.w	r4, r0, r7
 8000ca2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca6:	431c      	orrs	r4, r3
 8000ca8:	40f9      	lsrs	r1, r7
 8000caa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cae:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb6:	0c20      	lsrs	r0, r4, #16
 8000cb8:	fa1f fe8c 	uxth.w	lr, ip
 8000cbc:	fb09 1118 	mls	r1, r9, r8, r1
 8000cc0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc4:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	fa02 f206 	lsl.w	r2, r2, r6
 8000cce:	d90b      	bls.n	8000ce8 <__udivmoddi4+0x1b8>
 8000cd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd8:	f080 8088 	bcs.w	8000dec <__udivmoddi4+0x2bc>
 8000cdc:	4288      	cmp	r0, r1
 8000cde:	f240 8085 	bls.w	8000dec <__udivmoddi4+0x2bc>
 8000ce2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce6:	4461      	add	r1, ip
 8000ce8:	1a09      	subs	r1, r1, r0
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cf0:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	458e      	cmp	lr, r1
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x1e2>
 8000d00:	eb1c 0101 	adds.w	r1, ip, r1
 8000d04:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d08:	d26c      	bcs.n	8000de4 <__udivmoddi4+0x2b4>
 8000d0a:	458e      	cmp	lr, r1
 8000d0c:	d96a      	bls.n	8000de4 <__udivmoddi4+0x2b4>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	4461      	add	r1, ip
 8000d12:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d16:	fba0 9402 	umull	r9, r4, r0, r2
 8000d1a:	eba1 010e 	sub.w	r1, r1, lr
 8000d1e:	42a1      	cmp	r1, r4
 8000d20:	46c8      	mov	r8, r9
 8000d22:	46a6      	mov	lr, r4
 8000d24:	d356      	bcc.n	8000dd4 <__udivmoddi4+0x2a4>
 8000d26:	d053      	beq.n	8000dd0 <__udivmoddi4+0x2a0>
 8000d28:	b15d      	cbz	r5, 8000d42 <__udivmoddi4+0x212>
 8000d2a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d32:	fa01 f707 	lsl.w	r7, r1, r7
 8000d36:	fa22 f306 	lsr.w	r3, r2, r6
 8000d3a:	40f1      	lsrs	r1, r6
 8000d3c:	431f      	orrs	r7, r3
 8000d3e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d42:	2600      	movs	r6, #0
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	f1c2 0320 	rsb	r3, r2, #32
 8000d4e:	40d8      	lsrs	r0, r3
 8000d50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d54:	fa21 f303 	lsr.w	r3, r1, r3
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4301      	orrs	r1, r0
 8000d5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d68:	fb07 3610 	mls	r6, r7, r0, r3
 8000d6c:	0c0b      	lsrs	r3, r1, #16
 8000d6e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d72:	fb00 f60e 	mul.w	r6, r0, lr
 8000d76:	429e      	cmp	r6, r3
 8000d78:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x260>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d86:	d22f      	bcs.n	8000de8 <__udivmoddi4+0x2b8>
 8000d88:	429e      	cmp	r6, r3
 8000d8a:	d92d      	bls.n	8000de8 <__udivmoddi4+0x2b8>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	4463      	add	r3, ip
 8000d90:	1b9b      	subs	r3, r3, r6
 8000d92:	b289      	uxth	r1, r1
 8000d94:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d98:	fb07 3316 	mls	r3, r7, r6, r3
 8000d9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da0:	fb06 f30e 	mul.w	r3, r6, lr
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x28a>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f106 38ff 	add.w	r8, r6, #4294967295
 8000db0:	d216      	bcs.n	8000de0 <__udivmoddi4+0x2b0>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d914      	bls.n	8000de0 <__udivmoddi4+0x2b0>
 8000db6:	3e02      	subs	r6, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dc0:	e738      	b.n	8000c34 <__udivmoddi4+0x104>
 8000dc2:	462e      	mov	r6, r5
 8000dc4:	4628      	mov	r0, r5
 8000dc6:	e705      	b.n	8000bd4 <__udivmoddi4+0xa4>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	e6e3      	b.n	8000b94 <__udivmoddi4+0x64>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6f8      	b.n	8000bc2 <__udivmoddi4+0x92>
 8000dd0:	454b      	cmp	r3, r9
 8000dd2:	d2a9      	bcs.n	8000d28 <__udivmoddi4+0x1f8>
 8000dd4:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ddc:	3801      	subs	r0, #1
 8000dde:	e7a3      	b.n	8000d28 <__udivmoddi4+0x1f8>
 8000de0:	4646      	mov	r6, r8
 8000de2:	e7ea      	b.n	8000dba <__udivmoddi4+0x28a>
 8000de4:	4620      	mov	r0, r4
 8000de6:	e794      	b.n	8000d12 <__udivmoddi4+0x1e2>
 8000de8:	4640      	mov	r0, r8
 8000dea:	e7d1      	b.n	8000d90 <__udivmoddi4+0x260>
 8000dec:	46d0      	mov	r8, sl
 8000dee:	e77b      	b.n	8000ce8 <__udivmoddi4+0x1b8>
 8000df0:	3b02      	subs	r3, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	e732      	b.n	8000c5c <__udivmoddi4+0x12c>
 8000df6:	4630      	mov	r0, r6
 8000df8:	e709      	b.n	8000c0e <__udivmoddi4+0xde>
 8000dfa:	4464      	add	r4, ip
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	e742      	b.n	8000c86 <__udivmoddi4+0x156>

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <Get_Sub_String>:
        }
    }
    return binary;
}
char *Get_Sub_String(char *str, int index, int count)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
    int strLen = strlen(str);
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f7ff f9d9 	bl	80001c8 <strlen>
 8000e16:	4603      	mov	r3, r0
 8000e18:	61bb      	str	r3, [r7, #24]
    int lastIndex = index + count;
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	617b      	str	r3, [r7, #20]

    if (index >= 0 && lastIndex > strLen)
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db05      	blt.n	8000e34 <Get_Sub_String+0x30>
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dd01      	ble.n	8000e34 <Get_Sub_String+0x30>
        return "";
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <Get_Sub_String+0x7c>)
 8000e32:	e021      	b.n	8000e78 <Get_Sub_String+0x74>

    char *subStr = malloc(count + 1);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 f949 	bl	80030d0 <malloc>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < count; i++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e00d      	b.n	8000e64 <Get_Sub_String+0x60>
    {
        subStr[i] = str[index + i];
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	441a      	add	r2, r3
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	6939      	ldr	r1, [r7, #16]
 8000e58:	440b      	add	r3, r1
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < count; i++)
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbed      	blt.n	8000e48 <Get_Sub_String+0x44>
    }

    subStr[count] = '\0';
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4413      	add	r3, r2
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]

    return subStr;
 8000e76:	693b      	ldr	r3, [r7, #16]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	080040c8 	.word	0x080040c8

08000e84 <Append_String>:

char *Append_String(const char *str1, const char *str2)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
    int str1Len = strlen(str1);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff f99a 	bl	80001c8 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	617b      	str	r3, [r7, #20]
    int str2Len = strlen(str2);
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f7ff f995 	bl	80001c8 <strlen>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	613b      	str	r3, [r7, #16]
    int strLen = str1Len + str2Len + 1;
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
    char *str = malloc(strLen);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 f90e 	bl	80030d0 <malloc>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < str1Len; i++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	e00a      	b.n	8000ed4 <Append_String+0x50>
        str[i] = str1[i];
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	441a      	add	r2, r3
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	440b      	add	r3, r1
 8000eca:	7812      	ldrb	r2, [r2, #0]
 8000ecc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < str1Len; i++)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf0      	blt.n	8000ebe <Append_String+0x3a>

    for (int i = 0; i < str2Len; i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	e00d      	b.n	8000efe <Append_String+0x7a>
        str[(str1Len + i)] = str2[i];
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	441a      	add	r2, r3
 8000ee8:	6979      	ldr	r1, [r7, #20]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	440b      	add	r3, r1
 8000eee:	4619      	mov	r1, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	440b      	add	r3, r1
 8000ef4:	7812      	ldrb	r2, [r2, #0]
 8000ef6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < str2Len; i++)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	3301      	adds	r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbed      	blt.n	8000ee2 <Append_String+0x5e>

    str[strLen - 1] = '\0';
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]

    return str;
 8000f12:	68bb      	ldr	r3, [r7, #8]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <Char_To_String>:

char *Char_To_String(char c)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
    char *str = malloc(2);
 8000f26:	2002      	movs	r0, #2
 8000f28:	f002 f8d2 	bl	80030d0 <malloc>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60fb      	str	r3, [r7, #12]
    str[0] = c;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	701a      	strb	r2, [r3, #0]
    str[1] = '\0';
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]

    return str;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <Binary_To_Decimal>:

int Binary_To_Decimal(char *bin)
{
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    int binLength = strlen(bin);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff f939 	bl	80001c8 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	60bb      	str	r3, [r7, #8]
    double dec = 0;
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	e9c7 2304 	strd	r2, r3, [r7, #16]

    for (int i = 0; i < binLength; ++i)
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	e02b      	b.n	8000fc4 <Binary_To_Decimal+0x7c>
    {
        dec += (bin[i] - 48) * pow(2, ((binLength - i) - 1));
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	3b30      	subs	r3, #48	; 0x30
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fa80 	bl	800047c <__aeabi_i2d>
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	460d      	mov	r5, r1
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	3b01      	subs	r3, #1
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fa77 	bl	800047c <__aeabi_i2d>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	ec43 2b11 	vmov	d1, r2, r3
 8000f96:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8000fe0 <Binary_To_Decimal+0x98>
 8000f9a:	f002 f969 	bl	8003270 <pow>
 8000f9e:	ec53 2b10 	vmov	r2, r3, d0
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	4629      	mov	r1, r5
 8000fa6:	f7ff fad3 	bl	8000550 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fb2:	f7ff f917 	bl	80001e4 <__adddf3>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < binLength; ++i)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbcf      	blt.n	8000f6c <Binary_To_Decimal+0x24>
    }

    return (int)dec;
 8000fcc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fd0:	f7ff fd6e 	bl	8000ab0 <__aeabi_d2iz>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	40000000 	.word	0x40000000

08000fe8 <Binary_To_ASCII>:

char *Binary_To_ASCII(char *bin)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    char *ascii = "";
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <Binary_To_ASCII+0x5c>)
 8000ff2:	617b      	str	r3, [r7, #20]
    int binLen = strlen(bin);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff f8e7 	bl	80001c8 <strlen>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < binLen; i += 8)
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	e016      	b.n	8001032 <Binary_To_ASCII+0x4a>
    {
        ascii = Append_String(ascii, Char_To_String((char)Binary_To_Decimal(Get_Sub_String(bin, i, 8))));
 8001004:	2208      	movs	r2, #8
 8001006:	6939      	ldr	r1, [r7, #16]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fefb 	bl	8000e04 <Get_Sub_String>
 800100e:	4603      	mov	r3, r0
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff99 	bl	8000f48 <Binary_To_Decimal>
 8001016:	4603      	mov	r3, r0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff7e 	bl	8000f1c <Char_To_String>
 8001020:	4603      	mov	r3, r0
 8001022:	4619      	mov	r1, r3
 8001024:	6978      	ldr	r0, [r7, #20]
 8001026:	f7ff ff2d 	bl	8000e84 <Append_String>
 800102a:	6178      	str	r0, [r7, #20]
    for (int i = 0; i < binLen; i += 8)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	3308      	adds	r3, #8
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	429a      	cmp	r2, r3
 8001038:	dbe4      	blt.n	8001004 <Binary_To_ASCII+0x1c>
    }

    return ascii;
 800103a:	697b      	ldr	r3, [r7, #20]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	080040c8 	.word	0x080040c8

08001048 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800104e:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001050:	f000 fb4c 	bl	80016ec <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001054:	f000 f854 	bl	8001100 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001058:	f000 f8ea 	bl	8001230 <MX_GPIO_Init>
    MX_I2C1_Init();
 800105c:	f000 f8ba 	bl	80011d4 <MX_I2C1_Init>
    /* USER CODE BEGIN 2 */
    lcd_init();
 8001060:	f001 ffa6 	bl	8002fb0 <lcd_init>
    // lcd_clear_display();
    int i;
    int arrInt[] = {0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0};
 8001064:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001068:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800106c:	4a23      	ldr	r2, [pc, #140]	; (80010fc <main+0xb4>)
 800106e:	4618      	mov	r0, r3
 8001070:	4611      	mov	r1, r2
 8001072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001076:	461a      	mov	r2, r3
 8001078:	f002 f832 	bl	80030e0 <memcpy>
    int n = sizeof(arrInt) / sizeof(int);
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    // int n = strlen(arrInt);
    char *arrChar;
    arrChar = (char *)malloc(sizeof(char) * (n + 1));
 8001082:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001086:	3301      	adds	r3, #1
 8001088:	4618      	mov	r0, r3
 800108a:	f002 f821 	bl	80030d0 <malloc>
 800108e:	4603      	mov	r3, r0
 8001090:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    // converting integer array to char array
    for (i = 0; i < n; ++i)
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800109a:	e015      	b.n	80010c8 <main+0x80>
    {
        arrChar[i] = arrInt[i] + '0';
 800109c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80010a0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80010a4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80010a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80010b2:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 80010b6:	440b      	add	r3, r1
 80010b8:	3230      	adds	r2, #48	; 0x30
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < n; ++i)
 80010be:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80010c2:	3301      	adds	r3, #1
 80010c4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80010c8:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80010cc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbe3      	blt.n	800109c <main+0x54>
    }
    // adding '\0' at the end of character array
    arrChar[n] = '\0';
 80010d4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80010d8:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80010dc:	4413      	add	r3, r2
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
    // printf("%s", arrChar);
    lcd_goto_XY(1, 0);
 80010e2:	2100      	movs	r1, #0
 80010e4:	2001      	movs	r0, #1
 80010e6:	f001 ffa6 	bl	8003036 <lcd_goto_XY>
    lcd_send_string(Binary_To_ASCII(arrChar));
 80010ea:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80010ee:	f7ff ff7b 	bl	8000fe8 <Binary_To_ASCII>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 ff89 	bl	800300c <lcd_send_string>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 80010fa:	e7fe      	b.n	80010fa <main+0xb2>
 80010fc:	080040cc 	.word	0x080040cc

08001100 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b094      	sub	sp, #80	; 0x50
 8001104:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	2230      	movs	r2, #48	; 0x30
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fff4 	bl	80030fc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <SystemClock_Config+0xcc>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <SystemClock_Config+0xcc>)
 800112e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001132:	6413      	str	r3, [r2, #64]	; 0x40
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <SystemClock_Config+0xcc>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <SystemClock_Config+0xd0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <SystemClock_Config+0xd0>)
 800114a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <SystemClock_Config+0xd0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800115c:	2301      	movs	r3, #1
 800115e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001166:	2302      	movs	r3, #2
 8001168:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001170:	2308      	movs	r3, #8
 8001172:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001174:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001178:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800117a:	2302      	movs	r3, #2
 800117c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 800117e:	2307      	movs	r3, #7
 8001180:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fa2e 	bl	80025e8 <HAL_RCC_OscConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x96>
    {
        Error_Handler();
 8001192:	f000 f999 	bl	80014c8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001196:	230f      	movs	r3, #15
 8001198:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119a:	2302      	movs	r3, #2
 800119c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a6:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ac:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2105      	movs	r1, #5
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fc8f 	bl	8002ad8 <HAL_RCC_ClockConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xc4>
    {
        Error_Handler();
 80011c0:	f000 f982 	bl	80014c8 <Error_Handler>
    }
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	; 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_I2C1_Init+0x50>)
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <MX_I2C1_Init+0x54>)
 80011dc:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_I2C1_Init+0x50>)
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_I2C1_Init+0x58>)
 80011e2:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_I2C1_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_I2C1_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_I2C1_Init+0x50>)
 80011f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f6:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_I2C1_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_I2C1_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_I2C1_Init+0x50>)
 8001212:	f000 fd9d 	bl	8001d50 <HAL_I2C_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 800121c:	f000 f954 	bl	80014c8 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000008c 	.word	0x2000008c
 8001228:	40005400 	.word	0x40005400
 800122c:	000186a0 	.word	0x000186a0

08001230 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	4b99      	ldr	r3, [pc, #612]	; (80014b0 <MX_GPIO_Init+0x280>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a98      	ldr	r2, [pc, #608]	; (80014b0 <MX_GPIO_Init+0x280>)
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b96      	ldr	r3, [pc, #600]	; (80014b0 <MX_GPIO_Init+0x280>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	4b92      	ldr	r3, [pc, #584]	; (80014b0 <MX_GPIO_Init+0x280>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a91      	ldr	r2, [pc, #580]	; (80014b0 <MX_GPIO_Init+0x280>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b8f      	ldr	r3, [pc, #572]	; (80014b0 <MX_GPIO_Init+0x280>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <MX_GPIO_Init+0x280>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a8a      	ldr	r2, [pc, #552]	; (80014b0 <MX_GPIO_Init+0x280>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <MX_GPIO_Init+0x280>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b84      	ldr	r3, [pc, #528]	; (80014b0 <MX_GPIO_Init+0x280>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a83      	ldr	r2, [pc, #524]	; (80014b0 <MX_GPIO_Init+0x280>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b81      	ldr	r3, [pc, #516]	; (80014b0 <MX_GPIO_Init+0x280>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	4b7d      	ldr	r3, [pc, #500]	; (80014b0 <MX_GPIO_Init+0x280>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a7c      	ldr	r2, [pc, #496]	; (80014b0 <MX_GPIO_Init+0x280>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b7a      	ldr	r3, [pc, #488]	; (80014b0 <MX_GPIO_Init+0x280>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <MX_GPIO_Init+0x280>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a75      	ldr	r2, [pc, #468]	; (80014b0 <MX_GPIO_Init+0x280>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b73      	ldr	r3, [pc, #460]	; (80014b0 <MX_GPIO_Init+0x280>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2108      	movs	r1, #8
 80012f2:	4870      	ldr	r0, [pc, #448]	; (80014b4 <MX_GPIO_Init+0x284>)
 80012f4:	f000 fd12 	bl	8001d1c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2101      	movs	r1, #1
 80012fc:	486e      	ldr	r0, [pc, #440]	; (80014b8 <MX_GPIO_Init+0x288>)
 80012fe:	f000 fd0d 	bl	8001d1c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001308:	486c      	ldr	r0, [pc, #432]	; (80014bc <MX_GPIO_Init+0x28c>)
 800130a:	f000 fd07 	bl	8001d1c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : CS_I2C_SPI_Pin */
    GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800130e:	2308      	movs	r3, #8
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	4863      	ldr	r0, [pc, #396]	; (80014b4 <MX_GPIO_Init+0x284>)
 8001326:	f000 fb5d 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800132a:	2301      	movs	r3, #1
 800132c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	485d      	ldr	r0, [pc, #372]	; (80014b8 <MX_GPIO_Init+0x288>)
 8001342:	f000 fb4f 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PDM_OUT_Pin */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001346:	2308      	movs	r3, #8
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001356:	2305      	movs	r3, #5
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4855      	ldr	r0, [pc, #340]	; (80014b8 <MX_GPIO_Init+0x288>)
 8001362:	f000 fb3f 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8001366:	2301      	movs	r3, #1
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800136a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4851      	ldr	r0, [pc, #324]	; (80014c0 <MX_GPIO_Init+0x290>)
 800137c:	f000 fb32 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2S3_WS_Pin */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001380:	2310      	movs	r3, #16
 8001382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001390:	2306      	movs	r3, #6
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4849      	ldr	r0, [pc, #292]	; (80014c0 <MX_GPIO_Init+0x290>)
 800139c:	f000 fb22 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 80013a0:	23e0      	movs	r3, #224	; 0xe0
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013b0:	2305      	movs	r3, #5
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4841      	ldr	r0, [pc, #260]	; (80014c0 <MX_GPIO_Init+0x290>)
 80013bc:	f000 fb12 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin;
 80013c0:	2304      	movs	r3, #4
 80013c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	483c      	ldr	r0, [pc, #240]	; (80014c4 <MX_GPIO_Init+0x294>)
 80013d4:	f000 fb06 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : CLK_IN_Pin */
    GPIO_InitStruct.Pin = CLK_IN_Pin;
 80013d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ea:	2305      	movs	r3, #5
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4833      	ldr	r0, [pc, #204]	; (80014c4 <MX_GPIO_Init+0x294>)
 80013f6:	f000 faf5 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                             Audio_RST_Pin */
    GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80013fa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	482a      	ldr	r0, [pc, #168]	; (80014bc <MX_GPIO_Init+0x28c>)
 8001414:	f000 fae6 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
    GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8001418:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800142a:	2306      	movs	r3, #6
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4820      	ldr	r0, [pc, #128]	; (80014b8 <MX_GPIO_Init+0x288>)
 8001436:	f000 fad5 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : VBUS_FS_Pin */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800143a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	481c      	ldr	r0, [pc, #112]	; (80014c0 <MX_GPIO_Init+0x290>)
 8001450:	f000 fac8 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 8001454:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001466:	230a      	movs	r3, #10
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4813      	ldr	r0, [pc, #76]	; (80014c0 <MX_GPIO_Init+0x290>)
 8001472:	f000 fab7 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
    GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001476:	2320      	movs	r3, #32
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_GPIO_Init+0x28c>)
 800148a:	f000 faab 	bl	80019e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : MEMS_INT2_Pin */
    GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800148e:	2302      	movs	r3, #2
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001492:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_GPIO_Init+0x284>)
 80014a4:	f000 fa9e 	bl	80019e4 <HAL_GPIO_Init>
}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40020400 	.word	0x40020400

080014c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>
	...

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_MspInit+0x4c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <HAL_MspInit+0x4c>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_MspInit+0x4c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_MspInit+0x4c>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001512:	2007      	movs	r0, #7
 8001514:	f000 fa32 	bl	800197c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a19      	ldr	r2, [pc, #100]	; (80015a8 <HAL_I2C_MspInit+0x84>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d12b      	bne.n	800159e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_I2C_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a17      	ldr	r2, [pc, #92]	; (80015ac <HAL_I2C_MspInit+0x88>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_I2C_MspInit+0x88>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001562:	23c0      	movs	r3, #192	; 0xc0
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001566:	2312      	movs	r3, #18
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001572:	2304      	movs	r3, #4
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <HAL_I2C_MspInit+0x8c>)
 800157e:	f000 fa31 	bl	80019e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_I2C_MspInit+0x88>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_I2C_MspInit+0x88>)
 800158c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_I2C_MspInit+0x88>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40005400 	.word	0x40005400
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020400 	.word	0x40020400

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 f8c6 	bl	8001790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001638:	f001 fd20 	bl	800307c <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e009      	b.n	800165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <_sbrk+0x64>)
 8001658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20020000 	.word	0x20020000
 8001668:	00000400 	.word	0x00000400
 800166c:	200000e0 	.word	0x200000e0
 8001670:	200000f8 	.word	0x200000f8

08001674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <SystemInit+0x20>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <SystemInit+0x20>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800169e:	490e      	ldr	r1, [pc, #56]	; (80016d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b4:	4c0b      	ldr	r4, [pc, #44]	; (80016e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016c2:	f7ff ffd7 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c6:	f001 fcdf 	bl	8003088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ca:	f7ff fcbd 	bl	8001048 <main>
  bx  lr    
 80016ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016dc:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 80016e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016e4:	200000f8 	.word	0x200000f8

080016e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC_IRQHandler>
	...

080016ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0d      	ldr	r2, [pc, #52]	; (800172c <HAL_Init+0x40>)
 80016f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_Init+0x40>)
 8001702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_Init+0x40>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001714:	2003      	movs	r0, #3
 8001716:	f000 f931 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f808 	bl	8001730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001720:	f7ff fed8 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x54>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x58>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	fbb3 f3f1 	udiv	r3, r3, r1
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f93b 	bl	80019ca <HAL_SYSTICK_Config>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00e      	b.n	800177c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d80a      	bhi.n	800177a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f000 f911 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <HAL_InitTick+0x5c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e000      	b.n	800177c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000000 	.word	0x20000000
 8001788:	20000008 	.word	0x20000008
 800178c:	20000004 	.word	0x20000004

08001790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x20>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x24>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_IncTick+0x24>)
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000008 	.word	0x20000008
 80017b4:	200000e4 	.word	0x200000e4

080017b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_GetTick+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200000e4 	.word	0x200000e4

080017d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff ffee 	bl	80017b8 <HAL_GetTick>
 80017dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d005      	beq.n	80017f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_Delay+0x44>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017f6:	bf00      	nop
 80017f8:	f7ff ffde 	bl	80017b8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	429a      	cmp	r2, r3
 8001806:	d8f7      	bhi.n	80017f8 <HAL_Delay+0x28>
  {
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000008 	.word	0x20000008

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff47 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff5c 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff8e 	bl	80018d0 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffb0 	bl	8001938 <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	e16b      	b.n	8001cd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a00:	2201      	movs	r2, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	f040 815a 	bne.w	8001cd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d005      	beq.n	8001a36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d130      	bne.n	8001a98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	2203      	movs	r2, #3
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 0201 	and.w	r2, r3, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d017      	beq.n	8001ad4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d123      	bne.n	8001b28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	08da      	lsrs	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3208      	adds	r2, #8
 8001ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	08da      	lsrs	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3208      	adds	r2, #8
 8001b22:	69b9      	ldr	r1, [r7, #24]
 8001b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0203 	and.w	r2, r3, #3
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80b4 	beq.w	8001cd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <HAL_GPIO_Init+0x30c>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	4a5f      	ldr	r2, [pc, #380]	; (8001cf0 <HAL_GPIO_Init+0x30c>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b78:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7a:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <HAL_GPIO_Init+0x30c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b86:	4a5b      	ldr	r2, [pc, #364]	; (8001cf4 <HAL_GPIO_Init+0x310>)
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a52      	ldr	r2, [pc, #328]	; (8001cf8 <HAL_GPIO_Init+0x314>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d02b      	beq.n	8001c0a <HAL_GPIO_Init+0x226>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a51      	ldr	r2, [pc, #324]	; (8001cfc <HAL_GPIO_Init+0x318>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d025      	beq.n	8001c06 <HAL_GPIO_Init+0x222>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a50      	ldr	r2, [pc, #320]	; (8001d00 <HAL_GPIO_Init+0x31c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01f      	beq.n	8001c02 <HAL_GPIO_Init+0x21e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4f      	ldr	r2, [pc, #316]	; (8001d04 <HAL_GPIO_Init+0x320>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d019      	beq.n	8001bfe <HAL_GPIO_Init+0x21a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4e      	ldr	r2, [pc, #312]	; (8001d08 <HAL_GPIO_Init+0x324>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0x216>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4d      	ldr	r2, [pc, #308]	; (8001d0c <HAL_GPIO_Init+0x328>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_GPIO_Init+0x212>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4c      	ldr	r2, [pc, #304]	; (8001d10 <HAL_GPIO_Init+0x32c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0x20e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4b      	ldr	r2, [pc, #300]	; (8001d14 <HAL_GPIO_Init+0x330>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_GPIO_Init+0x20a>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e00e      	b.n	8001c0c <HAL_GPIO_Init+0x228>
 8001bee:	2308      	movs	r3, #8
 8001bf0:	e00c      	b.n	8001c0c <HAL_GPIO_Init+0x228>
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	e00a      	b.n	8001c0c <HAL_GPIO_Init+0x228>
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	e008      	b.n	8001c0c <HAL_GPIO_Init+0x228>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x228>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x228>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x228>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x228>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f002 0203 	and.w	r2, r2, #3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c1c:	4935      	ldr	r1, [pc, #212]	; (8001cf4 <HAL_GPIO_Init+0x310>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <HAL_GPIO_Init+0x334>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4e:	4a32      	ldr	r2, [pc, #200]	; (8001d18 <HAL_GPIO_Init+0x334>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c54:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <HAL_GPIO_Init+0x334>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c78:	4a27      	ldr	r2, [pc, #156]	; (8001d18 <HAL_GPIO_Init+0x334>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c7e:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <HAL_GPIO_Init+0x334>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_GPIO_Init+0x334>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_GPIO_Init+0x334>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ccc:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <HAL_GPIO_Init+0x334>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	f67f ae90 	bls.w	8001a00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40020c00 	.word	0x40020c00
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40021400 	.word	0x40021400
 8001d10:	40021800 	.word	0x40021800
 8001d14:	40021c00 	.word	0x40021c00
 8001d18:	40013c00 	.word	0x40013c00

08001d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d38:	e003      	b.n	8001d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	041a      	lsls	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	619a      	str	r2, [r3, #24]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e12b      	b.n	8001fba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fbd4 	bl	8001524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2224      	movs	r2, #36	; 0x24
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001db4:	f001 f888 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8001db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4a81      	ldr	r2, [pc, #516]	; (8001fc4 <HAL_I2C_Init+0x274>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d807      	bhi.n	8001dd4 <HAL_I2C_Init+0x84>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a80      	ldr	r2, [pc, #512]	; (8001fc8 <HAL_I2C_Init+0x278>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bf94      	ite	ls
 8001dcc:	2301      	movls	r3, #1
 8001dce:	2300      	movhi	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	e006      	b.n	8001de2 <HAL_I2C_Init+0x92>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a7d      	ldr	r2, [pc, #500]	; (8001fcc <HAL_I2C_Init+0x27c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	bf94      	ite	ls
 8001ddc:	2301      	movls	r3, #1
 8001dde:	2300      	movhi	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0e7      	b.n	8001fba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4a78      	ldr	r2, [pc, #480]	; (8001fd0 <HAL_I2C_Init+0x280>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0c9b      	lsrs	r3, r3, #18
 8001df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a6a      	ldr	r2, [pc, #424]	; (8001fc4 <HAL_I2C_Init+0x274>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d802      	bhi.n	8001e24 <HAL_I2C_Init+0xd4>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3301      	adds	r3, #1
 8001e22:	e009      	b.n	8001e38 <HAL_I2C_Init+0xe8>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	4a69      	ldr	r2, [pc, #420]	; (8001fd4 <HAL_I2C_Init+0x284>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	099b      	lsrs	r3, r3, #6
 8001e36:	3301      	adds	r3, #1
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	495c      	ldr	r1, [pc, #368]	; (8001fc4 <HAL_I2C_Init+0x274>)
 8001e54:	428b      	cmp	r3, r1
 8001e56:	d819      	bhi.n	8001e8c <HAL_I2C_Init+0x13c>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e59      	subs	r1, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e66:	1c59      	adds	r1, r3, #1
 8001e68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_I2C_Init+0x138>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1e59      	subs	r1, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e80:	3301      	adds	r3, #1
 8001e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e86:	e051      	b.n	8001f2c <HAL_I2C_Init+0x1dc>
 8001e88:	2304      	movs	r3, #4
 8001e8a:	e04f      	b.n	8001f2c <HAL_I2C_Init+0x1dc>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d111      	bne.n	8001eb8 <HAL_I2C_Init+0x168>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1e58      	subs	r0, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	e012      	b.n	8001ede <HAL_I2C_Init+0x18e>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	0099      	lsls	r1, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Init+0x196>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e022      	b.n	8001f2c <HAL_I2C_Init+0x1dc>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10e      	bne.n	8001f0c <HAL_I2C_Init+0x1bc>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1e58      	subs	r0, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	440b      	add	r3, r1
 8001efc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f0a:	e00f      	b.n	8001f2c <HAL_I2C_Init+0x1dc>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1e58      	subs	r0, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	0099      	lsls	r1, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	6809      	ldr	r1, [r1, #0]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6911      	ldr	r1, [r2, #16]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68d2      	ldr	r2, [r2, #12]
 8001f66:	4311      	orrs	r1, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	000186a0 	.word	0x000186a0
 8001fc8:	001e847f 	.word	0x001e847f
 8001fcc:	003d08ff 	.word	0x003d08ff
 8001fd0:	431bde83 	.word	0x431bde83
 8001fd4:	10624dd3 	.word	0x10624dd3

08001fd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	817b      	strh	r3, [r7, #10]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff fbe4 	bl	80017b8 <HAL_GetTick>
 8001ff0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	f040 80e0 	bne.w	80021c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2319      	movs	r3, #25
 8002006:	2201      	movs	r2, #1
 8002008:	4970      	ldr	r1, [pc, #448]	; (80021cc <HAL_I2C_Master_Transmit+0x1f4>)
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f964 	bl	80022d8 <I2C_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002016:	2302      	movs	r3, #2
 8002018:	e0d3      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_I2C_Master_Transmit+0x50>
 8002024:	2302      	movs	r3, #2
 8002026:	e0cc      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d007      	beq.n	800204e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2221      	movs	r2, #33	; 0x21
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2210      	movs	r2, #16
 800206a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	893a      	ldrh	r2, [r7, #8]
 800207e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4a50      	ldr	r2, [pc, #320]	; (80021d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002090:	8979      	ldrh	r1, [r7, #10]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	6a3a      	ldr	r2, [r7, #32]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f89c 	bl	80021d4 <I2C_MasterRequestWrite>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e08d      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020bc:	e066      	b.n	800218c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	6a39      	ldr	r1, [r7, #32]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f9de 	bl	8002484 <I2C_WaitOnTXEFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00d      	beq.n	80020ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d107      	bne.n	80020e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e06b      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b04      	cmp	r3, #4
 8002126:	d11b      	bne.n	8002160 <HAL_I2C_Master_Transmit+0x188>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	d017      	beq.n	8002160 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	6a39      	ldr	r1, [r7, #32]
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f9ce 	bl	8002506 <I2C_WaitOnBTFFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00d      	beq.n	800218c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	2b04      	cmp	r3, #4
 8002176:	d107      	bne.n	8002188 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002186:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e01a      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	d194      	bne.n	80020be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021c0:	2302      	movs	r3, #2
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	00100002 	.word	0x00100002
 80021d0:	ffff0000 	.word	0xffff0000

080021d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	460b      	mov	r3, r1
 80021e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d006      	beq.n	80021fe <I2C_MasterRequestWrite+0x2a>
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d003      	beq.n	80021fe <I2C_MasterRequestWrite+0x2a>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021fc:	d108      	bne.n	8002210 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e00b      	b.n	8002228 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	2b12      	cmp	r3, #18
 8002216:	d107      	bne.n	8002228 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002226:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f84f 	bl	80022d8 <I2C_WaitOnFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800224e:	d103      	bne.n	8002258 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e035      	b.n	80022c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002264:	d108      	bne.n	8002278 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002266:	897b      	ldrh	r3, [r7, #10]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002274:	611a      	str	r2, [r3, #16]
 8002276:	e01b      	b.n	80022b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002278:	897b      	ldrh	r3, [r7, #10]
 800227a:	11db      	asrs	r3, r3, #7
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f003 0306 	and.w	r3, r3, #6
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f063 030f 	orn	r3, r3, #15
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	490e      	ldr	r1, [pc, #56]	; (80022d0 <I2C_MasterRequestWrite+0xfc>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f875 	bl	8002386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e010      	b.n	80022c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022a6:	897b      	ldrh	r3, [r7, #10]
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4907      	ldr	r1, [pc, #28]	; (80022d4 <I2C_MasterRequestWrite+0x100>)
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f865 	bl	8002386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	00010008 	.word	0x00010008
 80022d4:	00010002 	.word	0x00010002

080022d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022e8:	e025      	b.n	8002336 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d021      	beq.n	8002336 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f2:	f7ff fa61 	bl	80017b8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d302      	bcc.n	8002308 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d116      	bne.n	8002336 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e023      	b.n	800237e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10d      	bne.n	800235c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4013      	ands	r3, r2
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	e00c      	b.n	8002376 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4013      	ands	r3, r2
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf0c      	ite	eq
 800236e:	2301      	moveq	r3, #1
 8002370:	2300      	movne	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	429a      	cmp	r2, r3
 800237a:	d0b6      	beq.n	80022ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002394:	e051      	b.n	800243a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a4:	d123      	bne.n	80023ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f043 0204 	orr.w	r2, r3, #4
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e046      	b.n	800247c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d021      	beq.n	800243a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f6:	f7ff f9df 	bl	80017b8 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	429a      	cmp	r2, r3
 8002404:	d302      	bcc.n	800240c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d116      	bne.n	800243a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f043 0220 	orr.w	r2, r3, #32
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e020      	b.n	800247c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d10c      	bne.n	800245e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4013      	ands	r3, r2
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf14      	ite	ne
 8002456:	2301      	movne	r3, #1
 8002458:	2300      	moveq	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	e00b      	b.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	43da      	mvns	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4013      	ands	r3, r2
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d18d      	bne.n	8002396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002490:	e02d      	b.n	80024ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f878 	bl	8002588 <I2C_IsAcknowledgeFailed>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e02d      	b.n	80024fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d021      	beq.n	80024ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024aa:	f7ff f985 	bl	80017b8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d302      	bcc.n	80024c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d116      	bne.n	80024ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f043 0220 	orr.w	r2, r3, #32
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e007      	b.n	80024fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d1ca      	bne.n	8002492 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002512:	e02d      	b.n	8002570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f837 	bl	8002588 <I2C_IsAcknowledgeFailed>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e02d      	b.n	8002580 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d021      	beq.n	8002570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252c:	f7ff f944 	bl	80017b8 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	429a      	cmp	r2, r3
 800253a:	d302      	bcc.n	8002542 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f043 0220 	orr.w	r2, r3, #32
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e007      	b.n	8002580 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b04      	cmp	r3, #4
 800257c:	d1ca      	bne.n	8002514 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d11b      	bne.n	80025d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f043 0204 	orr.w	r2, r3, #4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e267      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d075      	beq.n	80026f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002606:	4b88      	ldr	r3, [pc, #544]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b04      	cmp	r3, #4
 8002610:	d00c      	beq.n	800262c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4b85      	ldr	r3, [pc, #532]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261a:	2b08      	cmp	r3, #8
 800261c:	d112      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261e:	4b82      	ldr	r3, [pc, #520]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262a:	d10b      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	4b7e      	ldr	r3, [pc, #504]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x108>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d157      	bne.n	80026f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e242      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x74>
 800264e:	4b76      	ldr	r3, [pc, #472]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a75      	ldr	r2, [pc, #468]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x98>
 8002666:	4b70      	ldr	r3, [pc, #448]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6f      	ldr	r2, [pc, #444]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b6d      	ldr	r3, [pc, #436]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a6c      	ldr	r2, [pc, #432]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 8002680:	4b69      	ldr	r3, [pc, #420]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a68      	ldr	r2, [pc, #416]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b66      	ldr	r3, [pc, #408]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a65      	ldr	r2, [pc, #404]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7ff f88a 	bl	80017b8 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff f886 	bl	80017b8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e207      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0xc0>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7ff f876 	bl	80017b8 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d0:	f7ff f872 	bl	80017b8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1f3      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	4b51      	ldr	r3, [pc, #324]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0xe8>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d063      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026fe:	4b4a      	ldr	r3, [pc, #296]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002712:	2b08      	cmp	r3, #8
 8002714:	d11c      	bne.n	8002750 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002716:	4b44      	ldr	r3, [pc, #272]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d116      	bne.n	8002750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_RCC_OscConfig+0x152>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d001      	beq.n	800273a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e1c7      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4937      	ldr	r1, [pc, #220]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274e:	e03a      	b.n	80027c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002758:	4b34      	ldr	r3, [pc, #208]	; (800282c <HAL_RCC_OscConfig+0x244>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7ff f82b 	bl	80017b8 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002766:	f7ff f827 	bl	80017b8 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e1a8      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4925      	ldr	r1, [pc, #148]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
 8002798:	e015      	b.n	80027c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_OscConfig+0x244>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7ff f80a 	bl	80017b8 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a8:	f7ff f806 	bl	80017b8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e187      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d036      	beq.n	8002840 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d016      	beq.n	8002808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_RCC_OscConfig+0x248>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7fe ffea 	bl	80017b8 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe ffe6 	bl	80017b8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e167      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80027fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x200>
 8002806:	e01b      	b.n	8002840 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_RCC_OscConfig+0x248>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7fe ffd3 	bl	80017b8 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	e00e      	b.n	8002834 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002816:	f7fe ffcf 	bl	80017b8 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d907      	bls.n	8002834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e150      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
 8002828:	40023800 	.word	0x40023800
 800282c:	42470000 	.word	0x42470000
 8002830:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ea      	bne.n	8002816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8097 	beq.w	800297c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002852:	4b81      	ldr	r3, [pc, #516]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10f      	bne.n	800287e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b7d      	ldr	r3, [pc, #500]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a7c      	ldr	r2, [pc, #496]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b7a      	ldr	r3, [pc, #488]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b77      	ldr	r3, [pc, #476]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d118      	bne.n	80028bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b74      	ldr	r3, [pc, #464]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a73      	ldr	r2, [pc, #460]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7fe ff8f 	bl	80017b8 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7fe ff8b 	bl	80017b8 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e10c      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x2ea>
 80028c4:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a63      	ldr	r2, [pc, #396]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
 80028d0:	e01c      	b.n	800290c <HAL_RCC_OscConfig+0x324>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x30c>
 80028da:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	4a5e      	ldr	r2, [pc, #376]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6713      	str	r3, [r2, #112]	; 0x70
 80028e6:	4b5c      	ldr	r3, [pc, #368]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	4a5b      	ldr	r2, [pc, #364]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6713      	str	r3, [r2, #112]	; 0x70
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0x324>
 80028f4:	4b58      	ldr	r3, [pc, #352]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a57      	ldr	r2, [pc, #348]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	4b55      	ldr	r3, [pc, #340]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a54      	ldr	r2, [pc, #336]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002906:	f023 0304 	bic.w	r3, r3, #4
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe ff50 	bl	80017b8 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7fe ff4c 	bl	80017b8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e0cb      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002932:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ee      	beq.n	800291c <HAL_RCC_OscConfig+0x334>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002940:	f7fe ff3a 	bl	80017b8 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002946:	e00a      	b.n	800295e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002948:	f7fe ff36 	bl	80017b8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e0b5      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295e:	4b3e      	ldr	r3, [pc, #248]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ee      	bne.n	8002948 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002970:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	4a38      	ldr	r2, [pc, #224]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a1 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b08      	cmp	r3, #8
 8002990:	d05c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d141      	bne.n	8002a1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <HAL_RCC_OscConfig+0x478>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe ff0a 	bl	80017b8 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe ff06 	bl	80017b8 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e087      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	019b      	lsls	r3, r3, #6
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	3b01      	subs	r3, #1
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	491b      	ldr	r1, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x478>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe fedf 	bl	80017b8 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe fedb 	bl	80017b8 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e05c      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x416>
 8002a1c:	e054      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_RCC_OscConfig+0x478>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fe fec8 	bl	80017b8 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe fec4 	bl	80017b8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e045      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x444>
 8002a4a:	e03d      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e038      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d028      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d121      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d11a      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a94:	4013      	ands	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d111      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	3b01      	subs	r3, #1
 8002aae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0cc      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b68      	ldr	r3, [pc, #416]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d90c      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b63      	ldr	r3, [pc, #396]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b8      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b2c:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a58      	ldr	r2, [pc, #352]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b44:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a52      	ldr	r2, [pc, #328]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	494d      	ldr	r1, [pc, #308]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d044      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d119      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d003      	beq.n	8002b96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e067      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4934      	ldr	r1, [pc, #208]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fdf6 	bl	80017b8 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7fe fdf2 	bl	80017b8 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e04f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d20c      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e032      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4916      	ldr	r1, [pc, #88]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	490e      	ldr	r1, [pc, #56]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c5e:	f000 f821 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	490a      	ldr	r1, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	5ccb      	ldrb	r3, [r1, r3]
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fd56 	bl	8001730 <HAL_InitTick>

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023c00 	.word	0x40023c00
 8002c94:	40023800 	.word	0x40023800
 8002c98:	080042cc 	.word	0x080042cc
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	20000004 	.word	0x20000004

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca8:	b094      	sub	sp, #80	; 0x50
 8002caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	647b      	str	r3, [r7, #68]	; 0x44
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cbc:	4b79      	ldr	r3, [pc, #484]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d00d      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	f200 80e1 	bhi.w	8002e90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x3a>
 8002cd6:	e0db      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b73      	ldr	r3, [pc, #460]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cdc:	e0db      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cde:	4b73      	ldr	r3, [pc, #460]	; (8002eac <HAL_RCC_GetSysClockFreq+0x208>)
 8002ce0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce2:	e0d8      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce4:	4b6f      	ldr	r3, [pc, #444]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cee:	4b6d      	ldr	r3, [pc, #436]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d063      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	2200      	movs	r2, #0
 8002d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d0e:	2300      	movs	r3, #0
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
 8002d12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d16:	4622      	mov	r2, r4
 8002d18:	462b      	mov	r3, r5
 8002d1a:	f04f 0000 	mov.w	r0, #0
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	0159      	lsls	r1, r3, #5
 8002d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d28:	0150      	lsls	r0, r2, #5
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4621      	mov	r1, r4
 8002d30:	1a51      	subs	r1, r2, r1
 8002d32:	6139      	str	r1, [r7, #16]
 8002d34:	4629      	mov	r1, r5
 8002d36:	eb63 0301 	sbc.w	r3, r3, r1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d48:	4659      	mov	r1, fp
 8002d4a:	018b      	lsls	r3, r1, #6
 8002d4c:	4651      	mov	r1, sl
 8002d4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d52:	4651      	mov	r1, sl
 8002d54:	018a      	lsls	r2, r1, #6
 8002d56:	4651      	mov	r1, sl
 8002d58:	ebb2 0801 	subs.w	r8, r2, r1
 8002d5c:	4659      	mov	r1, fp
 8002d5e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d76:	4690      	mov	r8, r2
 8002d78:	4699      	mov	r9, r3
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	eb18 0303 	adds.w	r3, r8, r3
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	462b      	mov	r3, r5
 8002d84:	eb49 0303 	adc.w	r3, r9, r3
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d96:	4629      	mov	r1, r5
 8002d98:	024b      	lsls	r3, r1, #9
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002da0:	4621      	mov	r1, r4
 8002da2:	024a      	lsls	r2, r1, #9
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002daa:	2200      	movs	r2, #0
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002db0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002db4:	f7fd fea4 	bl	8000b00 <__aeabi_uldivmod>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc0:	e058      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc2:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	4611      	mov	r1, r2
 8002dce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ddc:	4642      	mov	r2, r8
 8002dde:	464b      	mov	r3, r9
 8002de0:	f04f 0000 	mov.w	r0, #0
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	0159      	lsls	r1, r3, #5
 8002dea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dee:	0150      	lsls	r0, r2, #5
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4641      	mov	r1, r8
 8002df6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e14:	ebb2 040a 	subs.w	r4, r2, sl
 8002e18:	eb63 050b 	sbc.w	r5, r3, fp
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	00eb      	lsls	r3, r5, #3
 8002e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e2a:	00e2      	lsls	r2, r4, #3
 8002e2c:	4614      	mov	r4, r2
 8002e2e:	461d      	mov	r5, r3
 8002e30:	4643      	mov	r3, r8
 8002e32:	18e3      	adds	r3, r4, r3
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	464b      	mov	r3, r9
 8002e38:	eb45 0303 	adc.w	r3, r5, r3
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	028b      	lsls	r3, r1, #10
 8002e4e:	4621      	mov	r1, r4
 8002e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e54:	4621      	mov	r1, r4
 8002e56:	028a      	lsls	r2, r1, #10
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	61fa      	str	r2, [r7, #28]
 8002e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e68:	f7fd fe4a 	bl	8000b00 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4613      	mov	r3, r2
 8002e72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e8e:	e002      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3750      	adds	r7, #80	; 0x50
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	007a1200 	.word	0x007a1200

08002eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000000 	.word	0x20000000

08002ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ecc:	f7ff fff0 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0a9b      	lsrs	r3, r3, #10
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4903      	ldr	r1, [pc, #12]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	080042dc 	.word	0x080042dc

08002ef0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly
extern
#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	f023 030f 	bic.w	r3, r3, #15
 8002f00:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	f043 030c 	orr.w	r3, r3, #12
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	f043 0308 	orr.w	r3, r3, #8
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002f1c:	7bbb      	ldrb	r3, [r7, #14]
 8002f1e:	f043 030c 	orr.w	r3, r3, #12
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002f26:	7bbb      	ldrb	r3, [r7, #14]
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f30:	f107 0208 	add.w	r2, r7, #8
 8002f34:	2364      	movs	r3, #100	; 0x64
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2304      	movs	r3, #4
 8002f3a:	214e      	movs	r1, #78	; 0x4e
 8002f3c:	4803      	ldr	r0, [pc, #12]	; (8002f4c <lcd_send_cmd+0x5c>)
 8002f3e:	f7ff f84b 	bl	8001fd8 <HAL_I2C_Master_Transmit>
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000008c 	.word	0x2000008c

08002f50 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f023 030f 	bic.w	r3, r3, #15
 8002f60:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	f043 030d 	orr.w	r3, r3, #13
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	f043 0309 	orr.w	r3, r3, #9
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f7c:	7bbb      	ldrb	r3, [r7, #14]
 8002f7e:	f043 030d 	orr.w	r3, r3, #13
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f86:	7bbb      	ldrb	r3, [r7, #14]
 8002f88:	f043 0309 	orr.w	r3, r3, #9
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f90:	f107 0208 	add.w	r2, r7, #8
 8002f94:	2364      	movs	r3, #100	; 0x64
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	2304      	movs	r3, #4
 8002f9a:	214e      	movs	r1, #78	; 0x4e
 8002f9c:	4803      	ldr	r0, [pc, #12]	; (8002fac <lcd_send_data+0x5c>)
 8002f9e:	f7ff f81b 	bl	8001fd8 <HAL_I2C_Master_Transmit>
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	2000008c 	.word	0x2000008c

08002fb0 <lcd_init>:

void lcd_init (void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8002fb4:	2033      	movs	r0, #51	; 0x33
 8002fb6:	f7ff ff9b 	bl	8002ef0 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8002fba:	2032      	movs	r0, #50	; 0x32
 8002fbc:	f7ff ff98 	bl	8002ef0 <lcd_send_cmd>
	HAL_Delay(50);
 8002fc0:	2032      	movs	r0, #50	; 0x32
 8002fc2:	f7fe fc05 	bl	80017d0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8002fc6:	2028      	movs	r0, #40	; 0x28
 8002fc8:	f7ff ff92 	bl	8002ef0 <lcd_send_cmd>
	HAL_Delay(50);
 8002fcc:	2032      	movs	r0, #50	; 0x32
 8002fce:	f7fe fbff 	bl	80017d0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f7ff ff8c 	bl	8002ef0 <lcd_send_cmd>
	HAL_Delay(50);
 8002fd8:	2032      	movs	r0, #50	; 0x32
 8002fda:	f7fe fbf9 	bl	80017d0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8002fde:	2006      	movs	r0, #6
 8002fe0:	f7ff ff86 	bl	8002ef0 <lcd_send_cmd>
	HAL_Delay(50);
 8002fe4:	2032      	movs	r0, #50	; 0x32
 8002fe6:	f7fe fbf3 	bl	80017d0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8002fea:	200c      	movs	r0, #12
 8002fec:	f7ff ff80 	bl	8002ef0 <lcd_send_cmd>
	HAL_Delay(50);
 8002ff0:	2032      	movs	r0, #50	; 0x32
 8002ff2:	f7fe fbed 	bl	80017d0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8002ff6:	2002      	movs	r0, #2
 8002ff8:	f7ff ff7a 	bl	8002ef0 <lcd_send_cmd>
	HAL_Delay(50);
 8002ffc:	2032      	movs	r0, #50	; 0x32
 8002ffe:	f7fe fbe7 	bl	80017d0 <HAL_Delay>
	lcd_send_cmd (0x80);
 8003002:	2080      	movs	r0, #128	; 0x80
 8003004:	f7ff ff74 	bl	8002ef0 <lcd_send_cmd>
}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}

0800300c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8003014:	e006      	b.n	8003024 <lcd_send_string+0x18>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff96 	bl	8002f50 <lcd_send_data>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f4      	bne.n	8003016 <lcd_send_string+0xa>
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d108      	bne.n	8003058 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	4413      	add	r3, r2
 8003050:	b2db      	uxtb	r3, r3
 8003052:	337f      	adds	r3, #127	; 0x7f
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	e008      	b.n	800306a <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	3340      	adds	r3, #64	; 0x40
 800305e:	b2db      	uxtb	r3, r3
 8003060:	b25b      	sxtb	r3, r3
 8003062:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003066:	b25b      	sxtb	r3, r3
 8003068:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff3f 	bl	8002ef0 <lcd_send_cmd>
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <__errno>:
 800307c:	4b01      	ldr	r3, [pc, #4]	; (8003084 <__errno+0x8>)
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	2000000c 	.word	0x2000000c

08003088 <__libc_init_array>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	4d0d      	ldr	r5, [pc, #52]	; (80030c0 <__libc_init_array+0x38>)
 800308c:	4c0d      	ldr	r4, [pc, #52]	; (80030c4 <__libc_init_array+0x3c>)
 800308e:	1b64      	subs	r4, r4, r5
 8003090:	10a4      	asrs	r4, r4, #2
 8003092:	2600      	movs	r6, #0
 8003094:	42a6      	cmp	r6, r4
 8003096:	d109      	bne.n	80030ac <__libc_init_array+0x24>
 8003098:	4d0b      	ldr	r5, [pc, #44]	; (80030c8 <__libc_init_array+0x40>)
 800309a:	4c0c      	ldr	r4, [pc, #48]	; (80030cc <__libc_init_array+0x44>)
 800309c:	f001 f802 	bl	80040a4 <_init>
 80030a0:	1b64      	subs	r4, r4, r5
 80030a2:	10a4      	asrs	r4, r4, #2
 80030a4:	2600      	movs	r6, #0
 80030a6:	42a6      	cmp	r6, r4
 80030a8:	d105      	bne.n	80030b6 <__libc_init_array+0x2e>
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b0:	4798      	blx	r3
 80030b2:	3601      	adds	r6, #1
 80030b4:	e7ee      	b.n	8003094 <__libc_init_array+0xc>
 80030b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ba:	4798      	blx	r3
 80030bc:	3601      	adds	r6, #1
 80030be:	e7f2      	b.n	80030a6 <__libc_init_array+0x1e>
 80030c0:	08004320 	.word	0x08004320
 80030c4:	08004320 	.word	0x08004320
 80030c8:	08004320 	.word	0x08004320
 80030cc:	08004324 	.word	0x08004324

080030d0 <malloc>:
 80030d0:	4b02      	ldr	r3, [pc, #8]	; (80030dc <malloc+0xc>)
 80030d2:	4601      	mov	r1, r0
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	f000 b839 	b.w	800314c <_malloc_r>
 80030da:	bf00      	nop
 80030dc:	2000000c 	.word	0x2000000c

080030e0 <memcpy>:
 80030e0:	440a      	add	r2, r1
 80030e2:	4291      	cmp	r1, r2
 80030e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80030e8:	d100      	bne.n	80030ec <memcpy+0xc>
 80030ea:	4770      	bx	lr
 80030ec:	b510      	push	{r4, lr}
 80030ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030f6:	4291      	cmp	r1, r2
 80030f8:	d1f9      	bne.n	80030ee <memcpy+0xe>
 80030fa:	bd10      	pop	{r4, pc}

080030fc <memset>:
 80030fc:	4402      	add	r2, r0
 80030fe:	4603      	mov	r3, r0
 8003100:	4293      	cmp	r3, r2
 8003102:	d100      	bne.n	8003106 <memset+0xa>
 8003104:	4770      	bx	lr
 8003106:	f803 1b01 	strb.w	r1, [r3], #1
 800310a:	e7f9      	b.n	8003100 <memset+0x4>

0800310c <sbrk_aligned>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	4e0e      	ldr	r6, [pc, #56]	; (8003148 <sbrk_aligned+0x3c>)
 8003110:	460c      	mov	r4, r1
 8003112:	6831      	ldr	r1, [r6, #0]
 8003114:	4605      	mov	r5, r0
 8003116:	b911      	cbnz	r1, 800311e <sbrk_aligned+0x12>
 8003118:	f000 f88c 	bl	8003234 <_sbrk_r>
 800311c:	6030      	str	r0, [r6, #0]
 800311e:	4621      	mov	r1, r4
 8003120:	4628      	mov	r0, r5
 8003122:	f000 f887 	bl	8003234 <_sbrk_r>
 8003126:	1c43      	adds	r3, r0, #1
 8003128:	d00a      	beq.n	8003140 <sbrk_aligned+0x34>
 800312a:	1cc4      	adds	r4, r0, #3
 800312c:	f024 0403 	bic.w	r4, r4, #3
 8003130:	42a0      	cmp	r0, r4
 8003132:	d007      	beq.n	8003144 <sbrk_aligned+0x38>
 8003134:	1a21      	subs	r1, r4, r0
 8003136:	4628      	mov	r0, r5
 8003138:	f000 f87c 	bl	8003234 <_sbrk_r>
 800313c:	3001      	adds	r0, #1
 800313e:	d101      	bne.n	8003144 <sbrk_aligned+0x38>
 8003140:	f04f 34ff 	mov.w	r4, #4294967295
 8003144:	4620      	mov	r0, r4
 8003146:	bd70      	pop	{r4, r5, r6, pc}
 8003148:	200000ec 	.word	0x200000ec

0800314c <_malloc_r>:
 800314c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003150:	1ccd      	adds	r5, r1, #3
 8003152:	f025 0503 	bic.w	r5, r5, #3
 8003156:	3508      	adds	r5, #8
 8003158:	2d0c      	cmp	r5, #12
 800315a:	bf38      	it	cc
 800315c:	250c      	movcc	r5, #12
 800315e:	2d00      	cmp	r5, #0
 8003160:	4607      	mov	r7, r0
 8003162:	db01      	blt.n	8003168 <_malloc_r+0x1c>
 8003164:	42a9      	cmp	r1, r5
 8003166:	d905      	bls.n	8003174 <_malloc_r+0x28>
 8003168:	230c      	movs	r3, #12
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	2600      	movs	r6, #0
 800316e:	4630      	mov	r0, r6
 8003170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003174:	4e2e      	ldr	r6, [pc, #184]	; (8003230 <_malloc_r+0xe4>)
 8003176:	f000 f86d 	bl	8003254 <__malloc_lock>
 800317a:	6833      	ldr	r3, [r6, #0]
 800317c:	461c      	mov	r4, r3
 800317e:	bb34      	cbnz	r4, 80031ce <_malloc_r+0x82>
 8003180:	4629      	mov	r1, r5
 8003182:	4638      	mov	r0, r7
 8003184:	f7ff ffc2 	bl	800310c <sbrk_aligned>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	4604      	mov	r4, r0
 800318c:	d14d      	bne.n	800322a <_malloc_r+0xde>
 800318e:	6834      	ldr	r4, [r6, #0]
 8003190:	4626      	mov	r6, r4
 8003192:	2e00      	cmp	r6, #0
 8003194:	d140      	bne.n	8003218 <_malloc_r+0xcc>
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	4631      	mov	r1, r6
 800319a:	4638      	mov	r0, r7
 800319c:	eb04 0803 	add.w	r8, r4, r3
 80031a0:	f000 f848 	bl	8003234 <_sbrk_r>
 80031a4:	4580      	cmp	r8, r0
 80031a6:	d13a      	bne.n	800321e <_malloc_r+0xd2>
 80031a8:	6821      	ldr	r1, [r4, #0]
 80031aa:	3503      	adds	r5, #3
 80031ac:	1a6d      	subs	r5, r5, r1
 80031ae:	f025 0503 	bic.w	r5, r5, #3
 80031b2:	3508      	adds	r5, #8
 80031b4:	2d0c      	cmp	r5, #12
 80031b6:	bf38      	it	cc
 80031b8:	250c      	movcc	r5, #12
 80031ba:	4629      	mov	r1, r5
 80031bc:	4638      	mov	r0, r7
 80031be:	f7ff ffa5 	bl	800310c <sbrk_aligned>
 80031c2:	3001      	adds	r0, #1
 80031c4:	d02b      	beq.n	800321e <_malloc_r+0xd2>
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	442b      	add	r3, r5
 80031ca:	6023      	str	r3, [r4, #0]
 80031cc:	e00e      	b.n	80031ec <_malloc_r+0xa0>
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	1b52      	subs	r2, r2, r5
 80031d2:	d41e      	bmi.n	8003212 <_malloc_r+0xc6>
 80031d4:	2a0b      	cmp	r2, #11
 80031d6:	d916      	bls.n	8003206 <_malloc_r+0xba>
 80031d8:	1961      	adds	r1, r4, r5
 80031da:	42a3      	cmp	r3, r4
 80031dc:	6025      	str	r5, [r4, #0]
 80031de:	bf18      	it	ne
 80031e0:	6059      	strne	r1, [r3, #4]
 80031e2:	6863      	ldr	r3, [r4, #4]
 80031e4:	bf08      	it	eq
 80031e6:	6031      	streq	r1, [r6, #0]
 80031e8:	5162      	str	r2, [r4, r5]
 80031ea:	604b      	str	r3, [r1, #4]
 80031ec:	4638      	mov	r0, r7
 80031ee:	f104 060b 	add.w	r6, r4, #11
 80031f2:	f000 f835 	bl	8003260 <__malloc_unlock>
 80031f6:	f026 0607 	bic.w	r6, r6, #7
 80031fa:	1d23      	adds	r3, r4, #4
 80031fc:	1af2      	subs	r2, r6, r3
 80031fe:	d0b6      	beq.n	800316e <_malloc_r+0x22>
 8003200:	1b9b      	subs	r3, r3, r6
 8003202:	50a3      	str	r3, [r4, r2]
 8003204:	e7b3      	b.n	800316e <_malloc_r+0x22>
 8003206:	6862      	ldr	r2, [r4, #4]
 8003208:	42a3      	cmp	r3, r4
 800320a:	bf0c      	ite	eq
 800320c:	6032      	streq	r2, [r6, #0]
 800320e:	605a      	strne	r2, [r3, #4]
 8003210:	e7ec      	b.n	80031ec <_malloc_r+0xa0>
 8003212:	4623      	mov	r3, r4
 8003214:	6864      	ldr	r4, [r4, #4]
 8003216:	e7b2      	b.n	800317e <_malloc_r+0x32>
 8003218:	4634      	mov	r4, r6
 800321a:	6876      	ldr	r6, [r6, #4]
 800321c:	e7b9      	b.n	8003192 <_malloc_r+0x46>
 800321e:	230c      	movs	r3, #12
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	4638      	mov	r0, r7
 8003224:	f000 f81c 	bl	8003260 <__malloc_unlock>
 8003228:	e7a1      	b.n	800316e <_malloc_r+0x22>
 800322a:	6025      	str	r5, [r4, #0]
 800322c:	e7de      	b.n	80031ec <_malloc_r+0xa0>
 800322e:	bf00      	nop
 8003230:	200000e8 	.word	0x200000e8

08003234 <_sbrk_r>:
 8003234:	b538      	push	{r3, r4, r5, lr}
 8003236:	4d06      	ldr	r5, [pc, #24]	; (8003250 <_sbrk_r+0x1c>)
 8003238:	2300      	movs	r3, #0
 800323a:	4604      	mov	r4, r0
 800323c:	4608      	mov	r0, r1
 800323e:	602b      	str	r3, [r5, #0]
 8003240:	f7fe f9e2 	bl	8001608 <_sbrk>
 8003244:	1c43      	adds	r3, r0, #1
 8003246:	d102      	bne.n	800324e <_sbrk_r+0x1a>
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	b103      	cbz	r3, 800324e <_sbrk_r+0x1a>
 800324c:	6023      	str	r3, [r4, #0]
 800324e:	bd38      	pop	{r3, r4, r5, pc}
 8003250:	200000f0 	.word	0x200000f0

08003254 <__malloc_lock>:
 8003254:	4801      	ldr	r0, [pc, #4]	; (800325c <__malloc_lock+0x8>)
 8003256:	f000 b809 	b.w	800326c <__retarget_lock_acquire_recursive>
 800325a:	bf00      	nop
 800325c:	200000f4 	.word	0x200000f4

08003260 <__malloc_unlock>:
 8003260:	4801      	ldr	r0, [pc, #4]	; (8003268 <__malloc_unlock+0x8>)
 8003262:	f000 b804 	b.w	800326e <__retarget_lock_release_recursive>
 8003266:	bf00      	nop
 8003268:	200000f4 	.word	0x200000f4

0800326c <__retarget_lock_acquire_recursive>:
 800326c:	4770      	bx	lr

0800326e <__retarget_lock_release_recursive>:
 800326e:	4770      	bx	lr

08003270 <pow>:
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003272:	ed2d 8b02 	vpush	{d8}
 8003276:	eeb0 8a40 	vmov.f32	s16, s0
 800327a:	eef0 8a60 	vmov.f32	s17, s1
 800327e:	ec55 4b11 	vmov	r4, r5, d1
 8003282:	f000 f865 	bl	8003350 <__ieee754_pow>
 8003286:	4622      	mov	r2, r4
 8003288:	462b      	mov	r3, r5
 800328a:	4620      	mov	r0, r4
 800328c:	4629      	mov	r1, r5
 800328e:	ec57 6b10 	vmov	r6, r7, d0
 8003292:	f7fd fbf7 	bl	8000a84 <__aeabi_dcmpun>
 8003296:	2800      	cmp	r0, #0
 8003298:	d13b      	bne.n	8003312 <pow+0xa2>
 800329a:	ec51 0b18 	vmov	r0, r1, d8
 800329e:	2200      	movs	r2, #0
 80032a0:	2300      	movs	r3, #0
 80032a2:	f7fd fbbd 	bl	8000a20 <__aeabi_dcmpeq>
 80032a6:	b1b8      	cbz	r0, 80032d8 <pow+0x68>
 80032a8:	2200      	movs	r2, #0
 80032aa:	2300      	movs	r3, #0
 80032ac:	4620      	mov	r0, r4
 80032ae:	4629      	mov	r1, r5
 80032b0:	f7fd fbb6 	bl	8000a20 <__aeabi_dcmpeq>
 80032b4:	2800      	cmp	r0, #0
 80032b6:	d146      	bne.n	8003346 <pow+0xd6>
 80032b8:	ec45 4b10 	vmov	d0, r4, r5
 80032bc:	f000 fe61 	bl	8003f82 <finite>
 80032c0:	b338      	cbz	r0, 8003312 <pow+0xa2>
 80032c2:	2200      	movs	r2, #0
 80032c4:	2300      	movs	r3, #0
 80032c6:	4620      	mov	r0, r4
 80032c8:	4629      	mov	r1, r5
 80032ca:	f7fd fbb3 	bl	8000a34 <__aeabi_dcmplt>
 80032ce:	b300      	cbz	r0, 8003312 <pow+0xa2>
 80032d0:	f7ff fed4 	bl	800307c <__errno>
 80032d4:	2322      	movs	r3, #34	; 0x22
 80032d6:	e01b      	b.n	8003310 <pow+0xa0>
 80032d8:	ec47 6b10 	vmov	d0, r6, r7
 80032dc:	f000 fe51 	bl	8003f82 <finite>
 80032e0:	b9e0      	cbnz	r0, 800331c <pow+0xac>
 80032e2:	eeb0 0a48 	vmov.f32	s0, s16
 80032e6:	eef0 0a68 	vmov.f32	s1, s17
 80032ea:	f000 fe4a 	bl	8003f82 <finite>
 80032ee:	b1a8      	cbz	r0, 800331c <pow+0xac>
 80032f0:	ec45 4b10 	vmov	d0, r4, r5
 80032f4:	f000 fe45 	bl	8003f82 <finite>
 80032f8:	b180      	cbz	r0, 800331c <pow+0xac>
 80032fa:	4632      	mov	r2, r6
 80032fc:	463b      	mov	r3, r7
 80032fe:	4630      	mov	r0, r6
 8003300:	4639      	mov	r1, r7
 8003302:	f7fd fbbf 	bl	8000a84 <__aeabi_dcmpun>
 8003306:	2800      	cmp	r0, #0
 8003308:	d0e2      	beq.n	80032d0 <pow+0x60>
 800330a:	f7ff feb7 	bl	800307c <__errno>
 800330e:	2321      	movs	r3, #33	; 0x21
 8003310:	6003      	str	r3, [r0, #0]
 8003312:	ecbd 8b02 	vpop	{d8}
 8003316:	ec47 6b10 	vmov	d0, r6, r7
 800331a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800331c:	2200      	movs	r2, #0
 800331e:	2300      	movs	r3, #0
 8003320:	4630      	mov	r0, r6
 8003322:	4639      	mov	r1, r7
 8003324:	f7fd fb7c 	bl	8000a20 <__aeabi_dcmpeq>
 8003328:	2800      	cmp	r0, #0
 800332a:	d0f2      	beq.n	8003312 <pow+0xa2>
 800332c:	eeb0 0a48 	vmov.f32	s0, s16
 8003330:	eef0 0a68 	vmov.f32	s1, s17
 8003334:	f000 fe25 	bl	8003f82 <finite>
 8003338:	2800      	cmp	r0, #0
 800333a:	d0ea      	beq.n	8003312 <pow+0xa2>
 800333c:	ec45 4b10 	vmov	d0, r4, r5
 8003340:	f000 fe1f 	bl	8003f82 <finite>
 8003344:	e7c3      	b.n	80032ce <pow+0x5e>
 8003346:	4f01      	ldr	r7, [pc, #4]	; (800334c <pow+0xdc>)
 8003348:	2600      	movs	r6, #0
 800334a:	e7e2      	b.n	8003312 <pow+0xa2>
 800334c:	3ff00000 	.word	0x3ff00000

08003350 <__ieee754_pow>:
 8003350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003354:	ed2d 8b06 	vpush	{d8-d10}
 8003358:	b089      	sub	sp, #36	; 0x24
 800335a:	ed8d 1b00 	vstr	d1, [sp]
 800335e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003362:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003366:	ea58 0102 	orrs.w	r1, r8, r2
 800336a:	ec57 6b10 	vmov	r6, r7, d0
 800336e:	d115      	bne.n	800339c <__ieee754_pow+0x4c>
 8003370:	19b3      	adds	r3, r6, r6
 8003372:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8003376:	4152      	adcs	r2, r2
 8003378:	4299      	cmp	r1, r3
 800337a:	4b89      	ldr	r3, [pc, #548]	; (80035a0 <__ieee754_pow+0x250>)
 800337c:	4193      	sbcs	r3, r2
 800337e:	f080 84d2 	bcs.w	8003d26 <__ieee754_pow+0x9d6>
 8003382:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003386:	4630      	mov	r0, r6
 8003388:	4639      	mov	r1, r7
 800338a:	f7fc ff2b 	bl	80001e4 <__adddf3>
 800338e:	ec41 0b10 	vmov	d0, r0, r1
 8003392:	b009      	add	sp, #36	; 0x24
 8003394:	ecbd 8b06 	vpop	{d8-d10}
 8003398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800339c:	4b81      	ldr	r3, [pc, #516]	; (80035a4 <__ieee754_pow+0x254>)
 800339e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80033a2:	429c      	cmp	r4, r3
 80033a4:	ee10 aa10 	vmov	sl, s0
 80033a8:	463d      	mov	r5, r7
 80033aa:	dc06      	bgt.n	80033ba <__ieee754_pow+0x6a>
 80033ac:	d101      	bne.n	80033b2 <__ieee754_pow+0x62>
 80033ae:	2e00      	cmp	r6, #0
 80033b0:	d1e7      	bne.n	8003382 <__ieee754_pow+0x32>
 80033b2:	4598      	cmp	r8, r3
 80033b4:	dc01      	bgt.n	80033ba <__ieee754_pow+0x6a>
 80033b6:	d10f      	bne.n	80033d8 <__ieee754_pow+0x88>
 80033b8:	b172      	cbz	r2, 80033d8 <__ieee754_pow+0x88>
 80033ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80033be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80033c2:	ea55 050a 	orrs.w	r5, r5, sl
 80033c6:	d1dc      	bne.n	8003382 <__ieee754_pow+0x32>
 80033c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80033cc:	18db      	adds	r3, r3, r3
 80033ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80033d2:	4152      	adcs	r2, r2
 80033d4:	429d      	cmp	r5, r3
 80033d6:	e7d0      	b.n	800337a <__ieee754_pow+0x2a>
 80033d8:	2d00      	cmp	r5, #0
 80033da:	da3b      	bge.n	8003454 <__ieee754_pow+0x104>
 80033dc:	4b72      	ldr	r3, [pc, #456]	; (80035a8 <__ieee754_pow+0x258>)
 80033de:	4598      	cmp	r8, r3
 80033e0:	dc51      	bgt.n	8003486 <__ieee754_pow+0x136>
 80033e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80033e6:	4598      	cmp	r8, r3
 80033e8:	f340 84ac 	ble.w	8003d44 <__ieee754_pow+0x9f4>
 80033ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80033f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80033f4:	2b14      	cmp	r3, #20
 80033f6:	dd0f      	ble.n	8003418 <__ieee754_pow+0xc8>
 80033f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80033fc:	fa22 f103 	lsr.w	r1, r2, r3
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	4293      	cmp	r3, r2
 8003406:	f040 849d 	bne.w	8003d44 <__ieee754_pow+0x9f4>
 800340a:	f001 0101 	and.w	r1, r1, #1
 800340e:	f1c1 0302 	rsb	r3, r1, #2
 8003412:	9304      	str	r3, [sp, #16]
 8003414:	b182      	cbz	r2, 8003438 <__ieee754_pow+0xe8>
 8003416:	e05f      	b.n	80034d8 <__ieee754_pow+0x188>
 8003418:	2a00      	cmp	r2, #0
 800341a:	d15b      	bne.n	80034d4 <__ieee754_pow+0x184>
 800341c:	f1c3 0314 	rsb	r3, r3, #20
 8003420:	fa48 f103 	asr.w	r1, r8, r3
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	4543      	cmp	r3, r8
 800342a:	f040 8488 	bne.w	8003d3e <__ieee754_pow+0x9ee>
 800342e:	f001 0101 	and.w	r1, r1, #1
 8003432:	f1c1 0302 	rsb	r3, r1, #2
 8003436:	9304      	str	r3, [sp, #16]
 8003438:	4b5c      	ldr	r3, [pc, #368]	; (80035ac <__ieee754_pow+0x25c>)
 800343a:	4598      	cmp	r8, r3
 800343c:	d132      	bne.n	80034a4 <__ieee754_pow+0x154>
 800343e:	f1b9 0f00 	cmp.w	r9, #0
 8003442:	f280 8478 	bge.w	8003d36 <__ieee754_pow+0x9e6>
 8003446:	4959      	ldr	r1, [pc, #356]	; (80035ac <__ieee754_pow+0x25c>)
 8003448:	4632      	mov	r2, r6
 800344a:	463b      	mov	r3, r7
 800344c:	2000      	movs	r0, #0
 800344e:	f7fd f9a9 	bl	80007a4 <__aeabi_ddiv>
 8003452:	e79c      	b.n	800338e <__ieee754_pow+0x3e>
 8003454:	2300      	movs	r3, #0
 8003456:	9304      	str	r3, [sp, #16]
 8003458:	2a00      	cmp	r2, #0
 800345a:	d13d      	bne.n	80034d8 <__ieee754_pow+0x188>
 800345c:	4b51      	ldr	r3, [pc, #324]	; (80035a4 <__ieee754_pow+0x254>)
 800345e:	4598      	cmp	r8, r3
 8003460:	d1ea      	bne.n	8003438 <__ieee754_pow+0xe8>
 8003462:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003466:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800346a:	ea53 030a 	orrs.w	r3, r3, sl
 800346e:	f000 845a 	beq.w	8003d26 <__ieee754_pow+0x9d6>
 8003472:	4b4f      	ldr	r3, [pc, #316]	; (80035b0 <__ieee754_pow+0x260>)
 8003474:	429c      	cmp	r4, r3
 8003476:	dd08      	ble.n	800348a <__ieee754_pow+0x13a>
 8003478:	f1b9 0f00 	cmp.w	r9, #0
 800347c:	f2c0 8457 	blt.w	8003d2e <__ieee754_pow+0x9de>
 8003480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003484:	e783      	b.n	800338e <__ieee754_pow+0x3e>
 8003486:	2302      	movs	r3, #2
 8003488:	e7e5      	b.n	8003456 <__ieee754_pow+0x106>
 800348a:	f1b9 0f00 	cmp.w	r9, #0
 800348e:	f04f 0000 	mov.w	r0, #0
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	f6bf af7a 	bge.w	800338e <__ieee754_pow+0x3e>
 800349a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800349e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80034a2:	e774      	b.n	800338e <__ieee754_pow+0x3e>
 80034a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80034a8:	d106      	bne.n	80034b8 <__ieee754_pow+0x168>
 80034aa:	4632      	mov	r2, r6
 80034ac:	463b      	mov	r3, r7
 80034ae:	4630      	mov	r0, r6
 80034b0:	4639      	mov	r1, r7
 80034b2:	f7fd f84d 	bl	8000550 <__aeabi_dmul>
 80034b6:	e76a      	b.n	800338e <__ieee754_pow+0x3e>
 80034b8:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <__ieee754_pow+0x264>)
 80034ba:	4599      	cmp	r9, r3
 80034bc:	d10c      	bne.n	80034d8 <__ieee754_pow+0x188>
 80034be:	2d00      	cmp	r5, #0
 80034c0:	db0a      	blt.n	80034d8 <__ieee754_pow+0x188>
 80034c2:	ec47 6b10 	vmov	d0, r6, r7
 80034c6:	b009      	add	sp, #36	; 0x24
 80034c8:	ecbd 8b06 	vpop	{d8-d10}
 80034cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d0:	f000 bc6c 	b.w	8003dac <__ieee754_sqrt>
 80034d4:	2300      	movs	r3, #0
 80034d6:	9304      	str	r3, [sp, #16]
 80034d8:	ec47 6b10 	vmov	d0, r6, r7
 80034dc:	f000 fd48 	bl	8003f70 <fabs>
 80034e0:	ec51 0b10 	vmov	r0, r1, d0
 80034e4:	f1ba 0f00 	cmp.w	sl, #0
 80034e8:	d129      	bne.n	800353e <__ieee754_pow+0x1ee>
 80034ea:	b124      	cbz	r4, 80034f6 <__ieee754_pow+0x1a6>
 80034ec:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <__ieee754_pow+0x25c>)
 80034ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d123      	bne.n	800353e <__ieee754_pow+0x1ee>
 80034f6:	f1b9 0f00 	cmp.w	r9, #0
 80034fa:	da05      	bge.n	8003508 <__ieee754_pow+0x1b8>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	2000      	movs	r0, #0
 8003502:	492a      	ldr	r1, [pc, #168]	; (80035ac <__ieee754_pow+0x25c>)
 8003504:	f7fd f94e 	bl	80007a4 <__aeabi_ddiv>
 8003508:	2d00      	cmp	r5, #0
 800350a:	f6bf af40 	bge.w	800338e <__ieee754_pow+0x3e>
 800350e:	9b04      	ldr	r3, [sp, #16]
 8003510:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003514:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003518:	4323      	orrs	r3, r4
 800351a:	d108      	bne.n	800352e <__ieee754_pow+0x1de>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	f7fc fe5c 	bl	80001e0 <__aeabi_dsub>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	e78f      	b.n	800344e <__ieee754_pow+0xfe>
 800352e:	9b04      	ldr	r3, [sp, #16]
 8003530:	2b01      	cmp	r3, #1
 8003532:	f47f af2c 	bne.w	800338e <__ieee754_pow+0x3e>
 8003536:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800353a:	4619      	mov	r1, r3
 800353c:	e727      	b.n	800338e <__ieee754_pow+0x3e>
 800353e:	0feb      	lsrs	r3, r5, #31
 8003540:	3b01      	subs	r3, #1
 8003542:	9306      	str	r3, [sp, #24]
 8003544:	9a06      	ldr	r2, [sp, #24]
 8003546:	9b04      	ldr	r3, [sp, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	d102      	bne.n	8003552 <__ieee754_pow+0x202>
 800354c:	4632      	mov	r2, r6
 800354e:	463b      	mov	r3, r7
 8003550:	e7e6      	b.n	8003520 <__ieee754_pow+0x1d0>
 8003552:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <__ieee754_pow+0x268>)
 8003554:	4598      	cmp	r8, r3
 8003556:	f340 80fb 	ble.w	8003750 <__ieee754_pow+0x400>
 800355a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800355e:	4598      	cmp	r8, r3
 8003560:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <__ieee754_pow+0x260>)
 8003562:	dd0c      	ble.n	800357e <__ieee754_pow+0x22e>
 8003564:	429c      	cmp	r4, r3
 8003566:	dc0f      	bgt.n	8003588 <__ieee754_pow+0x238>
 8003568:	f1b9 0f00 	cmp.w	r9, #0
 800356c:	da0f      	bge.n	800358e <__ieee754_pow+0x23e>
 800356e:	2000      	movs	r0, #0
 8003570:	b009      	add	sp, #36	; 0x24
 8003572:	ecbd 8b06 	vpop	{d8-d10}
 8003576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357a:	f000 bcf0 	b.w	8003f5e <__math_oflow>
 800357e:	429c      	cmp	r4, r3
 8003580:	dbf2      	blt.n	8003568 <__ieee754_pow+0x218>
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <__ieee754_pow+0x25c>)
 8003584:	429c      	cmp	r4, r3
 8003586:	dd19      	ble.n	80035bc <__ieee754_pow+0x26c>
 8003588:	f1b9 0f00 	cmp.w	r9, #0
 800358c:	dcef      	bgt.n	800356e <__ieee754_pow+0x21e>
 800358e:	2000      	movs	r0, #0
 8003590:	b009      	add	sp, #36	; 0x24
 8003592:	ecbd 8b06 	vpop	{d8-d10}
 8003596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800359a:	f000 bcd7 	b.w	8003f4c <__math_uflow>
 800359e:	bf00      	nop
 80035a0:	fff00000 	.word	0xfff00000
 80035a4:	7ff00000 	.word	0x7ff00000
 80035a8:	433fffff 	.word	0x433fffff
 80035ac:	3ff00000 	.word	0x3ff00000
 80035b0:	3fefffff 	.word	0x3fefffff
 80035b4:	3fe00000 	.word	0x3fe00000
 80035b8:	41e00000 	.word	0x41e00000
 80035bc:	4b60      	ldr	r3, [pc, #384]	; (8003740 <__ieee754_pow+0x3f0>)
 80035be:	2200      	movs	r2, #0
 80035c0:	f7fc fe0e 	bl	80001e0 <__aeabi_dsub>
 80035c4:	a354      	add	r3, pc, #336	; (adr r3, 8003718 <__ieee754_pow+0x3c8>)
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	4604      	mov	r4, r0
 80035cc:	460d      	mov	r5, r1
 80035ce:	f7fc ffbf 	bl	8000550 <__aeabi_dmul>
 80035d2:	a353      	add	r3, pc, #332	; (adr r3, 8003720 <__ieee754_pow+0x3d0>)
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	4606      	mov	r6, r0
 80035da:	460f      	mov	r7, r1
 80035dc:	4620      	mov	r0, r4
 80035de:	4629      	mov	r1, r5
 80035e0:	f7fc ffb6 	bl	8000550 <__aeabi_dmul>
 80035e4:	4b57      	ldr	r3, [pc, #348]	; (8003744 <__ieee754_pow+0x3f4>)
 80035e6:	4682      	mov	sl, r0
 80035e8:	468b      	mov	fp, r1
 80035ea:	2200      	movs	r2, #0
 80035ec:	4620      	mov	r0, r4
 80035ee:	4629      	mov	r1, r5
 80035f0:	f7fc ffae 	bl	8000550 <__aeabi_dmul>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	a14b      	add	r1, pc, #300	; (adr r1, 8003728 <__ieee754_pow+0x3d8>)
 80035fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035fe:	f7fc fdef 	bl	80001e0 <__aeabi_dsub>
 8003602:	4622      	mov	r2, r4
 8003604:	462b      	mov	r3, r5
 8003606:	f7fc ffa3 	bl	8000550 <__aeabi_dmul>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	2000      	movs	r0, #0
 8003610:	494d      	ldr	r1, [pc, #308]	; (8003748 <__ieee754_pow+0x3f8>)
 8003612:	f7fc fde5 	bl	80001e0 <__aeabi_dsub>
 8003616:	4622      	mov	r2, r4
 8003618:	4680      	mov	r8, r0
 800361a:	4689      	mov	r9, r1
 800361c:	462b      	mov	r3, r5
 800361e:	4620      	mov	r0, r4
 8003620:	4629      	mov	r1, r5
 8003622:	f7fc ff95 	bl	8000550 <__aeabi_dmul>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4640      	mov	r0, r8
 800362c:	4649      	mov	r1, r9
 800362e:	f7fc ff8f 	bl	8000550 <__aeabi_dmul>
 8003632:	a33f      	add	r3, pc, #252	; (adr r3, 8003730 <__ieee754_pow+0x3e0>)
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f7fc ff8a 	bl	8000550 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4650      	mov	r0, sl
 8003642:	4659      	mov	r1, fp
 8003644:	f7fc fdcc 	bl	80001e0 <__aeabi_dsub>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4680      	mov	r8, r0
 800364e:	4689      	mov	r9, r1
 8003650:	4630      	mov	r0, r6
 8003652:	4639      	mov	r1, r7
 8003654:	f7fc fdc6 	bl	80001e4 <__adddf3>
 8003658:	2000      	movs	r0, #0
 800365a:	4632      	mov	r2, r6
 800365c:	463b      	mov	r3, r7
 800365e:	4604      	mov	r4, r0
 8003660:	460d      	mov	r5, r1
 8003662:	f7fc fdbd 	bl	80001e0 <__aeabi_dsub>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4640      	mov	r0, r8
 800366c:	4649      	mov	r1, r9
 800366e:	f7fc fdb7 	bl	80001e0 <__aeabi_dsub>
 8003672:	9b04      	ldr	r3, [sp, #16]
 8003674:	9a06      	ldr	r2, [sp, #24]
 8003676:	3b01      	subs	r3, #1
 8003678:	4313      	orrs	r3, r2
 800367a:	4682      	mov	sl, r0
 800367c:	468b      	mov	fp, r1
 800367e:	f040 81e7 	bne.w	8003a50 <__ieee754_pow+0x700>
 8003682:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8003738 <__ieee754_pow+0x3e8>
 8003686:	eeb0 8a47 	vmov.f32	s16, s14
 800368a:	eef0 8a67 	vmov.f32	s17, s15
 800368e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003692:	2600      	movs	r6, #0
 8003694:	4632      	mov	r2, r6
 8003696:	463b      	mov	r3, r7
 8003698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800369c:	f7fc fda0 	bl	80001e0 <__aeabi_dsub>
 80036a0:	4622      	mov	r2, r4
 80036a2:	462b      	mov	r3, r5
 80036a4:	f7fc ff54 	bl	8000550 <__aeabi_dmul>
 80036a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80036ac:	4680      	mov	r8, r0
 80036ae:	4689      	mov	r9, r1
 80036b0:	4650      	mov	r0, sl
 80036b2:	4659      	mov	r1, fp
 80036b4:	f7fc ff4c 	bl	8000550 <__aeabi_dmul>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4640      	mov	r0, r8
 80036be:	4649      	mov	r1, r9
 80036c0:	f7fc fd90 	bl	80001e4 <__adddf3>
 80036c4:	4632      	mov	r2, r6
 80036c6:	463b      	mov	r3, r7
 80036c8:	4680      	mov	r8, r0
 80036ca:	4689      	mov	r9, r1
 80036cc:	4620      	mov	r0, r4
 80036ce:	4629      	mov	r1, r5
 80036d0:	f7fc ff3e 	bl	8000550 <__aeabi_dmul>
 80036d4:	460b      	mov	r3, r1
 80036d6:	4604      	mov	r4, r0
 80036d8:	460d      	mov	r5, r1
 80036da:	4602      	mov	r2, r0
 80036dc:	4649      	mov	r1, r9
 80036de:	4640      	mov	r0, r8
 80036e0:	f7fc fd80 	bl	80001e4 <__adddf3>
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <__ieee754_pow+0x3fc>)
 80036e6:	4299      	cmp	r1, r3
 80036e8:	ec45 4b19 	vmov	d9, r4, r5
 80036ec:	4606      	mov	r6, r0
 80036ee:	460f      	mov	r7, r1
 80036f0:	468b      	mov	fp, r1
 80036f2:	f340 82f1 	ble.w	8003cd8 <__ieee754_pow+0x988>
 80036f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80036fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80036fe:	4303      	orrs	r3, r0
 8003700:	f000 81e4 	beq.w	8003acc <__ieee754_pow+0x77c>
 8003704:	ec51 0b18 	vmov	r0, r1, d8
 8003708:	2200      	movs	r2, #0
 800370a:	2300      	movs	r3, #0
 800370c:	f7fd f992 	bl	8000a34 <__aeabi_dcmplt>
 8003710:	3800      	subs	r0, #0
 8003712:	bf18      	it	ne
 8003714:	2001      	movne	r0, #1
 8003716:	e72b      	b.n	8003570 <__ieee754_pow+0x220>
 8003718:	60000000 	.word	0x60000000
 800371c:	3ff71547 	.word	0x3ff71547
 8003720:	f85ddf44 	.word	0xf85ddf44
 8003724:	3e54ae0b 	.word	0x3e54ae0b
 8003728:	55555555 	.word	0x55555555
 800372c:	3fd55555 	.word	0x3fd55555
 8003730:	652b82fe 	.word	0x652b82fe
 8003734:	3ff71547 	.word	0x3ff71547
 8003738:	00000000 	.word	0x00000000
 800373c:	bff00000 	.word	0xbff00000
 8003740:	3ff00000 	.word	0x3ff00000
 8003744:	3fd00000 	.word	0x3fd00000
 8003748:	3fe00000 	.word	0x3fe00000
 800374c:	408fffff 	.word	0x408fffff
 8003750:	4bd5      	ldr	r3, [pc, #852]	; (8003aa8 <__ieee754_pow+0x758>)
 8003752:	402b      	ands	r3, r5
 8003754:	2200      	movs	r2, #0
 8003756:	b92b      	cbnz	r3, 8003764 <__ieee754_pow+0x414>
 8003758:	4bd4      	ldr	r3, [pc, #848]	; (8003aac <__ieee754_pow+0x75c>)
 800375a:	f7fc fef9 	bl	8000550 <__aeabi_dmul>
 800375e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003762:	460c      	mov	r4, r1
 8003764:	1523      	asrs	r3, r4, #20
 8003766:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800376a:	4413      	add	r3, r2
 800376c:	9305      	str	r3, [sp, #20]
 800376e:	4bd0      	ldr	r3, [pc, #832]	; (8003ab0 <__ieee754_pow+0x760>)
 8003770:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003774:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003778:	429c      	cmp	r4, r3
 800377a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800377e:	dd08      	ble.n	8003792 <__ieee754_pow+0x442>
 8003780:	4bcc      	ldr	r3, [pc, #816]	; (8003ab4 <__ieee754_pow+0x764>)
 8003782:	429c      	cmp	r4, r3
 8003784:	f340 8162 	ble.w	8003a4c <__ieee754_pow+0x6fc>
 8003788:	9b05      	ldr	r3, [sp, #20]
 800378a:	3301      	adds	r3, #1
 800378c:	9305      	str	r3, [sp, #20]
 800378e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003792:	2400      	movs	r4, #0
 8003794:	00e3      	lsls	r3, r4, #3
 8003796:	9307      	str	r3, [sp, #28]
 8003798:	4bc7      	ldr	r3, [pc, #796]	; (8003ab8 <__ieee754_pow+0x768>)
 800379a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800379e:	ed93 7b00 	vldr	d7, [r3]
 80037a2:	4629      	mov	r1, r5
 80037a4:	ec53 2b17 	vmov	r2, r3, d7
 80037a8:	eeb0 9a47 	vmov.f32	s18, s14
 80037ac:	eef0 9a67 	vmov.f32	s19, s15
 80037b0:	4682      	mov	sl, r0
 80037b2:	f7fc fd15 	bl	80001e0 <__aeabi_dsub>
 80037b6:	4652      	mov	r2, sl
 80037b8:	4606      	mov	r6, r0
 80037ba:	460f      	mov	r7, r1
 80037bc:	462b      	mov	r3, r5
 80037be:	ec51 0b19 	vmov	r0, r1, d9
 80037c2:	f7fc fd0f 	bl	80001e4 <__adddf3>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	2000      	movs	r0, #0
 80037cc:	49bb      	ldr	r1, [pc, #748]	; (8003abc <__ieee754_pow+0x76c>)
 80037ce:	f7fc ffe9 	bl	80007a4 <__aeabi_ddiv>
 80037d2:	ec41 0b1a 	vmov	d10, r0, r1
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4630      	mov	r0, r6
 80037dc:	4639      	mov	r1, r7
 80037de:	f7fc feb7 	bl	8000550 <__aeabi_dmul>
 80037e2:	2300      	movs	r3, #0
 80037e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037e8:	9302      	str	r3, [sp, #8]
 80037ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80037ee:	46ab      	mov	fp, r5
 80037f0:	106d      	asrs	r5, r5, #1
 80037f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80037f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80037fa:	ec41 0b18 	vmov	d8, r0, r1
 80037fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8003802:	2200      	movs	r2, #0
 8003804:	4640      	mov	r0, r8
 8003806:	4649      	mov	r1, r9
 8003808:	4614      	mov	r4, r2
 800380a:	461d      	mov	r5, r3
 800380c:	f7fc fea0 	bl	8000550 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4630      	mov	r0, r6
 8003816:	4639      	mov	r1, r7
 8003818:	f7fc fce2 	bl	80001e0 <__aeabi_dsub>
 800381c:	ec53 2b19 	vmov	r2, r3, d9
 8003820:	4606      	mov	r6, r0
 8003822:	460f      	mov	r7, r1
 8003824:	4620      	mov	r0, r4
 8003826:	4629      	mov	r1, r5
 8003828:	f7fc fcda 	bl	80001e0 <__aeabi_dsub>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4650      	mov	r0, sl
 8003832:	4659      	mov	r1, fp
 8003834:	f7fc fcd4 	bl	80001e0 <__aeabi_dsub>
 8003838:	4642      	mov	r2, r8
 800383a:	464b      	mov	r3, r9
 800383c:	f7fc fe88 	bl	8000550 <__aeabi_dmul>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4630      	mov	r0, r6
 8003846:	4639      	mov	r1, r7
 8003848:	f7fc fcca 	bl	80001e0 <__aeabi_dsub>
 800384c:	ec53 2b1a 	vmov	r2, r3, d10
 8003850:	f7fc fe7e 	bl	8000550 <__aeabi_dmul>
 8003854:	ec53 2b18 	vmov	r2, r3, d8
 8003858:	ec41 0b19 	vmov	d9, r0, r1
 800385c:	ec51 0b18 	vmov	r0, r1, d8
 8003860:	f7fc fe76 	bl	8000550 <__aeabi_dmul>
 8003864:	a37c      	add	r3, pc, #496	; (adr r3, 8003a58 <__ieee754_pow+0x708>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	4604      	mov	r4, r0
 800386c:	460d      	mov	r5, r1
 800386e:	f7fc fe6f 	bl	8000550 <__aeabi_dmul>
 8003872:	a37b      	add	r3, pc, #492	; (adr r3, 8003a60 <__ieee754_pow+0x710>)
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f7fc fcb4 	bl	80001e4 <__adddf3>
 800387c:	4622      	mov	r2, r4
 800387e:	462b      	mov	r3, r5
 8003880:	f7fc fe66 	bl	8000550 <__aeabi_dmul>
 8003884:	a378      	add	r3, pc, #480	; (adr r3, 8003a68 <__ieee754_pow+0x718>)
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f7fc fcab 	bl	80001e4 <__adddf3>
 800388e:	4622      	mov	r2, r4
 8003890:	462b      	mov	r3, r5
 8003892:	f7fc fe5d 	bl	8000550 <__aeabi_dmul>
 8003896:	a376      	add	r3, pc, #472	; (adr r3, 8003a70 <__ieee754_pow+0x720>)
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f7fc fca2 	bl	80001e4 <__adddf3>
 80038a0:	4622      	mov	r2, r4
 80038a2:	462b      	mov	r3, r5
 80038a4:	f7fc fe54 	bl	8000550 <__aeabi_dmul>
 80038a8:	a373      	add	r3, pc, #460	; (adr r3, 8003a78 <__ieee754_pow+0x728>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f7fc fc99 	bl	80001e4 <__adddf3>
 80038b2:	4622      	mov	r2, r4
 80038b4:	462b      	mov	r3, r5
 80038b6:	f7fc fe4b 	bl	8000550 <__aeabi_dmul>
 80038ba:	a371      	add	r3, pc, #452	; (adr r3, 8003a80 <__ieee754_pow+0x730>)
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f7fc fc90 	bl	80001e4 <__adddf3>
 80038c4:	4622      	mov	r2, r4
 80038c6:	4606      	mov	r6, r0
 80038c8:	460f      	mov	r7, r1
 80038ca:	462b      	mov	r3, r5
 80038cc:	4620      	mov	r0, r4
 80038ce:	4629      	mov	r1, r5
 80038d0:	f7fc fe3e 	bl	8000550 <__aeabi_dmul>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4630      	mov	r0, r6
 80038da:	4639      	mov	r1, r7
 80038dc:	f7fc fe38 	bl	8000550 <__aeabi_dmul>
 80038e0:	4642      	mov	r2, r8
 80038e2:	4604      	mov	r4, r0
 80038e4:	460d      	mov	r5, r1
 80038e6:	464b      	mov	r3, r9
 80038e8:	ec51 0b18 	vmov	r0, r1, d8
 80038ec:	f7fc fc7a 	bl	80001e4 <__adddf3>
 80038f0:	ec53 2b19 	vmov	r2, r3, d9
 80038f4:	f7fc fe2c 	bl	8000550 <__aeabi_dmul>
 80038f8:	4622      	mov	r2, r4
 80038fa:	462b      	mov	r3, r5
 80038fc:	f7fc fc72 	bl	80001e4 <__adddf3>
 8003900:	4642      	mov	r2, r8
 8003902:	4682      	mov	sl, r0
 8003904:	468b      	mov	fp, r1
 8003906:	464b      	mov	r3, r9
 8003908:	4640      	mov	r0, r8
 800390a:	4649      	mov	r1, r9
 800390c:	f7fc fe20 	bl	8000550 <__aeabi_dmul>
 8003910:	4b6b      	ldr	r3, [pc, #428]	; (8003ac0 <__ieee754_pow+0x770>)
 8003912:	2200      	movs	r2, #0
 8003914:	4606      	mov	r6, r0
 8003916:	460f      	mov	r7, r1
 8003918:	f7fc fc64 	bl	80001e4 <__adddf3>
 800391c:	4652      	mov	r2, sl
 800391e:	465b      	mov	r3, fp
 8003920:	f7fc fc60 	bl	80001e4 <__adddf3>
 8003924:	2000      	movs	r0, #0
 8003926:	4604      	mov	r4, r0
 8003928:	460d      	mov	r5, r1
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4640      	mov	r0, r8
 8003930:	4649      	mov	r1, r9
 8003932:	f7fc fe0d 	bl	8000550 <__aeabi_dmul>
 8003936:	4b62      	ldr	r3, [pc, #392]	; (8003ac0 <__ieee754_pow+0x770>)
 8003938:	4680      	mov	r8, r0
 800393a:	4689      	mov	r9, r1
 800393c:	2200      	movs	r2, #0
 800393e:	4620      	mov	r0, r4
 8003940:	4629      	mov	r1, r5
 8003942:	f7fc fc4d 	bl	80001e0 <__aeabi_dsub>
 8003946:	4632      	mov	r2, r6
 8003948:	463b      	mov	r3, r7
 800394a:	f7fc fc49 	bl	80001e0 <__aeabi_dsub>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4650      	mov	r0, sl
 8003954:	4659      	mov	r1, fp
 8003956:	f7fc fc43 	bl	80001e0 <__aeabi_dsub>
 800395a:	ec53 2b18 	vmov	r2, r3, d8
 800395e:	f7fc fdf7 	bl	8000550 <__aeabi_dmul>
 8003962:	4622      	mov	r2, r4
 8003964:	4606      	mov	r6, r0
 8003966:	460f      	mov	r7, r1
 8003968:	462b      	mov	r3, r5
 800396a:	ec51 0b19 	vmov	r0, r1, d9
 800396e:	f7fc fdef 	bl	8000550 <__aeabi_dmul>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4630      	mov	r0, r6
 8003978:	4639      	mov	r1, r7
 800397a:	f7fc fc33 	bl	80001e4 <__adddf3>
 800397e:	4606      	mov	r6, r0
 8003980:	460f      	mov	r7, r1
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4640      	mov	r0, r8
 8003988:	4649      	mov	r1, r9
 800398a:	f7fc fc2b 	bl	80001e4 <__adddf3>
 800398e:	a33e      	add	r3, pc, #248	; (adr r3, 8003a88 <__ieee754_pow+0x738>)
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	2000      	movs	r0, #0
 8003996:	4604      	mov	r4, r0
 8003998:	460d      	mov	r5, r1
 800399a:	f7fc fdd9 	bl	8000550 <__aeabi_dmul>
 800399e:	4642      	mov	r2, r8
 80039a0:	ec41 0b18 	vmov	d8, r0, r1
 80039a4:	464b      	mov	r3, r9
 80039a6:	4620      	mov	r0, r4
 80039a8:	4629      	mov	r1, r5
 80039aa:	f7fc fc19 	bl	80001e0 <__aeabi_dsub>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4630      	mov	r0, r6
 80039b4:	4639      	mov	r1, r7
 80039b6:	f7fc fc13 	bl	80001e0 <__aeabi_dsub>
 80039ba:	a335      	add	r3, pc, #212	; (adr r3, 8003a90 <__ieee754_pow+0x740>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fdc6 	bl	8000550 <__aeabi_dmul>
 80039c4:	a334      	add	r3, pc, #208	; (adr r3, 8003a98 <__ieee754_pow+0x748>)
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	4606      	mov	r6, r0
 80039cc:	460f      	mov	r7, r1
 80039ce:	4620      	mov	r0, r4
 80039d0:	4629      	mov	r1, r5
 80039d2:	f7fc fdbd 	bl	8000550 <__aeabi_dmul>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4630      	mov	r0, r6
 80039dc:	4639      	mov	r1, r7
 80039de:	f7fc fc01 	bl	80001e4 <__adddf3>
 80039e2:	9a07      	ldr	r2, [sp, #28]
 80039e4:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <__ieee754_pow+0x774>)
 80039e6:	4413      	add	r3, r2
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	f7fc fbfa 	bl	80001e4 <__adddf3>
 80039f0:	4682      	mov	sl, r0
 80039f2:	9805      	ldr	r0, [sp, #20]
 80039f4:	468b      	mov	fp, r1
 80039f6:	f7fc fd41 	bl	800047c <__aeabi_i2d>
 80039fa:	9a07      	ldr	r2, [sp, #28]
 80039fc:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <__ieee754_pow+0x778>)
 80039fe:	4413      	add	r3, r2
 8003a00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a04:	4606      	mov	r6, r0
 8003a06:	460f      	mov	r7, r1
 8003a08:	4652      	mov	r2, sl
 8003a0a:	465b      	mov	r3, fp
 8003a0c:	ec51 0b18 	vmov	r0, r1, d8
 8003a10:	f7fc fbe8 	bl	80001e4 <__adddf3>
 8003a14:	4642      	mov	r2, r8
 8003a16:	464b      	mov	r3, r9
 8003a18:	f7fc fbe4 	bl	80001e4 <__adddf3>
 8003a1c:	4632      	mov	r2, r6
 8003a1e:	463b      	mov	r3, r7
 8003a20:	f7fc fbe0 	bl	80001e4 <__adddf3>
 8003a24:	2000      	movs	r0, #0
 8003a26:	4632      	mov	r2, r6
 8003a28:	463b      	mov	r3, r7
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	460d      	mov	r5, r1
 8003a2e:	f7fc fbd7 	bl	80001e0 <__aeabi_dsub>
 8003a32:	4642      	mov	r2, r8
 8003a34:	464b      	mov	r3, r9
 8003a36:	f7fc fbd3 	bl	80001e0 <__aeabi_dsub>
 8003a3a:	ec53 2b18 	vmov	r2, r3, d8
 8003a3e:	f7fc fbcf 	bl	80001e0 <__aeabi_dsub>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4650      	mov	r0, sl
 8003a48:	4659      	mov	r1, fp
 8003a4a:	e610      	b.n	800366e <__ieee754_pow+0x31e>
 8003a4c:	2401      	movs	r4, #1
 8003a4e:	e6a1      	b.n	8003794 <__ieee754_pow+0x444>
 8003a50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8003aa0 <__ieee754_pow+0x750>
 8003a54:	e617      	b.n	8003686 <__ieee754_pow+0x336>
 8003a56:	bf00      	nop
 8003a58:	4a454eef 	.word	0x4a454eef
 8003a5c:	3fca7e28 	.word	0x3fca7e28
 8003a60:	93c9db65 	.word	0x93c9db65
 8003a64:	3fcd864a 	.word	0x3fcd864a
 8003a68:	a91d4101 	.word	0xa91d4101
 8003a6c:	3fd17460 	.word	0x3fd17460
 8003a70:	518f264d 	.word	0x518f264d
 8003a74:	3fd55555 	.word	0x3fd55555
 8003a78:	db6fabff 	.word	0xdb6fabff
 8003a7c:	3fdb6db6 	.word	0x3fdb6db6
 8003a80:	33333303 	.word	0x33333303
 8003a84:	3fe33333 	.word	0x3fe33333
 8003a88:	e0000000 	.word	0xe0000000
 8003a8c:	3feec709 	.word	0x3feec709
 8003a90:	dc3a03fd 	.word	0xdc3a03fd
 8003a94:	3feec709 	.word	0x3feec709
 8003a98:	145b01f5 	.word	0x145b01f5
 8003a9c:	be3e2fe0 	.word	0xbe3e2fe0
 8003aa0:	00000000 	.word	0x00000000
 8003aa4:	3ff00000 	.word	0x3ff00000
 8003aa8:	7ff00000 	.word	0x7ff00000
 8003aac:	43400000 	.word	0x43400000
 8003ab0:	0003988e 	.word	0x0003988e
 8003ab4:	000bb679 	.word	0x000bb679
 8003ab8:	080042e8 	.word	0x080042e8
 8003abc:	3ff00000 	.word	0x3ff00000
 8003ac0:	40080000 	.word	0x40080000
 8003ac4:	08004308 	.word	0x08004308
 8003ac8:	080042f8 	.word	0x080042f8
 8003acc:	a3b5      	add	r3, pc, #724	; (adr r3, 8003da4 <__ieee754_pow+0xa54>)
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	4649      	mov	r1, r9
 8003ad6:	f7fc fb85 	bl	80001e4 <__adddf3>
 8003ada:	4622      	mov	r2, r4
 8003adc:	ec41 0b1a 	vmov	d10, r0, r1
 8003ae0:	462b      	mov	r3, r5
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	4639      	mov	r1, r7
 8003ae6:	f7fc fb7b 	bl	80001e0 <__aeabi_dsub>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	ec51 0b1a 	vmov	r0, r1, d10
 8003af2:	f7fc ffbd 	bl	8000a70 <__aeabi_dcmpgt>
 8003af6:	2800      	cmp	r0, #0
 8003af8:	f47f ae04 	bne.w	8003704 <__ieee754_pow+0x3b4>
 8003afc:	4aa4      	ldr	r2, [pc, #656]	; (8003d90 <__ieee754_pow+0xa40>)
 8003afe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003b02:	4293      	cmp	r3, r2
 8003b04:	f340 8108 	ble.w	8003d18 <__ieee754_pow+0x9c8>
 8003b08:	151b      	asrs	r3, r3, #20
 8003b0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003b0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003b12:	fa4a f303 	asr.w	r3, sl, r3
 8003b16:	445b      	add	r3, fp
 8003b18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003b1c:	4e9d      	ldr	r6, [pc, #628]	; (8003d94 <__ieee754_pow+0xa44>)
 8003b1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003b22:	4116      	asrs	r6, r2
 8003b24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003b28:	2000      	movs	r0, #0
 8003b2a:	ea23 0106 	bic.w	r1, r3, r6
 8003b2e:	f1c2 0214 	rsb	r2, r2, #20
 8003b32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003b36:	fa4a fa02 	asr.w	sl, sl, r2
 8003b3a:	f1bb 0f00 	cmp.w	fp, #0
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4620      	mov	r0, r4
 8003b44:	4629      	mov	r1, r5
 8003b46:	bfb8      	it	lt
 8003b48:	f1ca 0a00 	rsblt	sl, sl, #0
 8003b4c:	f7fc fb48 	bl	80001e0 <__aeabi_dsub>
 8003b50:	ec41 0b19 	vmov	d9, r0, r1
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	ec51 0b19 	vmov	r0, r1, d9
 8003b5c:	f7fc fb42 	bl	80001e4 <__adddf3>
 8003b60:	a37b      	add	r3, pc, #492	; (adr r3, 8003d50 <__ieee754_pow+0xa00>)
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	2000      	movs	r0, #0
 8003b68:	4604      	mov	r4, r0
 8003b6a:	460d      	mov	r5, r1
 8003b6c:	f7fc fcf0 	bl	8000550 <__aeabi_dmul>
 8003b70:	ec53 2b19 	vmov	r2, r3, d9
 8003b74:	4606      	mov	r6, r0
 8003b76:	460f      	mov	r7, r1
 8003b78:	4620      	mov	r0, r4
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	f7fc fb30 	bl	80001e0 <__aeabi_dsub>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4640      	mov	r0, r8
 8003b86:	4649      	mov	r1, r9
 8003b88:	f7fc fb2a 	bl	80001e0 <__aeabi_dsub>
 8003b8c:	a372      	add	r3, pc, #456	; (adr r3, 8003d58 <__ieee754_pow+0xa08>)
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f7fc fcdd 	bl	8000550 <__aeabi_dmul>
 8003b96:	a372      	add	r3, pc, #456	; (adr r3, 8003d60 <__ieee754_pow+0xa10>)
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	4680      	mov	r8, r0
 8003b9e:	4689      	mov	r9, r1
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	f7fc fcd4 	bl	8000550 <__aeabi_dmul>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4640      	mov	r0, r8
 8003bae:	4649      	mov	r1, r9
 8003bb0:	f7fc fb18 	bl	80001e4 <__adddf3>
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	460d      	mov	r5, r1
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	4639      	mov	r1, r7
 8003bc0:	f7fc fb10 	bl	80001e4 <__adddf3>
 8003bc4:	4632      	mov	r2, r6
 8003bc6:	463b      	mov	r3, r7
 8003bc8:	4680      	mov	r8, r0
 8003bca:	4689      	mov	r9, r1
 8003bcc:	f7fc fb08 	bl	80001e0 <__aeabi_dsub>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	f7fc fb02 	bl	80001e0 <__aeabi_dsub>
 8003bdc:	4642      	mov	r2, r8
 8003bde:	4606      	mov	r6, r0
 8003be0:	460f      	mov	r7, r1
 8003be2:	464b      	mov	r3, r9
 8003be4:	4640      	mov	r0, r8
 8003be6:	4649      	mov	r1, r9
 8003be8:	f7fc fcb2 	bl	8000550 <__aeabi_dmul>
 8003bec:	a35e      	add	r3, pc, #376	; (adr r3, 8003d68 <__ieee754_pow+0xa18>)
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	460d      	mov	r5, r1
 8003bf6:	f7fc fcab 	bl	8000550 <__aeabi_dmul>
 8003bfa:	a35d      	add	r3, pc, #372	; (adr r3, 8003d70 <__ieee754_pow+0xa20>)
 8003bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c00:	f7fc faee 	bl	80001e0 <__aeabi_dsub>
 8003c04:	4622      	mov	r2, r4
 8003c06:	462b      	mov	r3, r5
 8003c08:	f7fc fca2 	bl	8000550 <__aeabi_dmul>
 8003c0c:	a35a      	add	r3, pc, #360	; (adr r3, 8003d78 <__ieee754_pow+0xa28>)
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f7fc fae7 	bl	80001e4 <__adddf3>
 8003c16:	4622      	mov	r2, r4
 8003c18:	462b      	mov	r3, r5
 8003c1a:	f7fc fc99 	bl	8000550 <__aeabi_dmul>
 8003c1e:	a358      	add	r3, pc, #352	; (adr r3, 8003d80 <__ieee754_pow+0xa30>)
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f7fc fadc 	bl	80001e0 <__aeabi_dsub>
 8003c28:	4622      	mov	r2, r4
 8003c2a:	462b      	mov	r3, r5
 8003c2c:	f7fc fc90 	bl	8000550 <__aeabi_dmul>
 8003c30:	a355      	add	r3, pc, #340	; (adr r3, 8003d88 <__ieee754_pow+0xa38>)
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f7fc fad5 	bl	80001e4 <__adddf3>
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	462b      	mov	r3, r5
 8003c3e:	f7fc fc87 	bl	8000550 <__aeabi_dmul>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4640      	mov	r0, r8
 8003c48:	4649      	mov	r1, r9
 8003c4a:	f7fc fac9 	bl	80001e0 <__aeabi_dsub>
 8003c4e:	4604      	mov	r4, r0
 8003c50:	460d      	mov	r5, r1
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4640      	mov	r0, r8
 8003c58:	4649      	mov	r1, r9
 8003c5a:	f7fc fc79 	bl	8000550 <__aeabi_dmul>
 8003c5e:	2200      	movs	r2, #0
 8003c60:	ec41 0b19 	vmov	d9, r0, r1
 8003c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fab8 	bl	80001e0 <__aeabi_dsub>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	ec51 0b19 	vmov	r0, r1, d9
 8003c78:	f7fc fd94 	bl	80007a4 <__aeabi_ddiv>
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	4604      	mov	r4, r0
 8003c80:	460d      	mov	r5, r1
 8003c82:	463b      	mov	r3, r7
 8003c84:	4640      	mov	r0, r8
 8003c86:	4649      	mov	r1, r9
 8003c88:	f7fc fc62 	bl	8000550 <__aeabi_dmul>
 8003c8c:	4632      	mov	r2, r6
 8003c8e:	463b      	mov	r3, r7
 8003c90:	f7fc faa8 	bl	80001e4 <__adddf3>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4620      	mov	r0, r4
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	f7fc faa0 	bl	80001e0 <__aeabi_dsub>
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	f7fc fa9c 	bl	80001e0 <__aeabi_dsub>
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4602      	mov	r2, r0
 8003cac:	493a      	ldr	r1, [pc, #232]	; (8003d98 <__ieee754_pow+0xa48>)
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f7fc fa96 	bl	80001e0 <__aeabi_dsub>
 8003cb4:	ec41 0b10 	vmov	d0, r0, r1
 8003cb8:	ee10 3a90 	vmov	r3, s1
 8003cbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8003cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc4:	da2b      	bge.n	8003d1e <__ieee754_pow+0x9ce>
 8003cc6:	4650      	mov	r0, sl
 8003cc8:	f000 f966 	bl	8003f98 <scalbn>
 8003ccc:	ec51 0b10 	vmov	r0, r1, d0
 8003cd0:	ec53 2b18 	vmov	r2, r3, d8
 8003cd4:	f7ff bbed 	b.w	80034b2 <__ieee754_pow+0x162>
 8003cd8:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <__ieee754_pow+0xa4c>)
 8003cda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003cde:	429e      	cmp	r6, r3
 8003ce0:	f77f af0c 	ble.w	8003afc <__ieee754_pow+0x7ac>
 8003ce4:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <__ieee754_pow+0xa50>)
 8003ce6:	440b      	add	r3, r1
 8003ce8:	4303      	orrs	r3, r0
 8003cea:	d009      	beq.n	8003d00 <__ieee754_pow+0x9b0>
 8003cec:	ec51 0b18 	vmov	r0, r1, d8
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f7fc fe9e 	bl	8000a34 <__aeabi_dcmplt>
 8003cf8:	3800      	subs	r0, #0
 8003cfa:	bf18      	it	ne
 8003cfc:	2001      	movne	r0, #1
 8003cfe:	e447      	b.n	8003590 <__ieee754_pow+0x240>
 8003d00:	4622      	mov	r2, r4
 8003d02:	462b      	mov	r3, r5
 8003d04:	f7fc fa6c 	bl	80001e0 <__aeabi_dsub>
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	f7fc fea6 	bl	8000a5c <__aeabi_dcmpge>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	f43f aef3 	beq.w	8003afc <__ieee754_pow+0x7ac>
 8003d16:	e7e9      	b.n	8003cec <__ieee754_pow+0x99c>
 8003d18:	f04f 0a00 	mov.w	sl, #0
 8003d1c:	e71a      	b.n	8003b54 <__ieee754_pow+0x804>
 8003d1e:	ec51 0b10 	vmov	r0, r1, d0
 8003d22:	4619      	mov	r1, r3
 8003d24:	e7d4      	b.n	8003cd0 <__ieee754_pow+0x980>
 8003d26:	491c      	ldr	r1, [pc, #112]	; (8003d98 <__ieee754_pow+0xa48>)
 8003d28:	2000      	movs	r0, #0
 8003d2a:	f7ff bb30 	b.w	800338e <__ieee754_pow+0x3e>
 8003d2e:	2000      	movs	r0, #0
 8003d30:	2100      	movs	r1, #0
 8003d32:	f7ff bb2c 	b.w	800338e <__ieee754_pow+0x3e>
 8003d36:	4630      	mov	r0, r6
 8003d38:	4639      	mov	r1, r7
 8003d3a:	f7ff bb28 	b.w	800338e <__ieee754_pow+0x3e>
 8003d3e:	9204      	str	r2, [sp, #16]
 8003d40:	f7ff bb7a 	b.w	8003438 <__ieee754_pow+0xe8>
 8003d44:	2300      	movs	r3, #0
 8003d46:	f7ff bb64 	b.w	8003412 <__ieee754_pow+0xc2>
 8003d4a:	bf00      	nop
 8003d4c:	f3af 8000 	nop.w
 8003d50:	00000000 	.word	0x00000000
 8003d54:	3fe62e43 	.word	0x3fe62e43
 8003d58:	fefa39ef 	.word	0xfefa39ef
 8003d5c:	3fe62e42 	.word	0x3fe62e42
 8003d60:	0ca86c39 	.word	0x0ca86c39
 8003d64:	be205c61 	.word	0xbe205c61
 8003d68:	72bea4d0 	.word	0x72bea4d0
 8003d6c:	3e663769 	.word	0x3e663769
 8003d70:	c5d26bf1 	.word	0xc5d26bf1
 8003d74:	3ebbbd41 	.word	0x3ebbbd41
 8003d78:	af25de2c 	.word	0xaf25de2c
 8003d7c:	3f11566a 	.word	0x3f11566a
 8003d80:	16bebd93 	.word	0x16bebd93
 8003d84:	3f66c16c 	.word	0x3f66c16c
 8003d88:	5555553e 	.word	0x5555553e
 8003d8c:	3fc55555 	.word	0x3fc55555
 8003d90:	3fe00000 	.word	0x3fe00000
 8003d94:	000fffff 	.word	0x000fffff
 8003d98:	3ff00000 	.word	0x3ff00000
 8003d9c:	4090cbff 	.word	0x4090cbff
 8003da0:	3f6f3400 	.word	0x3f6f3400
 8003da4:	652b82fe 	.word	0x652b82fe
 8003da8:	3c971547 	.word	0x3c971547

08003dac <__ieee754_sqrt>:
 8003dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db0:	ec55 4b10 	vmov	r4, r5, d0
 8003db4:	4e55      	ldr	r6, [pc, #340]	; (8003f0c <__ieee754_sqrt+0x160>)
 8003db6:	43ae      	bics	r6, r5
 8003db8:	ee10 0a10 	vmov	r0, s0
 8003dbc:	ee10 3a10 	vmov	r3, s0
 8003dc0:	462a      	mov	r2, r5
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	d110      	bne.n	8003de8 <__ieee754_sqrt+0x3c>
 8003dc6:	ee10 2a10 	vmov	r2, s0
 8003dca:	462b      	mov	r3, r5
 8003dcc:	f7fc fbc0 	bl	8000550 <__aeabi_dmul>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	f7fc fa04 	bl	80001e4 <__adddf3>
 8003ddc:	4604      	mov	r4, r0
 8003dde:	460d      	mov	r5, r1
 8003de0:	ec45 4b10 	vmov	d0, r4, r5
 8003de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003de8:	2d00      	cmp	r5, #0
 8003dea:	dc10      	bgt.n	8003e0e <__ieee754_sqrt+0x62>
 8003dec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003df0:	4330      	orrs	r0, r6
 8003df2:	d0f5      	beq.n	8003de0 <__ieee754_sqrt+0x34>
 8003df4:	b15d      	cbz	r5, 8003e0e <__ieee754_sqrt+0x62>
 8003df6:	ee10 2a10 	vmov	r2, s0
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	ee10 0a10 	vmov	r0, s0
 8003e00:	f7fc f9ee 	bl	80001e0 <__aeabi_dsub>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	f7fc fccc 	bl	80007a4 <__aeabi_ddiv>
 8003e0c:	e7e6      	b.n	8003ddc <__ieee754_sqrt+0x30>
 8003e0e:	1512      	asrs	r2, r2, #20
 8003e10:	d074      	beq.n	8003efc <__ieee754_sqrt+0x150>
 8003e12:	07d4      	lsls	r4, r2, #31
 8003e14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8003e18:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8003e1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003e20:	bf5e      	ittt	pl
 8003e22:	0fda      	lsrpl	r2, r3, #31
 8003e24:	005b      	lslpl	r3, r3, #1
 8003e26:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8003e2a:	2400      	movs	r4, #0
 8003e2c:	0fda      	lsrs	r2, r3, #31
 8003e2e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003e32:	107f      	asrs	r7, r7, #1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2516      	movs	r5, #22
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003e3e:	1886      	adds	r6, r0, r2
 8003e40:	428e      	cmp	r6, r1
 8003e42:	bfde      	ittt	le
 8003e44:	1b89      	suble	r1, r1, r6
 8003e46:	18b0      	addle	r0, r6, r2
 8003e48:	18a4      	addle	r4, r4, r2
 8003e4a:	0049      	lsls	r1, r1, #1
 8003e4c:	3d01      	subs	r5, #1
 8003e4e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003e52:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003e56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e5a:	d1f0      	bne.n	8003e3e <__ieee754_sqrt+0x92>
 8003e5c:	462a      	mov	r2, r5
 8003e5e:	f04f 0e20 	mov.w	lr, #32
 8003e62:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003e66:	4281      	cmp	r1, r0
 8003e68:	eb06 0c05 	add.w	ip, r6, r5
 8003e6c:	dc02      	bgt.n	8003e74 <__ieee754_sqrt+0xc8>
 8003e6e:	d113      	bne.n	8003e98 <__ieee754_sqrt+0xec>
 8003e70:	459c      	cmp	ip, r3
 8003e72:	d811      	bhi.n	8003e98 <__ieee754_sqrt+0xec>
 8003e74:	f1bc 0f00 	cmp.w	ip, #0
 8003e78:	eb0c 0506 	add.w	r5, ip, r6
 8003e7c:	da43      	bge.n	8003f06 <__ieee754_sqrt+0x15a>
 8003e7e:	2d00      	cmp	r5, #0
 8003e80:	db41      	blt.n	8003f06 <__ieee754_sqrt+0x15a>
 8003e82:	f100 0801 	add.w	r8, r0, #1
 8003e86:	1a09      	subs	r1, r1, r0
 8003e88:	459c      	cmp	ip, r3
 8003e8a:	bf88      	it	hi
 8003e8c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8003e90:	eba3 030c 	sub.w	r3, r3, ip
 8003e94:	4432      	add	r2, r6
 8003e96:	4640      	mov	r0, r8
 8003e98:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003e9c:	f1be 0e01 	subs.w	lr, lr, #1
 8003ea0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8003ea4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003ea8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003eac:	d1db      	bne.n	8003e66 <__ieee754_sqrt+0xba>
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	d006      	beq.n	8003ec0 <__ieee754_sqrt+0x114>
 8003eb2:	1c50      	adds	r0, r2, #1
 8003eb4:	bf13      	iteet	ne
 8003eb6:	3201      	addne	r2, #1
 8003eb8:	3401      	addeq	r4, #1
 8003eba:	4672      	moveq	r2, lr
 8003ebc:	f022 0201 	bicne.w	r2, r2, #1
 8003ec0:	1063      	asrs	r3, r4, #1
 8003ec2:	0852      	lsrs	r2, r2, #1
 8003ec4:	07e1      	lsls	r1, r4, #31
 8003ec6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003eca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003ece:	bf48      	it	mi
 8003ed0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003ed4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003ed8:	4614      	mov	r4, r2
 8003eda:	e781      	b.n	8003de0 <__ieee754_sqrt+0x34>
 8003edc:	0ad9      	lsrs	r1, r3, #11
 8003ede:	3815      	subs	r0, #21
 8003ee0:	055b      	lsls	r3, r3, #21
 8003ee2:	2900      	cmp	r1, #0
 8003ee4:	d0fa      	beq.n	8003edc <__ieee754_sqrt+0x130>
 8003ee6:	02cd      	lsls	r5, r1, #11
 8003ee8:	d50a      	bpl.n	8003f00 <__ieee754_sqrt+0x154>
 8003eea:	f1c2 0420 	rsb	r4, r2, #32
 8003eee:	fa23 f404 	lsr.w	r4, r3, r4
 8003ef2:	1e55      	subs	r5, r2, #1
 8003ef4:	4093      	lsls	r3, r2
 8003ef6:	4321      	orrs	r1, r4
 8003ef8:	1b42      	subs	r2, r0, r5
 8003efa:	e78a      	b.n	8003e12 <__ieee754_sqrt+0x66>
 8003efc:	4610      	mov	r0, r2
 8003efe:	e7f0      	b.n	8003ee2 <__ieee754_sqrt+0x136>
 8003f00:	0049      	lsls	r1, r1, #1
 8003f02:	3201      	adds	r2, #1
 8003f04:	e7ef      	b.n	8003ee6 <__ieee754_sqrt+0x13a>
 8003f06:	4680      	mov	r8, r0
 8003f08:	e7bd      	b.n	8003e86 <__ieee754_sqrt+0xda>
 8003f0a:	bf00      	nop
 8003f0c:	7ff00000 	.word	0x7ff00000

08003f10 <with_errno>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	4604      	mov	r4, r0
 8003f14:	460d      	mov	r5, r1
 8003f16:	4616      	mov	r6, r2
 8003f18:	f7ff f8b0 	bl	800307c <__errno>
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	6006      	str	r6, [r0, #0]
 8003f20:	4620      	mov	r0, r4
 8003f22:	bd70      	pop	{r4, r5, r6, pc}

08003f24 <xflow>:
 8003f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f26:	4614      	mov	r4, r2
 8003f28:	461d      	mov	r5, r3
 8003f2a:	b108      	cbz	r0, 8003f30 <xflow+0xc>
 8003f2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003f30:	e9cd 2300 	strd	r2, r3, [sp]
 8003f34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f7fc fb08 	bl	8000550 <__aeabi_dmul>
 8003f40:	2222      	movs	r2, #34	; 0x22
 8003f42:	b003      	add	sp, #12
 8003f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f48:	f7ff bfe2 	b.w	8003f10 <with_errno>

08003f4c <__math_uflow>:
 8003f4c:	b508      	push	{r3, lr}
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f54:	f7ff ffe6 	bl	8003f24 <xflow>
 8003f58:	ec41 0b10 	vmov	d0, r0, r1
 8003f5c:	bd08      	pop	{r3, pc}

08003f5e <__math_oflow>:
 8003f5e:	b508      	push	{r3, lr}
 8003f60:	2200      	movs	r2, #0
 8003f62:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003f66:	f7ff ffdd 	bl	8003f24 <xflow>
 8003f6a:	ec41 0b10 	vmov	d0, r0, r1
 8003f6e:	bd08      	pop	{r3, pc}

08003f70 <fabs>:
 8003f70:	ec51 0b10 	vmov	r0, r1, d0
 8003f74:	ee10 2a10 	vmov	r2, s0
 8003f78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003f7c:	ec43 2b10 	vmov	d0, r2, r3
 8003f80:	4770      	bx	lr

08003f82 <finite>:
 8003f82:	b082      	sub	sp, #8
 8003f84:	ed8d 0b00 	vstr	d0, [sp]
 8003f88:	9801      	ldr	r0, [sp, #4]
 8003f8a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003f8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003f92:	0fc0      	lsrs	r0, r0, #31
 8003f94:	b002      	add	sp, #8
 8003f96:	4770      	bx	lr

08003f98 <scalbn>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	ec55 4b10 	vmov	r4, r5, d0
 8003f9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	462b      	mov	r3, r5
 8003fa6:	b99a      	cbnz	r2, 8003fd0 <scalbn+0x38>
 8003fa8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003fac:	4323      	orrs	r3, r4
 8003fae:	d036      	beq.n	800401e <scalbn+0x86>
 8003fb0:	4b39      	ldr	r3, [pc, #228]	; (8004098 <scalbn+0x100>)
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	ee10 0a10 	vmov	r0, s0
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f7fc fac9 	bl	8000550 <__aeabi_dmul>
 8003fbe:	4b37      	ldr	r3, [pc, #220]	; (800409c <scalbn+0x104>)
 8003fc0:	429e      	cmp	r6, r3
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	460d      	mov	r5, r1
 8003fc6:	da10      	bge.n	8003fea <scalbn+0x52>
 8003fc8:	a32b      	add	r3, pc, #172	; (adr r3, 8004078 <scalbn+0xe0>)
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	e03a      	b.n	8004046 <scalbn+0xae>
 8003fd0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003fd4:	428a      	cmp	r2, r1
 8003fd6:	d10c      	bne.n	8003ff2 <scalbn+0x5a>
 8003fd8:	ee10 2a10 	vmov	r2, s0
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4629      	mov	r1, r5
 8003fe0:	f7fc f900 	bl	80001e4 <__adddf3>
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	460d      	mov	r5, r1
 8003fe8:	e019      	b.n	800401e <scalbn+0x86>
 8003fea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003fee:	460b      	mov	r3, r1
 8003ff0:	3a36      	subs	r2, #54	; 0x36
 8003ff2:	4432      	add	r2, r6
 8003ff4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003ff8:	428a      	cmp	r2, r1
 8003ffa:	dd08      	ble.n	800400e <scalbn+0x76>
 8003ffc:	2d00      	cmp	r5, #0
 8003ffe:	a120      	add	r1, pc, #128	; (adr r1, 8004080 <scalbn+0xe8>)
 8004000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004004:	da1c      	bge.n	8004040 <scalbn+0xa8>
 8004006:	a120      	add	r1, pc, #128	; (adr r1, 8004088 <scalbn+0xf0>)
 8004008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800400c:	e018      	b.n	8004040 <scalbn+0xa8>
 800400e:	2a00      	cmp	r2, #0
 8004010:	dd08      	ble.n	8004024 <scalbn+0x8c>
 8004012:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004016:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800401a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800401e:	ec45 4b10 	vmov	d0, r4, r5
 8004022:	bd70      	pop	{r4, r5, r6, pc}
 8004024:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004028:	da19      	bge.n	800405e <scalbn+0xc6>
 800402a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800402e:	429e      	cmp	r6, r3
 8004030:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004034:	dd0a      	ble.n	800404c <scalbn+0xb4>
 8004036:	a112      	add	r1, pc, #72	; (adr r1, 8004080 <scalbn+0xe8>)
 8004038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e2      	bne.n	8004006 <scalbn+0x6e>
 8004040:	a30f      	add	r3, pc, #60	; (adr r3, 8004080 <scalbn+0xe8>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc fa83 	bl	8000550 <__aeabi_dmul>
 800404a:	e7cb      	b.n	8003fe4 <scalbn+0x4c>
 800404c:	a10a      	add	r1, pc, #40	; (adr r1, 8004078 <scalbn+0xe0>)
 800404e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0b8      	beq.n	8003fc8 <scalbn+0x30>
 8004056:	a10e      	add	r1, pc, #56	; (adr r1, 8004090 <scalbn+0xf8>)
 8004058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800405c:	e7b4      	b.n	8003fc8 <scalbn+0x30>
 800405e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004062:	3236      	adds	r2, #54	; 0x36
 8004064:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004068:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800406c:	4620      	mov	r0, r4
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <scalbn+0x108>)
 8004070:	2200      	movs	r2, #0
 8004072:	e7e8      	b.n	8004046 <scalbn+0xae>
 8004074:	f3af 8000 	nop.w
 8004078:	c2f8f359 	.word	0xc2f8f359
 800407c:	01a56e1f 	.word	0x01a56e1f
 8004080:	8800759c 	.word	0x8800759c
 8004084:	7e37e43c 	.word	0x7e37e43c
 8004088:	8800759c 	.word	0x8800759c
 800408c:	fe37e43c 	.word	0xfe37e43c
 8004090:	c2f8f359 	.word	0xc2f8f359
 8004094:	81a56e1f 	.word	0x81a56e1f
 8004098:	43500000 	.word	0x43500000
 800409c:	ffff3cb0 	.word	0xffff3cb0
 80040a0:	3c900000 	.word	0x3c900000

080040a4 <_init>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr

080040b0 <_fini>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr
