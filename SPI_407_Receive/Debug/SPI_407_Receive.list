
SPI_407_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005158  08005158  00015158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005268  08005268  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005270  08005270  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005270  08005270  00015270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000029c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000030c  2000030c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085a1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c7  00000000  00000000  00028641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  00029f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000778  00000000  00000000  0002a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ba7  00000000  00000000  0002aec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2a9  00000000  00000000  0004ca6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4bea  00000000  00000000  00057d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011c902  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d30  00000000  00000000  0011c954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800513c 	.word	0x0800513c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800513c 	.word	0x0800513c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
	int x;
	x=HAL_GPIO_ReadPin(GPIOA, Read_Pulse_Pin);
 8000eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eba:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000ebc:	f000 ff18 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60fb      	str	r3, [r7, #12]
	enqueue(&q, HAL_GPIO_ReadPin(GPIOA, Read_Pulse_Pin));
 8000ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000eca:	f000 ff11 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000ed4:	f002 f90a 	bl	80030ec <enqueue>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	200000e0 	.word	0x200000e0

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	create(&q, 129);
 8000eee:	2181      	movs	r1, #129	; 0x81
 8000ef0:	4828      	ldr	r0, [pc, #160]	; (8000f94 <main+0xac>)
 8000ef2:	f002 f8dc 	bl	80030ae <create>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 fbb7 	bl	8001668 <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd_init();
 8000efa:	f002 f873 	bl	8002fe4 <lcd_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efe:	f000 f84d 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f02:	f000 f8e3 	bl	80010cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f06:	f000 f8b3 	bl	8001070 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  int m, j;
  for(j=0;j<sizeof(str1)-1;j++){
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	e00c      	b.n	8000f2a <main+0x42>
	  str1[j]=q.p[j];
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <main+0xac>)
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	491e      	ldr	r1, [pc, #120]	; (8000f98 <main+0xb0>)
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(j=0;j<sizeof(str1)-1;j++){
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	3301      	adds	r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	f240 2202 	movw	r2, #514	; 0x202
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d9ed      	bls.n	8000f10 <main+0x28>
  }

  int n = sizeof(str1) / sizeof(int);
 8000f34:	2381      	movs	r3, #129	; 0x81
 8000f36:	607b      	str	r3, [r7, #4]
  char *arrChar;
  arrChar = (char *)malloc(sizeof(char) * (n + 1));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fa45 	bl	80033cc <malloc>
 8000f42:	4603      	mov	r3, r0
 8000f44:	603b      	str	r3, [r7, #0]
  for (m = 0; m < n; ++m){
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e00d      	b.n	8000f68 <main+0x80>
      arrChar[m] = str1[m] + '0';
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <main+0xb0>)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6839      	ldr	r1, [r7, #0]
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3230      	adds	r2, #48	; 0x30
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	701a      	strb	r2, [r3, #0]
  for (m = 0; m < n; ++m){
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbed      	blt.n	8000f4c <main+0x64>
  }
  arrChar[n] = '\0';
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
  //Binary_To_ASCII(arrChar);
  lcd_goto_XY(1, 0);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f002 f874 	bl	800306a <lcd_goto_XY>
  lcd_send_string(Binary_To_ASCII(arrChar));
 8000f82:	6838      	ldr	r0, [r7, #0]
 8000f84:	f002 f9c8 	bl	8003318 <Binary_To_ASCII>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 f858 	bl	8003040 <lcd_send_string>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <main+0xa8>
 8000f92:	bf00      	nop
 8000f94:	200000e0 	.word	0x200000e0
 8000f98:	200000f0 	.word	0x200000f0

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 fa16 	bl	80033dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <SystemClock_Config+0xcc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a27      	ldr	r2, [pc, #156]	; (8001068 <SystemClock_Config+0xcc>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b25      	ldr	r3, [pc, #148]	; (8001068 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <SystemClock_Config+0xd0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <SystemClock_Config+0xd0>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001006:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800100c:	2308      	movs	r3, #8
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001010:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001014:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001016:	2302      	movs	r3, #2
 8001018:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800101a:	2307      	movs	r3, #7
 800101c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fafa 	bl	800261c <HAL_RCC_OscConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800102e:	f000 f995 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001032:	230f      	movs	r3, #15
 8001034:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001036:	2302      	movs	r3, #2
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001042:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	2105      	movs	r1, #5
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fd5b 	bl	8002b0c <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800105c:	f000 f97e 	bl	800135c <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3750      	adds	r7, #80	; 0x50
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001076:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <MX_I2C1_Init+0x54>)
 8001078:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_I2C1_Init+0x50>)
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <MX_I2C1_Init+0x58>)
 800107e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_I2C1_Init+0x50>)
 800108e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001092:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010ae:	f000 fe69 	bl	8001d84 <HAL_I2C_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b8:	f000 f950 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000008c 	.word	0x2000008c
 80010c4:	40005400 	.word	0x40005400
 80010c8:	000186a0 	.word	0x000186a0

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	4b97      	ldr	r3, [pc, #604]	; (8001344 <MX_GPIO_Init+0x278>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a96      	ldr	r2, [pc, #600]	; (8001344 <MX_GPIO_Init+0x278>)
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b94      	ldr	r3, [pc, #592]	; (8001344 <MX_GPIO_Init+0x278>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	4b90      	ldr	r3, [pc, #576]	; (8001344 <MX_GPIO_Init+0x278>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a8f      	ldr	r2, [pc, #572]	; (8001344 <MX_GPIO_Init+0x278>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b8d      	ldr	r3, [pc, #564]	; (8001344 <MX_GPIO_Init+0x278>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b89      	ldr	r3, [pc, #548]	; (8001344 <MX_GPIO_Init+0x278>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a88      	ldr	r2, [pc, #544]	; (8001344 <MX_GPIO_Init+0x278>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b86      	ldr	r3, [pc, #536]	; (8001344 <MX_GPIO_Init+0x278>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b82      	ldr	r3, [pc, #520]	; (8001344 <MX_GPIO_Init+0x278>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a81      	ldr	r2, [pc, #516]	; (8001344 <MX_GPIO_Init+0x278>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b7f      	ldr	r3, [pc, #508]	; (8001344 <MX_GPIO_Init+0x278>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b7b      	ldr	r3, [pc, #492]	; (8001344 <MX_GPIO_Init+0x278>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a7a      	ldr	r2, [pc, #488]	; (8001344 <MX_GPIO_Init+0x278>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b78      	ldr	r3, [pc, #480]	; (8001344 <MX_GPIO_Init+0x278>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b74      	ldr	r3, [pc, #464]	; (8001344 <MX_GPIO_Init+0x278>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a73      	ldr	r2, [pc, #460]	; (8001344 <MX_GPIO_Init+0x278>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b71      	ldr	r3, [pc, #452]	; (8001344 <MX_GPIO_Init+0x278>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2108      	movs	r1, #8
 800118e:	486e      	ldr	r0, [pc, #440]	; (8001348 <MX_GPIO_Init+0x27c>)
 8001190:	f000 fdc6 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2101      	movs	r1, #1
 8001198:	486c      	ldr	r0, [pc, #432]	; (800134c <MX_GPIO_Init+0x280>)
 800119a:	f000 fdc1 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f247 0110 	movw	r1, #28688	; 0x7010
 80011a4:	486a      	ldr	r0, [pc, #424]	; (8001350 <MX_GPIO_Init+0x284>)
 80011a6:	f000 fdbb 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011aa:	2308      	movs	r3, #8
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	4861      	ldr	r0, [pc, #388]	; (8001348 <MX_GPIO_Init+0x27c>)
 80011c2:	f000 fbf9 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	485b      	ldr	r0, [pc, #364]	; (800134c <MX_GPIO_Init+0x280>)
 80011de:	f000 fbeb 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80011e2:	2308      	movs	r3, #8
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011f2:	2305      	movs	r3, #5
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4853      	ldr	r0, [pc, #332]	; (800134c <MX_GPIO_Init+0x280>)
 80011fe:	f000 fbdb 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Read_CLK_Pin */
  GPIO_InitStruct.Pin = Read_CLK_Pin;
 8001202:	2301      	movs	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001206:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800120a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120c:	2301      	movs	r3, #1
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Read_CLK_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	484f      	ldr	r0, [pc, #316]	; (8001354 <MX_GPIO_Init+0x288>)
 8001218:	f000 fbce 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800121c:	2310      	movs	r3, #16
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800122c:	2306      	movs	r3, #6
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4847      	ldr	r0, [pc, #284]	; (8001354 <MX_GPIO_Init+0x288>)
 8001238:	f000 fbbe 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800123c:	23e0      	movs	r3, #224	; 0xe0
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800124c:	2305      	movs	r3, #5
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	483f      	ldr	r0, [pc, #252]	; (8001354 <MX_GPIO_Init+0x288>)
 8001258:	f000 fbae 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800125c:	2304      	movs	r3, #4
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	483a      	ldr	r0, [pc, #232]	; (8001358 <MX_GPIO_Init+0x28c>)
 8001270:	f000 fba2 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001286:	2305      	movs	r3, #5
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4831      	ldr	r0, [pc, #196]	; (8001358 <MX_GPIO_Init+0x28c>)
 8001292:	f000 fb91 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 8001296:	f247 0310 	movw	r3, #28688	; 0x7010
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	4828      	ldr	r0, [pc, #160]	; (8001350 <MX_GPIO_Init+0x284>)
 80012b0:	f000 fb82 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Read_Pulse_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = Read_Pulse_Pin|OTG_FS_OverCurrent_Pin;
 80012b4:	f248 0320 	movw	r3, #32800	; 0x8020
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4821      	ldr	r0, [pc, #132]	; (8001350 <MX_GPIO_Init+0x284>)
 80012ca:	f000 fb75 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012ce:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012e0:	2306      	movs	r3, #6
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4818      	ldr	r0, [pc, #96]	; (800134c <MX_GPIO_Init+0x280>)
 80012ec:	f000 fb64 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80012f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	4813      	ldr	r0, [pc, #76]	; (8001354 <MX_GPIO_Init+0x288>)
 8001306:	f000 fb57 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800130a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800131c:	230a      	movs	r3, #10
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <MX_GPIO_Init+0x288>)
 8001328:	f000 fb46 	bl	80019b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2006      	movs	r0, #6
 8001332:	f000 fb0a 	bl	800194a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001336:	2006      	movs	r0, #6
 8001338:	f000 fb23 	bl	8001982 <HAL_NVIC_EnableIRQ>

}
 800133c:	bf00      	nop
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40021000 	.word	0x40021000
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_MspInit+0x4c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_MspInit+0x4c>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_MspInit+0x4c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_MspInit+0x4c>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013a6:	2007      	movs	r0, #7
 80013a8:	f000 fac4 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_I2C_MspInit+0x84>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12b      	bne.n	8001432 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f6:	23c0      	movs	r3, #192	; 0xc0
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fa:	2312      	movs	r3, #18
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001406:	2304      	movs	r3, #4
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <HAL_I2C_MspInit+0x8c>)
 8001412:	f000 fad1 	bl	80019b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_I2C_MspInit+0x88>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_I2C_MspInit+0x88>)
 8001420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_I2C_MspInit+0x88>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40005400 	.word	0x40005400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020400 	.word	0x40020400

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001494:	f000 f93a 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Read_CLK_Pin);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f000 fc57 	bl	8001d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e00a      	b.n	80014d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014bc:	f3af 8000 	nop.w
 80014c0:	4601      	mov	r1, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	60ba      	str	r2, [r7, #8]
 80014c8:	b2ca      	uxtb	r2, r1
 80014ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	dbf0      	blt.n	80014bc <_read+0x12>
	}

return len;
 80014da:	687b      	ldr	r3, [r7, #4]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e009      	b.n	800150a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	60ba      	str	r2, [r7, #8]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	dbf1      	blt.n	80014f6 <_write+0x12>
	}
	return len;
 8001512:	687b      	ldr	r3, [r7, #4]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_close>:

int _close(int file)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	return -1;
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001544:	605a      	str	r2, [r3, #4]
	return 0;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_isatty>:

int _isatty(int file)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
	return 0;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f001 fee0 	bl	8003378 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20020000 	.word	0x20020000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	200002f4 	.word	0x200002f4
 80015ec:	20000310 	.word	0x20000310

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffd7 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f001 fe9f 	bl	8003384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff fc4f 	bl	8000ee8 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800164c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001658:	08005278 	.word	0x08005278
  ldr r2, =_sbss
 800165c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001660:	2000030c 	.word	0x2000030c

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_Init+0x40>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_Init+0x40>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x40>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f94f 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fe64 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f967 	bl	800199e <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 f92f 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000000 	.word	0x20000000
 8001704:	20000008 	.word	0x20000008
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008
 8001730:	200002f8 	.word	0x200002f8

08001734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200002f8 	.word	0x200002f8

0800174c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_Delay+0x44>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000008 	.word	0x20000008

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	; (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff3e 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff8e 	bl	8001888 <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff31 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffa2 	bl	80018f0 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e16b      	b.n	8001cac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 815a 	bne.w	8001ca6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d005      	beq.n	8001a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d130      	bne.n	8001a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d017      	beq.n	8001aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80b4 	beq.w	8001ca6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b60      	ldr	r3, [pc, #384]	; (8001cc4 <HAL_GPIO_Init+0x30c>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a5f      	ldr	r2, [pc, #380]	; (8001cc4 <HAL_GPIO_Init+0x30c>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <HAL_GPIO_Init+0x30c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5a:	4a5b      	ldr	r2, [pc, #364]	; (8001cc8 <HAL_GPIO_Init+0x310>)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_GPIO_Init+0x314>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d02b      	beq.n	8001bde <HAL_GPIO_Init+0x226>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a51      	ldr	r2, [pc, #324]	; (8001cd0 <HAL_GPIO_Init+0x318>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d025      	beq.n	8001bda <HAL_GPIO_Init+0x222>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a50      	ldr	r2, [pc, #320]	; (8001cd4 <HAL_GPIO_Init+0x31c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01f      	beq.n	8001bd6 <HAL_GPIO_Init+0x21e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4f      	ldr	r2, [pc, #316]	; (8001cd8 <HAL_GPIO_Init+0x320>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d019      	beq.n	8001bd2 <HAL_GPIO_Init+0x21a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4e      	ldr	r2, [pc, #312]	; (8001cdc <HAL_GPIO_Init+0x324>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x216>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4d      	ldr	r2, [pc, #308]	; (8001ce0 <HAL_GPIO_Init+0x328>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x212>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4c      	ldr	r2, [pc, #304]	; (8001ce4 <HAL_GPIO_Init+0x32c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x20e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4b      	ldr	r2, [pc, #300]	; (8001ce8 <HAL_GPIO_Init+0x330>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x20a>
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	e00e      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	e00c      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	e00a      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bca:	2305      	movs	r3, #5
 8001bcc:	e008      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e004      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bde:	2300      	movs	r3, #0
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f002 0203 	and.w	r2, r2, #3
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	4093      	lsls	r3, r2
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf0:	4935      	ldr	r1, [pc, #212]	; (8001cc8 <HAL_GPIO_Init+0x310>)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c22:	4a32      	ldr	r2, [pc, #200]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c28:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c4c:	4a27      	ldr	r2, [pc, #156]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	f67f ae90 	bls.w	80019d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40020800 	.word	0x40020800
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40021400 	.word	0x40021400
 8001ce4:	40021800 	.word	0x40021800
 8001ce8:	40021c00 	.word	0x40021c00
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e001      	b.n	8001d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d3c:	e003      	b.n	8001d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	041a      	lsls	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	619a      	str	r2, [r3, #24]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff f89a 	bl	8000eac <HAL_GPIO_EXTI_Callback>
  }
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40013c00 	.word	0x40013c00

08001d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e12b      	b.n	8001fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fb04 	bl	80013b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2224      	movs	r2, #36	; 0x24
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001de8:	f001 f888 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8001dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a81      	ldr	r2, [pc, #516]	; (8001ff8 <HAL_I2C_Init+0x274>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d807      	bhi.n	8001e08 <HAL_I2C_Init+0x84>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a80      	ldr	r2, [pc, #512]	; (8001ffc <HAL_I2C_Init+0x278>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e006      	b.n	8001e16 <HAL_I2C_Init+0x92>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a7d      	ldr	r2, [pc, #500]	; (8002000 <HAL_I2C_Init+0x27c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	bf94      	ite	ls
 8001e10:	2301      	movls	r3, #1
 8001e12:	2300      	movhi	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0e7      	b.n	8001fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a78      	ldr	r2, [pc, #480]	; (8002004 <HAL_I2C_Init+0x280>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0c9b      	lsrs	r3, r3, #18
 8001e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a6a      	ldr	r2, [pc, #424]	; (8001ff8 <HAL_I2C_Init+0x274>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d802      	bhi.n	8001e58 <HAL_I2C_Init+0xd4>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3301      	adds	r3, #1
 8001e56:	e009      	b.n	8001e6c <HAL_I2C_Init+0xe8>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	4a69      	ldr	r2, [pc, #420]	; (8002008 <HAL_I2C_Init+0x284>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	495c      	ldr	r1, [pc, #368]	; (8001ff8 <HAL_I2C_Init+0x274>)
 8001e88:	428b      	cmp	r3, r1
 8001e8a:	d819      	bhi.n	8001ec0 <HAL_I2C_Init+0x13c>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1e59      	subs	r1, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e9a:	1c59      	adds	r1, r3, #1
 8001e9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ea0:	400b      	ands	r3, r1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_I2C_Init+0x138>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1e59      	subs	r1, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eba:	e051      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e04f      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d111      	bne.n	8001eec <HAL_I2C_Init+0x168>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	440b      	add	r3, r1
 8001ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e012      	b.n	8001f12 <HAL_I2C_Init+0x18e>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1e58      	subs	r0, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	0099      	lsls	r1, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Init+0x196>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e022      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10e      	bne.n	8001f40 <HAL_I2C_Init+0x1bc>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1e58      	subs	r0, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6859      	ldr	r1, [r3, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	440b      	add	r3, r1
 8001f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3e:	e00f      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e58      	subs	r0, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	0099      	lsls	r1, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f56:	3301      	adds	r3, #1
 8001f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	6809      	ldr	r1, [r1, #0]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69da      	ldr	r2, [r3, #28]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6911      	ldr	r1, [r2, #16]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68d2      	ldr	r2, [r2, #12]
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	000186a0 	.word	0x000186a0
 8001ffc:	001e847f 	.word	0x001e847f
 8002000:	003d08ff 	.word	0x003d08ff
 8002004:	431bde83 	.word	0x431bde83
 8002008:	10624dd3 	.word	0x10624dd3

0800200c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	461a      	mov	r2, r3
 8002018:	460b      	mov	r3, r1
 800201a:	817b      	strh	r3, [r7, #10]
 800201c:	4613      	mov	r3, r2
 800201e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff fb88 	bl	8001734 <HAL_GetTick>
 8002024:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b20      	cmp	r3, #32
 8002030:	f040 80e0 	bne.w	80021f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2319      	movs	r3, #25
 800203a:	2201      	movs	r2, #1
 800203c:	4970      	ldr	r1, [pc, #448]	; (8002200 <HAL_I2C_Master_Transmit+0x1f4>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f964 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800204a:	2302      	movs	r3, #2
 800204c:	e0d3      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_I2C_Master_Transmit+0x50>
 8002058:	2302      	movs	r3, #2
 800205a:	e0cc      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d007      	beq.n	8002082 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 0201 	orr.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002090:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2221      	movs	r2, #33	; 0x21
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2210      	movs	r2, #16
 800209e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	893a      	ldrh	r2, [r7, #8]
 80020b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4a50      	ldr	r2, [pc, #320]	; (8002204 <HAL_I2C_Master_Transmit+0x1f8>)
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020c4:	8979      	ldrh	r1, [r7, #10]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6a3a      	ldr	r2, [r7, #32]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f89c 	bl	8002208 <I2C_MasterRequestWrite>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e08d      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020f0:	e066      	b.n	80021c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	6a39      	ldr	r1, [r7, #32]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f9de 	bl	80024b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00d      	beq.n	800211e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b04      	cmp	r3, #4
 8002108:	d107      	bne.n	800211a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002118:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06b      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b04      	cmp	r3, #4
 800215a:	d11b      	bne.n	8002194 <HAL_I2C_Master_Transmit+0x188>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002160:	2b00      	cmp	r3, #0
 8002162:	d017      	beq.n	8002194 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	6a39      	ldr	r1, [r7, #32]
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 f9ce 	bl	800253a <I2C_WaitOnBTFFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00d      	beq.n	80021c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d107      	bne.n	80021bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e01a      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d194      	bne.n	80020f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e000      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	00100002 	.word	0x00100002
 8002204:	ffff0000 	.word	0xffff0000

08002208 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	460b      	mov	r3, r1
 8002216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d006      	beq.n	8002232 <I2C_MasterRequestWrite+0x2a>
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d003      	beq.n	8002232 <I2C_MasterRequestWrite+0x2a>
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002230:	d108      	bne.n	8002244 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e00b      	b.n	800225c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	2b12      	cmp	r3, #18
 800224a:	d107      	bne.n	800225c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800225a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f84f 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00d      	beq.n	8002290 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002282:	d103      	bne.n	800228c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e035      	b.n	80022fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002298:	d108      	bne.n	80022ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800229a:	897b      	ldrh	r3, [r7, #10]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022a8:	611a      	str	r2, [r3, #16]
 80022aa:	e01b      	b.n	80022e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022ac:	897b      	ldrh	r3, [r7, #10]
 80022ae:	11db      	asrs	r3, r3, #7
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f003 0306 	and.w	r3, r3, #6
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f063 030f 	orn	r3, r3, #15
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <I2C_MasterRequestWrite+0xfc>)
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f875 	bl	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e010      	b.n	80022fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022da:	897b      	ldrh	r3, [r7, #10]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4907      	ldr	r1, [pc, #28]	; (8002308 <I2C_MasterRequestWrite+0x100>)
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f865 	bl	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	00010008 	.word	0x00010008
 8002308:	00010002 	.word	0x00010002

0800230c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800231c:	e025      	b.n	800236a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d021      	beq.n	800236a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002326:	f7ff fa05 	bl	8001734 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d116      	bne.n	800236a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e023      	b.n	80023b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10d      	bne.n	8002390 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4013      	ands	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf0c      	ite	eq
 8002386:	2301      	moveq	r3, #1
 8002388:	2300      	movne	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	e00c      	b.n	80023aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4013      	ands	r3, r2
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf0c      	ite	eq
 80023a2:	2301      	moveq	r3, #1
 80023a4:	2300      	movne	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d0b6      	beq.n	800231e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023c8:	e051      	b.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d8:	d123      	bne.n	8002422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f043 0204 	orr.w	r2, r3, #4
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e046      	b.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d021      	beq.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7ff f983 	bl	8001734 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d116      	bne.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e020      	b.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10c      	bne.n	8002492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4013      	ands	r3, r2
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	e00b      	b.n	80024aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	43da      	mvns	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4013      	ands	r3, r2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d18d      	bne.n	80023ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024c4:	e02d      	b.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f878 	bl	80025bc <I2C_IsAcknowledgeFailed>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e02d      	b.n	8002532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d021      	beq.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024de:	f7ff f929 	bl	8001734 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d302      	bcc.n	80024f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d116      	bne.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f043 0220 	orr.w	r2, r3, #32
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e007      	b.n	8002532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d1ca      	bne.n	80024c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002546:	e02d      	b.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f837 	bl	80025bc <I2C_IsAcknowledgeFailed>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e02d      	b.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255e:	d021      	beq.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002560:	f7ff f8e8 	bl	8001734 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	d302      	bcc.n	8002576 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d116      	bne.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e007      	b.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d1ca      	bne.n	8002548 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d2:	d11b      	bne.n	800260c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f043 0204 	orr.w	r2, r3, #4
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e267      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d075      	beq.n	8002726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263a:	4b88      	ldr	r3, [pc, #544]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b04      	cmp	r3, #4
 8002644:	d00c      	beq.n	8002660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002646:	4b85      	ldr	r3, [pc, #532]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264e:	2b08      	cmp	r3, #8
 8002650:	d112      	bne.n	8002678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002652:	4b82      	ldr	r3, [pc, #520]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265e:	d10b      	bne.n	8002678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	4b7e      	ldr	r3, [pc, #504]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d05b      	beq.n	8002724 <HAL_RCC_OscConfig+0x108>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d157      	bne.n	8002724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e242      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d106      	bne.n	8002690 <HAL_RCC_OscConfig+0x74>
 8002682:	4b76      	ldr	r3, [pc, #472]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a75      	ldr	r2, [pc, #468]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e01d      	b.n	80026cc <HAL_RCC_OscConfig+0xb0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x98>
 800269a:	4b70      	ldr	r3, [pc, #448]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6f      	ldr	r2, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b6d      	ldr	r3, [pc, #436]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6c      	ldr	r2, [pc, #432]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0xb0>
 80026b4:	4b69      	ldr	r3, [pc, #420]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a68      	ldr	r2, [pc, #416]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff f82e 	bl	8001734 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026dc:	f7ff f82a 	bl	8001734 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e207      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b5b      	ldr	r3, [pc, #364]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0xc0>
 80026fa:	e014      	b.n	8002726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7ff f81a 	bl	8001734 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002704:	f7ff f816 	bl	8001734 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	; 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e1f3      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	4b51      	ldr	r3, [pc, #324]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0xe8>
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d063      	beq.n	80027fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002732:	4b4a      	ldr	r3, [pc, #296]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002746:	2b08      	cmp	r3, #8
 8002748:	d11c      	bne.n	8002784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274a:	4b44      	ldr	r3, [pc, #272]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d116      	bne.n	8002784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_RCC_OscConfig+0x152>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d001      	beq.n	800276e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e1c7      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4937      	ldr	r1, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	e03a      	b.n	80027fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800278c:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x244>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe ffcf 	bl	8001734 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279a:	f7fe ffcb 	bl	8001734 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e1a8      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4925      	ldr	r1, [pc, #148]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
 80027cc:	e015      	b.n	80027fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_OscConfig+0x244>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe ffae 	bl	8001734 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027dc:	f7fe ffaa 	bl	8001734 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e187      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d036      	beq.n	8002874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d016      	beq.n	800283c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_RCC_OscConfig+0x248>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe ff8e 	bl	8001734 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281c:	f7fe ff8a 	bl	8001734 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e167      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x200>
 800283a:	e01b      	b.n	8002874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_RCC_OscConfig+0x248>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002842:	f7fe ff77 	bl	8001734 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	e00e      	b.n	8002868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284a:	f7fe ff73 	bl	8001734 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d907      	bls.n	8002868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e150      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
 800285c:	40023800 	.word	0x40023800
 8002860:	42470000 	.word	0x42470000
 8002864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	4b88      	ldr	r3, [pc, #544]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800286a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ea      	bne.n	800284a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8097 	beq.w	80029b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	4b7d      	ldr	r3, [pc, #500]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a7c      	ldr	r2, [pc, #496]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b7a      	ldr	r3, [pc, #488]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b77      	ldr	r3, [pc, #476]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d118      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028be:	4b74      	ldr	r3, [pc, #464]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a73      	ldr	r2, [pc, #460]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ca:	f7fe ff33 	bl	8001734 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7fe ff2f 	bl	8001734 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e10c      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x2ea>
 80028f8:	4b64      	ldr	r3, [pc, #400]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a63      	ldr	r2, [pc, #396]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
 8002904:	e01c      	b.n	8002940 <HAL_RCC_OscConfig+0x324>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b05      	cmp	r3, #5
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x30c>
 800290e:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a5e      	ldr	r2, [pc, #376]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a5b      	ldr	r2, [pc, #364]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0x324>
 8002928:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a57      	ldr	r2, [pc, #348]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
 8002934:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a54      	ldr	r2, [pc, #336]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fef4 	bl	8001734 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe fef0 	bl	8001734 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e0cb      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0ee      	beq.n	8002950 <HAL_RCC_OscConfig+0x334>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002974:	f7fe fede 	bl	8001734 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe feda 	bl	8001734 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0b5      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002992:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ee      	bne.n	800297c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a4:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	4a38      	ldr	r2, [pc, #224]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80a1 	beq.w	8002afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d05c      	beq.n	8002a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d141      	bne.n	8002a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe feae 	bl	8001734 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe feaa 	bl	8001734 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e087      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	019b      	lsls	r3, r3, #6
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	3b01      	subs	r3, #1
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	491b      	ldr	r1, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fe83 	bl	8001734 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fe7f 	bl	8001734 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e05c      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x416>
 8002a50:	e054      	b.n	8002afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe fe6c 	bl	8001734 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fe68 	bl	8001734 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e045      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x444>
 8002a7e:	e03d      	b.n	8002afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e038      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40007000 	.word	0x40007000
 8002a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x4ec>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d028      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d121      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d11a      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d111      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800

08002b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0cc      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b68      	ldr	r3, [pc, #416]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d90c      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b8      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a58      	ldr	r2, [pc, #352]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494d      	ldr	r1, [pc, #308]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d044      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d119      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e06f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e067      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4934      	ldr	r1, [pc, #208]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7fe fd9a 	bl	8001734 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fe fd96 	bl	8001734 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e04f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d20c      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e032      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f821 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	490a      	ldr	r1, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	5ccb      	ldrb	r3, [r1, r3]
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fcfa 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08005188 	.word	0x08005188
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cdc:	b094      	sub	sp, #80	; 0x50
 8002cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce8:	2300      	movs	r3, #0
 8002cea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf0:	4b79      	ldr	r3, [pc, #484]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d00d      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x40>
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	f200 80e1 	bhi.w	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x34>
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d0a:	e0db      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b73      	ldr	r3, [pc, #460]	; (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002d0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d10:	e0db      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d12:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d16:	e0d8      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d18:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d22:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	2200      	movs	r2, #0
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
 8002d42:	2300      	movs	r3, #0
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
 8002d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5c:	0150      	lsls	r0, r2, #5
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4621      	mov	r1, r4
 8002d64:	1a51      	subs	r1, r2, r1
 8002d66:	6139      	str	r1, [r7, #16]
 8002d68:	4629      	mov	r1, r5
 8002d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	018b      	lsls	r3, r1, #6
 8002d80:	4651      	mov	r1, sl
 8002d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d86:	4651      	mov	r1, sl
 8002d88:	018a      	lsls	r2, r1, #6
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d90:	4659      	mov	r1, fp
 8002d92:	eb63 0901 	sbc.w	r9, r3, r1
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002daa:	4690      	mov	r8, r2
 8002dac:	4699      	mov	r9, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	eb18 0303 	adds.w	r3, r8, r3
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	462b      	mov	r3, r5
 8002db8:	eb49 0303 	adc.w	r3, r9, r3
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	024b      	lsls	r3, r1, #9
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	024a      	lsls	r2, r1, #9
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dde:	2200      	movs	r2, #0
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002de8:	f7fd fede 	bl	8000ba8 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df4:	e058      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	4611      	mov	r1, r2
 8002e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e10:	4642      	mov	r2, r8
 8002e12:	464b      	mov	r3, r9
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	0159      	lsls	r1, r3, #5
 8002e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e22:	0150      	lsls	r0, r2, #5
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e2e:	4649      	mov	r1, r9
 8002e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e48:	ebb2 040a 	subs.w	r4, r2, sl
 8002e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	00eb      	lsls	r3, r5, #3
 8002e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5e:	00e2      	lsls	r2, r4, #3
 8002e60:	4614      	mov	r4, r2
 8002e62:	461d      	mov	r5, r3
 8002e64:	4643      	mov	r3, r8
 8002e66:	18e3      	adds	r3, r4, r3
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	eb45 0303 	adc.w	r3, r5, r3
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e7e:	4629      	mov	r1, r5
 8002e80:	028b      	lsls	r3, r1, #10
 8002e82:	4621      	mov	r1, r4
 8002e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e88:	4621      	mov	r1, r4
 8002e8a:	028a      	lsls	r2, r1, #10
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e92:	2200      	movs	r2, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	61fa      	str	r2, [r7, #28]
 8002e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9c:	f7fd fe84 	bl	8000ba8 <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec2:	e002      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3750      	adds	r7, #80	; 0x50
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	007a1200 	.word	0x007a1200

08002ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000000 	.word	0x20000000

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f00:	f7ff fff0 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0a9b      	lsrs	r3, r3, #10
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	08005198 	.word	0x08005198

08002f24 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly
extern
#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	f023 030f 	bic.w	r3, r3, #15
 8002f34:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	f043 030c 	orr.w	r3, r3, #12
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	f043 0308 	orr.w	r3, r3, #8
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002f50:	7bbb      	ldrb	r3, [r7, #14]
 8002f52:	f043 030c 	orr.w	r3, r3, #12
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002f5a:	7bbb      	ldrb	r3, [r7, #14]
 8002f5c:	f043 0308 	orr.w	r3, r3, #8
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f64:	f107 0208 	add.w	r2, r7, #8
 8002f68:	2364      	movs	r3, #100	; 0x64
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	214e      	movs	r1, #78	; 0x4e
 8002f70:	4803      	ldr	r0, [pc, #12]	; (8002f80 <lcd_send_cmd+0x5c>)
 8002f72:	f7ff f84b 	bl	800200c <HAL_I2C_Master_Transmit>
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	2000008c 	.word	0x2000008c

08002f84 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	f023 030f 	bic.w	r3, r3, #15
 8002f94:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	f043 030d 	orr.w	r3, r3, #13
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	f043 0309 	orr.w	r3, r3, #9
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fb0:	7bbb      	ldrb	r3, [r7, #14]
 8002fb2:	f043 030d 	orr.w	r3, r3, #13
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fba:	7bbb      	ldrb	r3, [r7, #14]
 8002fbc:	f043 0309 	orr.w	r3, r3, #9
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fc4:	f107 0208 	add.w	r2, r7, #8
 8002fc8:	2364      	movs	r3, #100	; 0x64
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	2304      	movs	r3, #4
 8002fce:	214e      	movs	r1, #78	; 0x4e
 8002fd0:	4803      	ldr	r0, [pc, #12]	; (8002fe0 <lcd_send_data+0x5c>)
 8002fd2:	f7ff f81b 	bl	800200c <HAL_I2C_Master_Transmit>
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000008c 	.word	0x2000008c

08002fe4 <lcd_init>:

void lcd_init (void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8002fe8:	2033      	movs	r0, #51	; 0x33
 8002fea:	f7ff ff9b 	bl	8002f24 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8002fee:	2032      	movs	r0, #50	; 0x32
 8002ff0:	f7ff ff98 	bl	8002f24 <lcd_send_cmd>
	HAL_Delay(50);
 8002ff4:	2032      	movs	r0, #50	; 0x32
 8002ff6:	f7fe fba9 	bl	800174c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8002ffa:	2028      	movs	r0, #40	; 0x28
 8002ffc:	f7ff ff92 	bl	8002f24 <lcd_send_cmd>
	HAL_Delay(50);
 8003000:	2032      	movs	r0, #50	; 0x32
 8003002:	f7fe fba3 	bl	800174c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8003006:	2001      	movs	r0, #1
 8003008:	f7ff ff8c 	bl	8002f24 <lcd_send_cmd>
	HAL_Delay(50);
 800300c:	2032      	movs	r0, #50	; 0x32
 800300e:	f7fe fb9d 	bl	800174c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8003012:	2006      	movs	r0, #6
 8003014:	f7ff ff86 	bl	8002f24 <lcd_send_cmd>
	HAL_Delay(50);
 8003018:	2032      	movs	r0, #50	; 0x32
 800301a:	f7fe fb97 	bl	800174c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800301e:	200c      	movs	r0, #12
 8003020:	f7ff ff80 	bl	8002f24 <lcd_send_cmd>
	HAL_Delay(50);
 8003024:	2032      	movs	r0, #50	; 0x32
 8003026:	f7fe fb91 	bl	800174c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800302a:	2002      	movs	r0, #2
 800302c:	f7ff ff7a 	bl	8002f24 <lcd_send_cmd>
	HAL_Delay(50);
 8003030:	2032      	movs	r0, #50	; 0x32
 8003032:	f7fe fb8b 	bl	800174c <HAL_Delay>
	lcd_send_cmd (0x80);
 8003036:	2080      	movs	r0, #128	; 0x80
 8003038:	f7ff ff74 	bl	8002f24 <lcd_send_cmd>
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}

08003040 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8003048:	e006      	b.n	8003058 <lcd_send_string+0x18>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff96 	bl	8002f84 <lcd_send_data>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f4      	bne.n	800304a <lcd_send_string+0xa>
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d108      	bne.n	800308c <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4413      	add	r3, r2
 8003084:	b2db      	uxtb	r3, r3
 8003086:	337f      	adds	r3, #127	; 0x7f
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e008      	b.n	800309e <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3340      	adds	r3, #64	; 0x40
 8003092:	b2db      	uxtb	r3, r3
 8003094:	b25b      	sxtb	r3, r3
 8003096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800309a:	b25b      	sxtb	r3, r3
 800309c:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff3f 	bl	8002f24 <lcd_send_cmd>
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <create>:
 */

#include "queue.h"


void create( struct queue *q, int size){
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
	q->size=size;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	601a      	str	r2, [r3, #0]
	q->front=q->rear=-1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	605a      	str	r2, [r3, #4]
	q->p=(int*)malloc(q->size*sizeof(int));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f979 	bl	80033cc <malloc>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60da      	str	r2, [r3, #12]
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <enqueue>:
void enqueue( struct queue *q, int x){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
	if(q->rear==q->size-1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3b01      	subs	r3, #1
 8003100:	429a      	cmp	r2, r3
 8003102:	d103      	bne.n	800310c <enqueue+0x20>
		printf("Queue is FULL");
 8003104:	480a      	ldr	r0, [pc, #40]	; (8003130 <enqueue+0x44>)
 8003106:	f000 fa51 	bl	80035ac <iprintf>
	else{
		q->rear++;
		q->p[q->rear]=x;
	}
}
 800310a:	e00c      	b.n	8003126 <enqueue+0x3a>
		q->rear++;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	609a      	str	r2, [r3, #8]
		q->p[q->rear]=x;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	601a      	str	r2, [r3, #0]
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	08005158 	.word	0x08005158

08003134 <Get_Sub_String>:
        }
    }
    return binary;
}
char *Get_Sub_String(char *str, int index, int count)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
    int strLen = strlen(str);
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f7fd f845 	bl	80001d0 <strlen>
 8003146:	4603      	mov	r3, r0
 8003148:	61bb      	str	r3, [r7, #24]
    int lastIndex = index + count;
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

    if (index >= 0 && lastIndex > strLen)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	db05      	blt.n	8003164 <Get_Sub_String+0x30>
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	429a      	cmp	r2, r3
 800315e:	dd01      	ble.n	8003164 <Get_Sub_String+0x30>
        return "";
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <Get_Sub_String+0x7c>)
 8003162:	e021      	b.n	80031a8 <Get_Sub_String+0x74>

    char *subStr = malloc(count + 1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3301      	adds	r3, #1
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f92f 	bl	80033cc <malloc>
 800316e:	4603      	mov	r3, r0
 8003170:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < count; i++)
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	e00d      	b.n	8003194 <Get_Sub_String+0x60>
    {
        subStr[i] = str[index + i];
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	4413      	add	r3, r2
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	441a      	add	r2, r3
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	6939      	ldr	r1, [r7, #16]
 8003188:	440b      	add	r3, r1
 800318a:	7812      	ldrb	r2, [r2, #0]
 800318c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < count; i++)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3301      	adds	r3, #1
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	dbed      	blt.n	8003178 <Get_Sub_String+0x44>
    }

    subStr[count] = '\0';
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]

    return subStr;
 80031a6:	693b      	ldr	r3, [r7, #16]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	08005184 	.word	0x08005184

080031b4 <Append_String>:

char *Append_String(const char *str1, const char *str2)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
    int str1Len = strlen(str1);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd f806 	bl	80001d0 <strlen>
 80031c4:	4603      	mov	r3, r0
 80031c6:	617b      	str	r3, [r7, #20]
    int str2Len = strlen(str2);
 80031c8:	6838      	ldr	r0, [r7, #0]
 80031ca:	f7fd f801 	bl	80001d0 <strlen>
 80031ce:	4603      	mov	r3, r0
 80031d0:	613b      	str	r3, [r7, #16]
    int strLen = str1Len + str2Len + 1;
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	3301      	adds	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
    char *str = malloc(strLen);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f8f4 	bl	80033cc <malloc>
 80031e4:	4603      	mov	r3, r0
 80031e6:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < str1Len; i++)
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	e00a      	b.n	8003204 <Append_String+0x50>
        str[i] = str1[i];
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	441a      	add	r2, r3
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	440b      	add	r3, r1
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < str1Len; i++)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3301      	adds	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	429a      	cmp	r2, r3
 800320a:	dbf0      	blt.n	80031ee <Append_String+0x3a>

    for (int i = 0; i < str2Len; i++)
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	e00d      	b.n	800322e <Append_String+0x7a>
        str[(str1Len + i)] = str2[i];
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	441a      	add	r2, r3
 8003218:	6979      	ldr	r1, [r7, #20]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	440b      	add	r3, r1
 800321e:	4619      	mov	r1, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	440b      	add	r3, r1
 8003224:	7812      	ldrb	r2, [r2, #0]
 8003226:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < str2Len; i++)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	3301      	adds	r3, #1
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	429a      	cmp	r2, r3
 8003234:	dbed      	blt.n	8003212 <Append_String+0x5e>

    str[strLen - 1] = '\0';
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3b01      	subs	r3, #1
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	4413      	add	r3, r2
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]

    return str;
 8003242:	68bb      	ldr	r3, [r7, #8]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <Char_To_String>:

char *Char_To_String(char c)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
    char *str = malloc(2);
 8003256:	2002      	movs	r0, #2
 8003258:	f000 f8b8 	bl	80033cc <malloc>
 800325c:	4603      	mov	r3, r0
 800325e:	60fb      	str	r3, [r7, #12]
    str[0] = c;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	79fa      	ldrb	r2, [r7, #7]
 8003264:	701a      	strb	r2, [r3, #0]
    str[1] = '\0';
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3301      	adds	r3, #1
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]

    return str;
 800326e:	68fb      	ldr	r3, [r7, #12]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <Binary_To_Decimal>:

int Binary_To_Decimal(char *bin)
{
 8003278:	b5b0      	push	{r4, r5, r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
    int binLength = strlen(bin);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fc ffa5 	bl	80001d0 <strlen>
 8003286:	4603      	mov	r3, r0
 8003288:	60bb      	str	r3, [r7, #8]
    double dec = 0;
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9c7 2304 	strd	r2, r3, [r7, #16]

    for (int i = 0; i < binLength; ++i)
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e02b      	b.n	80032f4 <Binary_To_Decimal+0x7c>
    {
        dec += (bin[i] - 48) * pow(2, ((binLength - i) - 1));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	3b30      	subs	r3, #48	; 0x30
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd f93c 	bl	8000524 <__aeabi_i2d>
 80032ac:	4604      	mov	r4, r0
 80032ae:	460d      	mov	r5, r1
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd f933 	bl	8000524 <__aeabi_i2d>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	ec43 2b11 	vmov	d1, r2, r3
 80032c6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8003310 <Binary_To_Decimal+0x98>
 80032ca:	f001 f81d 	bl	8004308 <pow>
 80032ce:	ec53 2b10 	vmov	r2, r3, d0
 80032d2:	4620      	mov	r0, r4
 80032d4:	4629      	mov	r1, r5
 80032d6:	f7fd f98f 	bl	80005f8 <__aeabi_dmul>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032e2:	f7fc ffd3 	bl	800028c <__adddf3>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < binLength; ++i)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	dbcf      	blt.n	800329c <Binary_To_Decimal+0x24>
    }

    return (int)dec;
 80032fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003300:	f7fd fc2a 	bl	8000b58 <__aeabi_d2iz>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bdb0      	pop	{r4, r5, r7, pc}
 800330e:	bf00      	nop
 8003310:	00000000 	.word	0x00000000
 8003314:	40000000 	.word	0x40000000

08003318 <Binary_To_ASCII>:

char *Binary_To_ASCII(char *bin)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
    char *ascii = "";
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <Binary_To_ASCII+0x5c>)
 8003322:	617b      	str	r3, [r7, #20]
    int binLen = strlen(bin);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7fc ff53 	bl	80001d0 <strlen>
 800332a:	4603      	mov	r3, r0
 800332c:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < binLen; i += 8)
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	e016      	b.n	8003362 <Binary_To_ASCII+0x4a>
    {
        ascii = Append_String(ascii, Char_To_String((char)Binary_To_Decimal(Get_Sub_String(bin, i, 8))));
 8003334:	2208      	movs	r2, #8
 8003336:	6939      	ldr	r1, [r7, #16]
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff fefb 	bl	8003134 <Get_Sub_String>
 800333e:	4603      	mov	r3, r0
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff99 	bl	8003278 <Binary_To_Decimal>
 8003346:	4603      	mov	r3, r0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ff7e 	bl	800324c <Char_To_String>
 8003350:	4603      	mov	r3, r0
 8003352:	4619      	mov	r1, r3
 8003354:	6978      	ldr	r0, [r7, #20]
 8003356:	f7ff ff2d 	bl	80031b4 <Append_String>
 800335a:	6178      	str	r0, [r7, #20]
    for (int i = 0; i < binLen; i += 8)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	3308      	adds	r3, #8
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	429a      	cmp	r2, r3
 8003368:	dbe4      	blt.n	8003334 <Binary_To_ASCII+0x1c>
    }

    return ascii;
 800336a:	697b      	ldr	r3, [r7, #20]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	08005184 	.word	0x08005184

08003378 <__errno>:
 8003378:	4b01      	ldr	r3, [pc, #4]	; (8003380 <__errno+0x8>)
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	2000000c 	.word	0x2000000c

08003384 <__libc_init_array>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	4d0d      	ldr	r5, [pc, #52]	; (80033bc <__libc_init_array+0x38>)
 8003388:	4c0d      	ldr	r4, [pc, #52]	; (80033c0 <__libc_init_array+0x3c>)
 800338a:	1b64      	subs	r4, r4, r5
 800338c:	10a4      	asrs	r4, r4, #2
 800338e:	2600      	movs	r6, #0
 8003390:	42a6      	cmp	r6, r4
 8003392:	d109      	bne.n	80033a8 <__libc_init_array+0x24>
 8003394:	4d0b      	ldr	r5, [pc, #44]	; (80033c4 <__libc_init_array+0x40>)
 8003396:	4c0c      	ldr	r4, [pc, #48]	; (80033c8 <__libc_init_array+0x44>)
 8003398:	f001 fed0 	bl	800513c <_init>
 800339c:	1b64      	subs	r4, r4, r5
 800339e:	10a4      	asrs	r4, r4, #2
 80033a0:	2600      	movs	r6, #0
 80033a2:	42a6      	cmp	r6, r4
 80033a4:	d105      	bne.n	80033b2 <__libc_init_array+0x2e>
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
 80033a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ac:	4798      	blx	r3
 80033ae:	3601      	adds	r6, #1
 80033b0:	e7ee      	b.n	8003390 <__libc_init_array+0xc>
 80033b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b6:	4798      	blx	r3
 80033b8:	3601      	adds	r6, #1
 80033ba:	e7f2      	b.n	80033a2 <__libc_init_array+0x1e>
 80033bc:	08005270 	.word	0x08005270
 80033c0:	08005270 	.word	0x08005270
 80033c4:	08005270 	.word	0x08005270
 80033c8:	08005274 	.word	0x08005274

080033cc <malloc>:
 80033cc:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <malloc+0xc>)
 80033ce:	4601      	mov	r1, r0
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	f000 b877 	b.w	80034c4 <_malloc_r>
 80033d6:	bf00      	nop
 80033d8:	2000000c 	.word	0x2000000c

080033dc <memset>:
 80033dc:	4402      	add	r2, r0
 80033de:	4603      	mov	r3, r0
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d100      	bne.n	80033e6 <memset+0xa>
 80033e4:	4770      	bx	lr
 80033e6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ea:	e7f9      	b.n	80033e0 <memset+0x4>

080033ec <_free_r>:
 80033ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033ee:	2900      	cmp	r1, #0
 80033f0:	d044      	beq.n	800347c <_free_r+0x90>
 80033f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033f6:	9001      	str	r0, [sp, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f1a1 0404 	sub.w	r4, r1, #4
 80033fe:	bfb8      	it	lt
 8003400:	18e4      	addlt	r4, r4, r3
 8003402:	f000 f9f3 	bl	80037ec <__malloc_lock>
 8003406:	4a1e      	ldr	r2, [pc, #120]	; (8003480 <_free_r+0x94>)
 8003408:	9801      	ldr	r0, [sp, #4]
 800340a:	6813      	ldr	r3, [r2, #0]
 800340c:	b933      	cbnz	r3, 800341c <_free_r+0x30>
 800340e:	6063      	str	r3, [r4, #4]
 8003410:	6014      	str	r4, [r2, #0]
 8003412:	b003      	add	sp, #12
 8003414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003418:	f000 b9ee 	b.w	80037f8 <__malloc_unlock>
 800341c:	42a3      	cmp	r3, r4
 800341e:	d908      	bls.n	8003432 <_free_r+0x46>
 8003420:	6825      	ldr	r5, [r4, #0]
 8003422:	1961      	adds	r1, r4, r5
 8003424:	428b      	cmp	r3, r1
 8003426:	bf01      	itttt	eq
 8003428:	6819      	ldreq	r1, [r3, #0]
 800342a:	685b      	ldreq	r3, [r3, #4]
 800342c:	1949      	addeq	r1, r1, r5
 800342e:	6021      	streq	r1, [r4, #0]
 8003430:	e7ed      	b.n	800340e <_free_r+0x22>
 8003432:	461a      	mov	r2, r3
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	b10b      	cbz	r3, 800343c <_free_r+0x50>
 8003438:	42a3      	cmp	r3, r4
 800343a:	d9fa      	bls.n	8003432 <_free_r+0x46>
 800343c:	6811      	ldr	r1, [r2, #0]
 800343e:	1855      	adds	r5, r2, r1
 8003440:	42a5      	cmp	r5, r4
 8003442:	d10b      	bne.n	800345c <_free_r+0x70>
 8003444:	6824      	ldr	r4, [r4, #0]
 8003446:	4421      	add	r1, r4
 8003448:	1854      	adds	r4, r2, r1
 800344a:	42a3      	cmp	r3, r4
 800344c:	6011      	str	r1, [r2, #0]
 800344e:	d1e0      	bne.n	8003412 <_free_r+0x26>
 8003450:	681c      	ldr	r4, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	6053      	str	r3, [r2, #4]
 8003456:	4421      	add	r1, r4
 8003458:	6011      	str	r1, [r2, #0]
 800345a:	e7da      	b.n	8003412 <_free_r+0x26>
 800345c:	d902      	bls.n	8003464 <_free_r+0x78>
 800345e:	230c      	movs	r3, #12
 8003460:	6003      	str	r3, [r0, #0]
 8003462:	e7d6      	b.n	8003412 <_free_r+0x26>
 8003464:	6825      	ldr	r5, [r4, #0]
 8003466:	1961      	adds	r1, r4, r5
 8003468:	428b      	cmp	r3, r1
 800346a:	bf04      	itt	eq
 800346c:	6819      	ldreq	r1, [r3, #0]
 800346e:	685b      	ldreq	r3, [r3, #4]
 8003470:	6063      	str	r3, [r4, #4]
 8003472:	bf04      	itt	eq
 8003474:	1949      	addeq	r1, r1, r5
 8003476:	6021      	streq	r1, [r4, #0]
 8003478:	6054      	str	r4, [r2, #4]
 800347a:	e7ca      	b.n	8003412 <_free_r+0x26>
 800347c:	b003      	add	sp, #12
 800347e:	bd30      	pop	{r4, r5, pc}
 8003480:	200002fc 	.word	0x200002fc

08003484 <sbrk_aligned>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	4e0e      	ldr	r6, [pc, #56]	; (80034c0 <sbrk_aligned+0x3c>)
 8003488:	460c      	mov	r4, r1
 800348a:	6831      	ldr	r1, [r6, #0]
 800348c:	4605      	mov	r5, r0
 800348e:	b911      	cbnz	r1, 8003496 <sbrk_aligned+0x12>
 8003490:	f000 f8a4 	bl	80035dc <_sbrk_r>
 8003494:	6030      	str	r0, [r6, #0]
 8003496:	4621      	mov	r1, r4
 8003498:	4628      	mov	r0, r5
 800349a:	f000 f89f 	bl	80035dc <_sbrk_r>
 800349e:	1c43      	adds	r3, r0, #1
 80034a0:	d00a      	beq.n	80034b8 <sbrk_aligned+0x34>
 80034a2:	1cc4      	adds	r4, r0, #3
 80034a4:	f024 0403 	bic.w	r4, r4, #3
 80034a8:	42a0      	cmp	r0, r4
 80034aa:	d007      	beq.n	80034bc <sbrk_aligned+0x38>
 80034ac:	1a21      	subs	r1, r4, r0
 80034ae:	4628      	mov	r0, r5
 80034b0:	f000 f894 	bl	80035dc <_sbrk_r>
 80034b4:	3001      	adds	r0, #1
 80034b6:	d101      	bne.n	80034bc <sbrk_aligned+0x38>
 80034b8:	f04f 34ff 	mov.w	r4, #4294967295
 80034bc:	4620      	mov	r0, r4
 80034be:	bd70      	pop	{r4, r5, r6, pc}
 80034c0:	20000300 	.word	0x20000300

080034c4 <_malloc_r>:
 80034c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c8:	1ccd      	adds	r5, r1, #3
 80034ca:	f025 0503 	bic.w	r5, r5, #3
 80034ce:	3508      	adds	r5, #8
 80034d0:	2d0c      	cmp	r5, #12
 80034d2:	bf38      	it	cc
 80034d4:	250c      	movcc	r5, #12
 80034d6:	2d00      	cmp	r5, #0
 80034d8:	4607      	mov	r7, r0
 80034da:	db01      	blt.n	80034e0 <_malloc_r+0x1c>
 80034dc:	42a9      	cmp	r1, r5
 80034de:	d905      	bls.n	80034ec <_malloc_r+0x28>
 80034e0:	230c      	movs	r3, #12
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	2600      	movs	r6, #0
 80034e6:	4630      	mov	r0, r6
 80034e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ec:	4e2e      	ldr	r6, [pc, #184]	; (80035a8 <_malloc_r+0xe4>)
 80034ee:	f000 f97d 	bl	80037ec <__malloc_lock>
 80034f2:	6833      	ldr	r3, [r6, #0]
 80034f4:	461c      	mov	r4, r3
 80034f6:	bb34      	cbnz	r4, 8003546 <_malloc_r+0x82>
 80034f8:	4629      	mov	r1, r5
 80034fa:	4638      	mov	r0, r7
 80034fc:	f7ff ffc2 	bl	8003484 <sbrk_aligned>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	4604      	mov	r4, r0
 8003504:	d14d      	bne.n	80035a2 <_malloc_r+0xde>
 8003506:	6834      	ldr	r4, [r6, #0]
 8003508:	4626      	mov	r6, r4
 800350a:	2e00      	cmp	r6, #0
 800350c:	d140      	bne.n	8003590 <_malloc_r+0xcc>
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	4631      	mov	r1, r6
 8003512:	4638      	mov	r0, r7
 8003514:	eb04 0803 	add.w	r8, r4, r3
 8003518:	f000 f860 	bl	80035dc <_sbrk_r>
 800351c:	4580      	cmp	r8, r0
 800351e:	d13a      	bne.n	8003596 <_malloc_r+0xd2>
 8003520:	6821      	ldr	r1, [r4, #0]
 8003522:	3503      	adds	r5, #3
 8003524:	1a6d      	subs	r5, r5, r1
 8003526:	f025 0503 	bic.w	r5, r5, #3
 800352a:	3508      	adds	r5, #8
 800352c:	2d0c      	cmp	r5, #12
 800352e:	bf38      	it	cc
 8003530:	250c      	movcc	r5, #12
 8003532:	4629      	mov	r1, r5
 8003534:	4638      	mov	r0, r7
 8003536:	f7ff ffa5 	bl	8003484 <sbrk_aligned>
 800353a:	3001      	adds	r0, #1
 800353c:	d02b      	beq.n	8003596 <_malloc_r+0xd2>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	442b      	add	r3, r5
 8003542:	6023      	str	r3, [r4, #0]
 8003544:	e00e      	b.n	8003564 <_malloc_r+0xa0>
 8003546:	6822      	ldr	r2, [r4, #0]
 8003548:	1b52      	subs	r2, r2, r5
 800354a:	d41e      	bmi.n	800358a <_malloc_r+0xc6>
 800354c:	2a0b      	cmp	r2, #11
 800354e:	d916      	bls.n	800357e <_malloc_r+0xba>
 8003550:	1961      	adds	r1, r4, r5
 8003552:	42a3      	cmp	r3, r4
 8003554:	6025      	str	r5, [r4, #0]
 8003556:	bf18      	it	ne
 8003558:	6059      	strne	r1, [r3, #4]
 800355a:	6863      	ldr	r3, [r4, #4]
 800355c:	bf08      	it	eq
 800355e:	6031      	streq	r1, [r6, #0]
 8003560:	5162      	str	r2, [r4, r5]
 8003562:	604b      	str	r3, [r1, #4]
 8003564:	4638      	mov	r0, r7
 8003566:	f104 060b 	add.w	r6, r4, #11
 800356a:	f000 f945 	bl	80037f8 <__malloc_unlock>
 800356e:	f026 0607 	bic.w	r6, r6, #7
 8003572:	1d23      	adds	r3, r4, #4
 8003574:	1af2      	subs	r2, r6, r3
 8003576:	d0b6      	beq.n	80034e6 <_malloc_r+0x22>
 8003578:	1b9b      	subs	r3, r3, r6
 800357a:	50a3      	str	r3, [r4, r2]
 800357c:	e7b3      	b.n	80034e6 <_malloc_r+0x22>
 800357e:	6862      	ldr	r2, [r4, #4]
 8003580:	42a3      	cmp	r3, r4
 8003582:	bf0c      	ite	eq
 8003584:	6032      	streq	r2, [r6, #0]
 8003586:	605a      	strne	r2, [r3, #4]
 8003588:	e7ec      	b.n	8003564 <_malloc_r+0xa0>
 800358a:	4623      	mov	r3, r4
 800358c:	6864      	ldr	r4, [r4, #4]
 800358e:	e7b2      	b.n	80034f6 <_malloc_r+0x32>
 8003590:	4634      	mov	r4, r6
 8003592:	6876      	ldr	r6, [r6, #4]
 8003594:	e7b9      	b.n	800350a <_malloc_r+0x46>
 8003596:	230c      	movs	r3, #12
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4638      	mov	r0, r7
 800359c:	f000 f92c 	bl	80037f8 <__malloc_unlock>
 80035a0:	e7a1      	b.n	80034e6 <_malloc_r+0x22>
 80035a2:	6025      	str	r5, [r4, #0]
 80035a4:	e7de      	b.n	8003564 <_malloc_r+0xa0>
 80035a6:	bf00      	nop
 80035a8:	200002fc 	.word	0x200002fc

080035ac <iprintf>:
 80035ac:	b40f      	push	{r0, r1, r2, r3}
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <iprintf+0x2c>)
 80035b0:	b513      	push	{r0, r1, r4, lr}
 80035b2:	681c      	ldr	r4, [r3, #0]
 80035b4:	b124      	cbz	r4, 80035c0 <iprintf+0x14>
 80035b6:	69a3      	ldr	r3, [r4, #24]
 80035b8:	b913      	cbnz	r3, 80035c0 <iprintf+0x14>
 80035ba:	4620      	mov	r0, r4
 80035bc:	f000 f876 	bl	80036ac <__sinit>
 80035c0:	ab05      	add	r3, sp, #20
 80035c2:	9a04      	ldr	r2, [sp, #16]
 80035c4:	68a1      	ldr	r1, [r4, #8]
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	4620      	mov	r0, r4
 80035ca:	f000 f945 	bl	8003858 <_vfiprintf_r>
 80035ce:	b002      	add	sp, #8
 80035d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d4:	b004      	add	sp, #16
 80035d6:	4770      	bx	lr
 80035d8:	2000000c 	.word	0x2000000c

080035dc <_sbrk_r>:
 80035dc:	b538      	push	{r3, r4, r5, lr}
 80035de:	4d06      	ldr	r5, [pc, #24]	; (80035f8 <_sbrk_r+0x1c>)
 80035e0:	2300      	movs	r3, #0
 80035e2:	4604      	mov	r4, r0
 80035e4:	4608      	mov	r0, r1
 80035e6:	602b      	str	r3, [r5, #0]
 80035e8:	f7fd ffcc 	bl	8001584 <_sbrk>
 80035ec:	1c43      	adds	r3, r0, #1
 80035ee:	d102      	bne.n	80035f6 <_sbrk_r+0x1a>
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	b103      	cbz	r3, 80035f6 <_sbrk_r+0x1a>
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
 80035f8:	20000308 	.word	0x20000308

080035fc <std>:
 80035fc:	2300      	movs	r3, #0
 80035fe:	b510      	push	{r4, lr}
 8003600:	4604      	mov	r4, r0
 8003602:	e9c0 3300 	strd	r3, r3, [r0]
 8003606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800360a:	6083      	str	r3, [r0, #8]
 800360c:	8181      	strh	r1, [r0, #12]
 800360e:	6643      	str	r3, [r0, #100]	; 0x64
 8003610:	81c2      	strh	r2, [r0, #14]
 8003612:	6183      	str	r3, [r0, #24]
 8003614:	4619      	mov	r1, r3
 8003616:	2208      	movs	r2, #8
 8003618:	305c      	adds	r0, #92	; 0x5c
 800361a:	f7ff fedf 	bl	80033dc <memset>
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <std+0x38>)
 8003620:	6263      	str	r3, [r4, #36]	; 0x24
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <std+0x3c>)
 8003624:	62a3      	str	r3, [r4, #40]	; 0x28
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <std+0x40>)
 8003628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <std+0x44>)
 800362c:	6224      	str	r4, [r4, #32]
 800362e:	6323      	str	r3, [r4, #48]	; 0x30
 8003630:	bd10      	pop	{r4, pc}
 8003632:	bf00      	nop
 8003634:	08003de1 	.word	0x08003de1
 8003638:	08003e03 	.word	0x08003e03
 800363c:	08003e3b 	.word	0x08003e3b
 8003640:	08003e5f 	.word	0x08003e5f

08003644 <_cleanup_r>:
 8003644:	4901      	ldr	r1, [pc, #4]	; (800364c <_cleanup_r+0x8>)
 8003646:	f000 b8af 	b.w	80037a8 <_fwalk_reent>
 800364a:	bf00      	nop
 800364c:	08004139 	.word	0x08004139

08003650 <__sfmoreglue>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	2268      	movs	r2, #104	; 0x68
 8003654:	1e4d      	subs	r5, r1, #1
 8003656:	4355      	muls	r5, r2
 8003658:	460e      	mov	r6, r1
 800365a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800365e:	f7ff ff31 	bl	80034c4 <_malloc_r>
 8003662:	4604      	mov	r4, r0
 8003664:	b140      	cbz	r0, 8003678 <__sfmoreglue+0x28>
 8003666:	2100      	movs	r1, #0
 8003668:	e9c0 1600 	strd	r1, r6, [r0]
 800366c:	300c      	adds	r0, #12
 800366e:	60a0      	str	r0, [r4, #8]
 8003670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003674:	f7ff feb2 	bl	80033dc <memset>
 8003678:	4620      	mov	r0, r4
 800367a:	bd70      	pop	{r4, r5, r6, pc}

0800367c <__sfp_lock_acquire>:
 800367c:	4801      	ldr	r0, [pc, #4]	; (8003684 <__sfp_lock_acquire+0x8>)
 800367e:	f000 b8b3 	b.w	80037e8 <__retarget_lock_acquire_recursive>
 8003682:	bf00      	nop
 8003684:	20000305 	.word	0x20000305

08003688 <__sfp_lock_release>:
 8003688:	4801      	ldr	r0, [pc, #4]	; (8003690 <__sfp_lock_release+0x8>)
 800368a:	f000 b8ae 	b.w	80037ea <__retarget_lock_release_recursive>
 800368e:	bf00      	nop
 8003690:	20000305 	.word	0x20000305

08003694 <__sinit_lock_acquire>:
 8003694:	4801      	ldr	r0, [pc, #4]	; (800369c <__sinit_lock_acquire+0x8>)
 8003696:	f000 b8a7 	b.w	80037e8 <__retarget_lock_acquire_recursive>
 800369a:	bf00      	nop
 800369c:	20000306 	.word	0x20000306

080036a0 <__sinit_lock_release>:
 80036a0:	4801      	ldr	r0, [pc, #4]	; (80036a8 <__sinit_lock_release+0x8>)
 80036a2:	f000 b8a2 	b.w	80037ea <__retarget_lock_release_recursive>
 80036a6:	bf00      	nop
 80036a8:	20000306 	.word	0x20000306

080036ac <__sinit>:
 80036ac:	b510      	push	{r4, lr}
 80036ae:	4604      	mov	r4, r0
 80036b0:	f7ff fff0 	bl	8003694 <__sinit_lock_acquire>
 80036b4:	69a3      	ldr	r3, [r4, #24]
 80036b6:	b11b      	cbz	r3, 80036c0 <__sinit+0x14>
 80036b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036bc:	f7ff bff0 	b.w	80036a0 <__sinit_lock_release>
 80036c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036c4:	6523      	str	r3, [r4, #80]	; 0x50
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <__sinit+0x68>)
 80036c8:	4a13      	ldr	r2, [pc, #76]	; (8003718 <__sinit+0x6c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80036ce:	42a3      	cmp	r3, r4
 80036d0:	bf04      	itt	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	61a3      	streq	r3, [r4, #24]
 80036d6:	4620      	mov	r0, r4
 80036d8:	f000 f820 	bl	800371c <__sfp>
 80036dc:	6060      	str	r0, [r4, #4]
 80036de:	4620      	mov	r0, r4
 80036e0:	f000 f81c 	bl	800371c <__sfp>
 80036e4:	60a0      	str	r0, [r4, #8]
 80036e6:	4620      	mov	r0, r4
 80036e8:	f000 f818 	bl	800371c <__sfp>
 80036ec:	2200      	movs	r2, #0
 80036ee:	60e0      	str	r0, [r4, #12]
 80036f0:	2104      	movs	r1, #4
 80036f2:	6860      	ldr	r0, [r4, #4]
 80036f4:	f7ff ff82 	bl	80035fc <std>
 80036f8:	68a0      	ldr	r0, [r4, #8]
 80036fa:	2201      	movs	r2, #1
 80036fc:	2109      	movs	r1, #9
 80036fe:	f7ff ff7d 	bl	80035fc <std>
 8003702:	68e0      	ldr	r0, [r4, #12]
 8003704:	2202      	movs	r2, #2
 8003706:	2112      	movs	r1, #18
 8003708:	f7ff ff78 	bl	80035fc <std>
 800370c:	2301      	movs	r3, #1
 800370e:	61a3      	str	r3, [r4, #24]
 8003710:	e7d2      	b.n	80036b8 <__sinit+0xc>
 8003712:	bf00      	nop
 8003714:	080051a0 	.word	0x080051a0
 8003718:	08003645 	.word	0x08003645

0800371c <__sfp>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	4607      	mov	r7, r0
 8003720:	f7ff ffac 	bl	800367c <__sfp_lock_acquire>
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <__sfp+0x84>)
 8003726:	681e      	ldr	r6, [r3, #0]
 8003728:	69b3      	ldr	r3, [r6, #24]
 800372a:	b913      	cbnz	r3, 8003732 <__sfp+0x16>
 800372c:	4630      	mov	r0, r6
 800372e:	f7ff ffbd 	bl	80036ac <__sinit>
 8003732:	3648      	adds	r6, #72	; 0x48
 8003734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003738:	3b01      	subs	r3, #1
 800373a:	d503      	bpl.n	8003744 <__sfp+0x28>
 800373c:	6833      	ldr	r3, [r6, #0]
 800373e:	b30b      	cbz	r3, 8003784 <__sfp+0x68>
 8003740:	6836      	ldr	r6, [r6, #0]
 8003742:	e7f7      	b.n	8003734 <__sfp+0x18>
 8003744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003748:	b9d5      	cbnz	r5, 8003780 <__sfp+0x64>
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <__sfp+0x88>)
 800374c:	60e3      	str	r3, [r4, #12]
 800374e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003752:	6665      	str	r5, [r4, #100]	; 0x64
 8003754:	f000 f847 	bl	80037e6 <__retarget_lock_init_recursive>
 8003758:	f7ff ff96 	bl	8003688 <__sfp_lock_release>
 800375c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003760:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003764:	6025      	str	r5, [r4, #0]
 8003766:	61a5      	str	r5, [r4, #24]
 8003768:	2208      	movs	r2, #8
 800376a:	4629      	mov	r1, r5
 800376c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003770:	f7ff fe34 	bl	80033dc <memset>
 8003774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800377c:	4620      	mov	r0, r4
 800377e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003780:	3468      	adds	r4, #104	; 0x68
 8003782:	e7d9      	b.n	8003738 <__sfp+0x1c>
 8003784:	2104      	movs	r1, #4
 8003786:	4638      	mov	r0, r7
 8003788:	f7ff ff62 	bl	8003650 <__sfmoreglue>
 800378c:	4604      	mov	r4, r0
 800378e:	6030      	str	r0, [r6, #0]
 8003790:	2800      	cmp	r0, #0
 8003792:	d1d5      	bne.n	8003740 <__sfp+0x24>
 8003794:	f7ff ff78 	bl	8003688 <__sfp_lock_release>
 8003798:	230c      	movs	r3, #12
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	e7ee      	b.n	800377c <__sfp+0x60>
 800379e:	bf00      	nop
 80037a0:	080051a0 	.word	0x080051a0
 80037a4:	ffff0001 	.word	0xffff0001

080037a8 <_fwalk_reent>:
 80037a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037ac:	4606      	mov	r6, r0
 80037ae:	4688      	mov	r8, r1
 80037b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037b4:	2700      	movs	r7, #0
 80037b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037ba:	f1b9 0901 	subs.w	r9, r9, #1
 80037be:	d505      	bpl.n	80037cc <_fwalk_reent+0x24>
 80037c0:	6824      	ldr	r4, [r4, #0]
 80037c2:	2c00      	cmp	r4, #0
 80037c4:	d1f7      	bne.n	80037b6 <_fwalk_reent+0xe>
 80037c6:	4638      	mov	r0, r7
 80037c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037cc:	89ab      	ldrh	r3, [r5, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d907      	bls.n	80037e2 <_fwalk_reent+0x3a>
 80037d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037d6:	3301      	adds	r3, #1
 80037d8:	d003      	beq.n	80037e2 <_fwalk_reent+0x3a>
 80037da:	4629      	mov	r1, r5
 80037dc:	4630      	mov	r0, r6
 80037de:	47c0      	blx	r8
 80037e0:	4307      	orrs	r7, r0
 80037e2:	3568      	adds	r5, #104	; 0x68
 80037e4:	e7e9      	b.n	80037ba <_fwalk_reent+0x12>

080037e6 <__retarget_lock_init_recursive>:
 80037e6:	4770      	bx	lr

080037e8 <__retarget_lock_acquire_recursive>:
 80037e8:	4770      	bx	lr

080037ea <__retarget_lock_release_recursive>:
 80037ea:	4770      	bx	lr

080037ec <__malloc_lock>:
 80037ec:	4801      	ldr	r0, [pc, #4]	; (80037f4 <__malloc_lock+0x8>)
 80037ee:	f7ff bffb 	b.w	80037e8 <__retarget_lock_acquire_recursive>
 80037f2:	bf00      	nop
 80037f4:	20000304 	.word	0x20000304

080037f8 <__malloc_unlock>:
 80037f8:	4801      	ldr	r0, [pc, #4]	; (8003800 <__malloc_unlock+0x8>)
 80037fa:	f7ff bff6 	b.w	80037ea <__retarget_lock_release_recursive>
 80037fe:	bf00      	nop
 8003800:	20000304 	.word	0x20000304

08003804 <__sfputc_r>:
 8003804:	6893      	ldr	r3, [r2, #8]
 8003806:	3b01      	subs	r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	b410      	push	{r4}
 800380c:	6093      	str	r3, [r2, #8]
 800380e:	da08      	bge.n	8003822 <__sfputc_r+0x1e>
 8003810:	6994      	ldr	r4, [r2, #24]
 8003812:	42a3      	cmp	r3, r4
 8003814:	db01      	blt.n	800381a <__sfputc_r+0x16>
 8003816:	290a      	cmp	r1, #10
 8003818:	d103      	bne.n	8003822 <__sfputc_r+0x1e>
 800381a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800381e:	f000 bb23 	b.w	8003e68 <__swbuf_r>
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	1c58      	adds	r0, r3, #1
 8003826:	6010      	str	r0, [r2, #0]
 8003828:	7019      	strb	r1, [r3, #0]
 800382a:	4608      	mov	r0, r1
 800382c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003830:	4770      	bx	lr

08003832 <__sfputs_r>:
 8003832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003834:	4606      	mov	r6, r0
 8003836:	460f      	mov	r7, r1
 8003838:	4614      	mov	r4, r2
 800383a:	18d5      	adds	r5, r2, r3
 800383c:	42ac      	cmp	r4, r5
 800383e:	d101      	bne.n	8003844 <__sfputs_r+0x12>
 8003840:	2000      	movs	r0, #0
 8003842:	e007      	b.n	8003854 <__sfputs_r+0x22>
 8003844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003848:	463a      	mov	r2, r7
 800384a:	4630      	mov	r0, r6
 800384c:	f7ff ffda 	bl	8003804 <__sfputc_r>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d1f3      	bne.n	800383c <__sfputs_r+0xa>
 8003854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003858 <_vfiprintf_r>:
 8003858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385c:	460d      	mov	r5, r1
 800385e:	b09d      	sub	sp, #116	; 0x74
 8003860:	4614      	mov	r4, r2
 8003862:	4698      	mov	r8, r3
 8003864:	4606      	mov	r6, r0
 8003866:	b118      	cbz	r0, 8003870 <_vfiprintf_r+0x18>
 8003868:	6983      	ldr	r3, [r0, #24]
 800386a:	b90b      	cbnz	r3, 8003870 <_vfiprintf_r+0x18>
 800386c:	f7ff ff1e 	bl	80036ac <__sinit>
 8003870:	4b89      	ldr	r3, [pc, #548]	; (8003a98 <_vfiprintf_r+0x240>)
 8003872:	429d      	cmp	r5, r3
 8003874:	d11b      	bne.n	80038ae <_vfiprintf_r+0x56>
 8003876:	6875      	ldr	r5, [r6, #4]
 8003878:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800387a:	07d9      	lsls	r1, r3, #31
 800387c:	d405      	bmi.n	800388a <_vfiprintf_r+0x32>
 800387e:	89ab      	ldrh	r3, [r5, #12]
 8003880:	059a      	lsls	r2, r3, #22
 8003882:	d402      	bmi.n	800388a <_vfiprintf_r+0x32>
 8003884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003886:	f7ff ffaf 	bl	80037e8 <__retarget_lock_acquire_recursive>
 800388a:	89ab      	ldrh	r3, [r5, #12]
 800388c:	071b      	lsls	r3, r3, #28
 800388e:	d501      	bpl.n	8003894 <_vfiprintf_r+0x3c>
 8003890:	692b      	ldr	r3, [r5, #16]
 8003892:	b9eb      	cbnz	r3, 80038d0 <_vfiprintf_r+0x78>
 8003894:	4629      	mov	r1, r5
 8003896:	4630      	mov	r0, r6
 8003898:	f000 fb4a 	bl	8003f30 <__swsetup_r>
 800389c:	b1c0      	cbz	r0, 80038d0 <_vfiprintf_r+0x78>
 800389e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038a0:	07dc      	lsls	r4, r3, #31
 80038a2:	d50e      	bpl.n	80038c2 <_vfiprintf_r+0x6a>
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295
 80038a8:	b01d      	add	sp, #116	; 0x74
 80038aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ae:	4b7b      	ldr	r3, [pc, #492]	; (8003a9c <_vfiprintf_r+0x244>)
 80038b0:	429d      	cmp	r5, r3
 80038b2:	d101      	bne.n	80038b8 <_vfiprintf_r+0x60>
 80038b4:	68b5      	ldr	r5, [r6, #8]
 80038b6:	e7df      	b.n	8003878 <_vfiprintf_r+0x20>
 80038b8:	4b79      	ldr	r3, [pc, #484]	; (8003aa0 <_vfiprintf_r+0x248>)
 80038ba:	429d      	cmp	r5, r3
 80038bc:	bf08      	it	eq
 80038be:	68f5      	ldreq	r5, [r6, #12]
 80038c0:	e7da      	b.n	8003878 <_vfiprintf_r+0x20>
 80038c2:	89ab      	ldrh	r3, [r5, #12]
 80038c4:	0598      	lsls	r0, r3, #22
 80038c6:	d4ed      	bmi.n	80038a4 <_vfiprintf_r+0x4c>
 80038c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ca:	f7ff ff8e 	bl	80037ea <__retarget_lock_release_recursive>
 80038ce:	e7e9      	b.n	80038a4 <_vfiprintf_r+0x4c>
 80038d0:	2300      	movs	r3, #0
 80038d2:	9309      	str	r3, [sp, #36]	; 0x24
 80038d4:	2320      	movs	r3, #32
 80038d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038da:	f8cd 800c 	str.w	r8, [sp, #12]
 80038de:	2330      	movs	r3, #48	; 0x30
 80038e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003aa4 <_vfiprintf_r+0x24c>
 80038e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038e8:	f04f 0901 	mov.w	r9, #1
 80038ec:	4623      	mov	r3, r4
 80038ee:	469a      	mov	sl, r3
 80038f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038f4:	b10a      	cbz	r2, 80038fa <_vfiprintf_r+0xa2>
 80038f6:	2a25      	cmp	r2, #37	; 0x25
 80038f8:	d1f9      	bne.n	80038ee <_vfiprintf_r+0x96>
 80038fa:	ebba 0b04 	subs.w	fp, sl, r4
 80038fe:	d00b      	beq.n	8003918 <_vfiprintf_r+0xc0>
 8003900:	465b      	mov	r3, fp
 8003902:	4622      	mov	r2, r4
 8003904:	4629      	mov	r1, r5
 8003906:	4630      	mov	r0, r6
 8003908:	f7ff ff93 	bl	8003832 <__sfputs_r>
 800390c:	3001      	adds	r0, #1
 800390e:	f000 80aa 	beq.w	8003a66 <_vfiprintf_r+0x20e>
 8003912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003914:	445a      	add	r2, fp
 8003916:	9209      	str	r2, [sp, #36]	; 0x24
 8003918:	f89a 3000 	ldrb.w	r3, [sl]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80a2 	beq.w	8003a66 <_vfiprintf_r+0x20e>
 8003922:	2300      	movs	r3, #0
 8003924:	f04f 32ff 	mov.w	r2, #4294967295
 8003928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800392c:	f10a 0a01 	add.w	sl, sl, #1
 8003930:	9304      	str	r3, [sp, #16]
 8003932:	9307      	str	r3, [sp, #28]
 8003934:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003938:	931a      	str	r3, [sp, #104]	; 0x68
 800393a:	4654      	mov	r4, sl
 800393c:	2205      	movs	r2, #5
 800393e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003942:	4858      	ldr	r0, [pc, #352]	; (8003aa4 <_vfiprintf_r+0x24c>)
 8003944:	f7fc fc4c 	bl	80001e0 <memchr>
 8003948:	9a04      	ldr	r2, [sp, #16]
 800394a:	b9d8      	cbnz	r0, 8003984 <_vfiprintf_r+0x12c>
 800394c:	06d1      	lsls	r1, r2, #27
 800394e:	bf44      	itt	mi
 8003950:	2320      	movmi	r3, #32
 8003952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003956:	0713      	lsls	r3, r2, #28
 8003958:	bf44      	itt	mi
 800395a:	232b      	movmi	r3, #43	; 0x2b
 800395c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003960:	f89a 3000 	ldrb.w	r3, [sl]
 8003964:	2b2a      	cmp	r3, #42	; 0x2a
 8003966:	d015      	beq.n	8003994 <_vfiprintf_r+0x13c>
 8003968:	9a07      	ldr	r2, [sp, #28]
 800396a:	4654      	mov	r4, sl
 800396c:	2000      	movs	r0, #0
 800396e:	f04f 0c0a 	mov.w	ip, #10
 8003972:	4621      	mov	r1, r4
 8003974:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003978:	3b30      	subs	r3, #48	; 0x30
 800397a:	2b09      	cmp	r3, #9
 800397c:	d94e      	bls.n	8003a1c <_vfiprintf_r+0x1c4>
 800397e:	b1b0      	cbz	r0, 80039ae <_vfiprintf_r+0x156>
 8003980:	9207      	str	r2, [sp, #28]
 8003982:	e014      	b.n	80039ae <_vfiprintf_r+0x156>
 8003984:	eba0 0308 	sub.w	r3, r0, r8
 8003988:	fa09 f303 	lsl.w	r3, r9, r3
 800398c:	4313      	orrs	r3, r2
 800398e:	9304      	str	r3, [sp, #16]
 8003990:	46a2      	mov	sl, r4
 8003992:	e7d2      	b.n	800393a <_vfiprintf_r+0xe2>
 8003994:	9b03      	ldr	r3, [sp, #12]
 8003996:	1d19      	adds	r1, r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	9103      	str	r1, [sp, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	bfbb      	ittet	lt
 80039a0:	425b      	neglt	r3, r3
 80039a2:	f042 0202 	orrlt.w	r2, r2, #2
 80039a6:	9307      	strge	r3, [sp, #28]
 80039a8:	9307      	strlt	r3, [sp, #28]
 80039aa:	bfb8      	it	lt
 80039ac:	9204      	strlt	r2, [sp, #16]
 80039ae:	7823      	ldrb	r3, [r4, #0]
 80039b0:	2b2e      	cmp	r3, #46	; 0x2e
 80039b2:	d10c      	bne.n	80039ce <_vfiprintf_r+0x176>
 80039b4:	7863      	ldrb	r3, [r4, #1]
 80039b6:	2b2a      	cmp	r3, #42	; 0x2a
 80039b8:	d135      	bne.n	8003a26 <_vfiprintf_r+0x1ce>
 80039ba:	9b03      	ldr	r3, [sp, #12]
 80039bc:	1d1a      	adds	r2, r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	9203      	str	r2, [sp, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bfb8      	it	lt
 80039c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80039ca:	3402      	adds	r4, #2
 80039cc:	9305      	str	r3, [sp, #20]
 80039ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ab4 <_vfiprintf_r+0x25c>
 80039d2:	7821      	ldrb	r1, [r4, #0]
 80039d4:	2203      	movs	r2, #3
 80039d6:	4650      	mov	r0, sl
 80039d8:	f7fc fc02 	bl	80001e0 <memchr>
 80039dc:	b140      	cbz	r0, 80039f0 <_vfiprintf_r+0x198>
 80039de:	2340      	movs	r3, #64	; 0x40
 80039e0:	eba0 000a 	sub.w	r0, r0, sl
 80039e4:	fa03 f000 	lsl.w	r0, r3, r0
 80039e8:	9b04      	ldr	r3, [sp, #16]
 80039ea:	4303      	orrs	r3, r0
 80039ec:	3401      	adds	r4, #1
 80039ee:	9304      	str	r3, [sp, #16]
 80039f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f4:	482c      	ldr	r0, [pc, #176]	; (8003aa8 <_vfiprintf_r+0x250>)
 80039f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039fa:	2206      	movs	r2, #6
 80039fc:	f7fc fbf0 	bl	80001e0 <memchr>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d03f      	beq.n	8003a84 <_vfiprintf_r+0x22c>
 8003a04:	4b29      	ldr	r3, [pc, #164]	; (8003aac <_vfiprintf_r+0x254>)
 8003a06:	bb1b      	cbnz	r3, 8003a50 <_vfiprintf_r+0x1f8>
 8003a08:	9b03      	ldr	r3, [sp, #12]
 8003a0a:	3307      	adds	r3, #7
 8003a0c:	f023 0307 	bic.w	r3, r3, #7
 8003a10:	3308      	adds	r3, #8
 8003a12:	9303      	str	r3, [sp, #12]
 8003a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a16:	443b      	add	r3, r7
 8003a18:	9309      	str	r3, [sp, #36]	; 0x24
 8003a1a:	e767      	b.n	80038ec <_vfiprintf_r+0x94>
 8003a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a20:	460c      	mov	r4, r1
 8003a22:	2001      	movs	r0, #1
 8003a24:	e7a5      	b.n	8003972 <_vfiprintf_r+0x11a>
 8003a26:	2300      	movs	r3, #0
 8003a28:	3401      	adds	r4, #1
 8003a2a:	9305      	str	r3, [sp, #20]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f04f 0c0a 	mov.w	ip, #10
 8003a32:	4620      	mov	r0, r4
 8003a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a38:	3a30      	subs	r2, #48	; 0x30
 8003a3a:	2a09      	cmp	r2, #9
 8003a3c:	d903      	bls.n	8003a46 <_vfiprintf_r+0x1ee>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0c5      	beq.n	80039ce <_vfiprintf_r+0x176>
 8003a42:	9105      	str	r1, [sp, #20]
 8003a44:	e7c3      	b.n	80039ce <_vfiprintf_r+0x176>
 8003a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e7f0      	b.n	8003a32 <_vfiprintf_r+0x1da>
 8003a50:	ab03      	add	r3, sp, #12
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	462a      	mov	r2, r5
 8003a56:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <_vfiprintf_r+0x258>)
 8003a58:	a904      	add	r1, sp, #16
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f3af 8000 	nop.w
 8003a60:	4607      	mov	r7, r0
 8003a62:	1c78      	adds	r0, r7, #1
 8003a64:	d1d6      	bne.n	8003a14 <_vfiprintf_r+0x1bc>
 8003a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a68:	07d9      	lsls	r1, r3, #31
 8003a6a:	d405      	bmi.n	8003a78 <_vfiprintf_r+0x220>
 8003a6c:	89ab      	ldrh	r3, [r5, #12]
 8003a6e:	059a      	lsls	r2, r3, #22
 8003a70:	d402      	bmi.n	8003a78 <_vfiprintf_r+0x220>
 8003a72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a74:	f7ff feb9 	bl	80037ea <__retarget_lock_release_recursive>
 8003a78:	89ab      	ldrh	r3, [r5, #12]
 8003a7a:	065b      	lsls	r3, r3, #25
 8003a7c:	f53f af12 	bmi.w	80038a4 <_vfiprintf_r+0x4c>
 8003a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a82:	e711      	b.n	80038a8 <_vfiprintf_r+0x50>
 8003a84:	ab03      	add	r3, sp, #12
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	462a      	mov	r2, r5
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <_vfiprintf_r+0x258>)
 8003a8c:	a904      	add	r1, sp, #16
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f000 f880 	bl	8003b94 <_printf_i>
 8003a94:	e7e4      	b.n	8003a60 <_vfiprintf_r+0x208>
 8003a96:	bf00      	nop
 8003a98:	080051c4 	.word	0x080051c4
 8003a9c:	080051e4 	.word	0x080051e4
 8003aa0:	080051a4 	.word	0x080051a4
 8003aa4:	08005204 	.word	0x08005204
 8003aa8:	0800520e 	.word	0x0800520e
 8003aac:	00000000 	.word	0x00000000
 8003ab0:	08003833 	.word	0x08003833
 8003ab4:	0800520a 	.word	0x0800520a

08003ab8 <_printf_common>:
 8003ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003abc:	4616      	mov	r6, r2
 8003abe:	4699      	mov	r9, r3
 8003ac0:	688a      	ldr	r2, [r1, #8]
 8003ac2:	690b      	ldr	r3, [r1, #16]
 8003ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bfb8      	it	lt
 8003acc:	4613      	movlt	r3, r2
 8003ace:	6033      	str	r3, [r6, #0]
 8003ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	b10a      	cbz	r2, 8003ade <_printf_common+0x26>
 8003ada:	3301      	adds	r3, #1
 8003adc:	6033      	str	r3, [r6, #0]
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	0699      	lsls	r1, r3, #26
 8003ae2:	bf42      	ittt	mi
 8003ae4:	6833      	ldrmi	r3, [r6, #0]
 8003ae6:	3302      	addmi	r3, #2
 8003ae8:	6033      	strmi	r3, [r6, #0]
 8003aea:	6825      	ldr	r5, [r4, #0]
 8003aec:	f015 0506 	ands.w	r5, r5, #6
 8003af0:	d106      	bne.n	8003b00 <_printf_common+0x48>
 8003af2:	f104 0a19 	add.w	sl, r4, #25
 8003af6:	68e3      	ldr	r3, [r4, #12]
 8003af8:	6832      	ldr	r2, [r6, #0]
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	42ab      	cmp	r3, r5
 8003afe:	dc26      	bgt.n	8003b4e <_printf_common+0x96>
 8003b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b04:	1e13      	subs	r3, r2, #0
 8003b06:	6822      	ldr	r2, [r4, #0]
 8003b08:	bf18      	it	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	0692      	lsls	r2, r2, #26
 8003b0e:	d42b      	bmi.n	8003b68 <_printf_common+0xb0>
 8003b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b14:	4649      	mov	r1, r9
 8003b16:	4638      	mov	r0, r7
 8003b18:	47c0      	blx	r8
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d01e      	beq.n	8003b5c <_printf_common+0xa4>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	68e5      	ldr	r5, [r4, #12]
 8003b22:	6832      	ldr	r2, [r6, #0]
 8003b24:	f003 0306 	and.w	r3, r3, #6
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	bf08      	it	eq
 8003b2c:	1aad      	subeq	r5, r5, r2
 8003b2e:	68a3      	ldr	r3, [r4, #8]
 8003b30:	6922      	ldr	r2, [r4, #16]
 8003b32:	bf0c      	ite	eq
 8003b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b38:	2500      	movne	r5, #0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bfc4      	itt	gt
 8003b3e:	1a9b      	subgt	r3, r3, r2
 8003b40:	18ed      	addgt	r5, r5, r3
 8003b42:	2600      	movs	r6, #0
 8003b44:	341a      	adds	r4, #26
 8003b46:	42b5      	cmp	r5, r6
 8003b48:	d11a      	bne.n	8003b80 <_printf_common+0xc8>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e008      	b.n	8003b60 <_printf_common+0xa8>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4652      	mov	r2, sl
 8003b52:	4649      	mov	r1, r9
 8003b54:	4638      	mov	r0, r7
 8003b56:	47c0      	blx	r8
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d103      	bne.n	8003b64 <_printf_common+0xac>
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	3501      	adds	r5, #1
 8003b66:	e7c6      	b.n	8003af6 <_printf_common+0x3e>
 8003b68:	18e1      	adds	r1, r4, r3
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	2030      	movs	r0, #48	; 0x30
 8003b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b72:	4422      	add	r2, r4
 8003b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	e7c7      	b.n	8003b10 <_printf_common+0x58>
 8003b80:	2301      	movs	r3, #1
 8003b82:	4622      	mov	r2, r4
 8003b84:	4649      	mov	r1, r9
 8003b86:	4638      	mov	r0, r7
 8003b88:	47c0      	blx	r8
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	d0e6      	beq.n	8003b5c <_printf_common+0xa4>
 8003b8e:	3601      	adds	r6, #1
 8003b90:	e7d9      	b.n	8003b46 <_printf_common+0x8e>
	...

08003b94 <_printf_i>:
 8003b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	7e0f      	ldrb	r7, [r1, #24]
 8003b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b9c:	2f78      	cmp	r7, #120	; 0x78
 8003b9e:	4691      	mov	r9, r2
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	469a      	mov	sl, r3
 8003ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003baa:	d807      	bhi.n	8003bbc <_printf_i+0x28>
 8003bac:	2f62      	cmp	r7, #98	; 0x62
 8003bae:	d80a      	bhi.n	8003bc6 <_printf_i+0x32>
 8003bb0:	2f00      	cmp	r7, #0
 8003bb2:	f000 80d8 	beq.w	8003d66 <_printf_i+0x1d2>
 8003bb6:	2f58      	cmp	r7, #88	; 0x58
 8003bb8:	f000 80a3 	beq.w	8003d02 <_printf_i+0x16e>
 8003bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bc4:	e03a      	b.n	8003c3c <_printf_i+0xa8>
 8003bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bca:	2b15      	cmp	r3, #21
 8003bcc:	d8f6      	bhi.n	8003bbc <_printf_i+0x28>
 8003bce:	a101      	add	r1, pc, #4	; (adr r1, 8003bd4 <_printf_i+0x40>)
 8003bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bd4:	08003c2d 	.word	0x08003c2d
 8003bd8:	08003c41 	.word	0x08003c41
 8003bdc:	08003bbd 	.word	0x08003bbd
 8003be0:	08003bbd 	.word	0x08003bbd
 8003be4:	08003bbd 	.word	0x08003bbd
 8003be8:	08003bbd 	.word	0x08003bbd
 8003bec:	08003c41 	.word	0x08003c41
 8003bf0:	08003bbd 	.word	0x08003bbd
 8003bf4:	08003bbd 	.word	0x08003bbd
 8003bf8:	08003bbd 	.word	0x08003bbd
 8003bfc:	08003bbd 	.word	0x08003bbd
 8003c00:	08003d4d 	.word	0x08003d4d
 8003c04:	08003c71 	.word	0x08003c71
 8003c08:	08003d2f 	.word	0x08003d2f
 8003c0c:	08003bbd 	.word	0x08003bbd
 8003c10:	08003bbd 	.word	0x08003bbd
 8003c14:	08003d6f 	.word	0x08003d6f
 8003c18:	08003bbd 	.word	0x08003bbd
 8003c1c:	08003c71 	.word	0x08003c71
 8003c20:	08003bbd 	.word	0x08003bbd
 8003c24:	08003bbd 	.word	0x08003bbd
 8003c28:	08003d37 	.word	0x08003d37
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	1d1a      	adds	r2, r3, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	602a      	str	r2, [r5, #0]
 8003c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0a3      	b.n	8003d88 <_printf_i+0x1f4>
 8003c40:	6820      	ldr	r0, [r4, #0]
 8003c42:	6829      	ldr	r1, [r5, #0]
 8003c44:	0606      	lsls	r6, r0, #24
 8003c46:	f101 0304 	add.w	r3, r1, #4
 8003c4a:	d50a      	bpl.n	8003c62 <_printf_i+0xce>
 8003c4c:	680e      	ldr	r6, [r1, #0]
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	2e00      	cmp	r6, #0
 8003c52:	da03      	bge.n	8003c5c <_printf_i+0xc8>
 8003c54:	232d      	movs	r3, #45	; 0x2d
 8003c56:	4276      	negs	r6, r6
 8003c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c5c:	485e      	ldr	r0, [pc, #376]	; (8003dd8 <_printf_i+0x244>)
 8003c5e:	230a      	movs	r3, #10
 8003c60:	e019      	b.n	8003c96 <_printf_i+0x102>
 8003c62:	680e      	ldr	r6, [r1, #0]
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c6a:	bf18      	it	ne
 8003c6c:	b236      	sxthne	r6, r6
 8003c6e:	e7ef      	b.n	8003c50 <_printf_i+0xbc>
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	1d19      	adds	r1, r3, #4
 8003c76:	6029      	str	r1, [r5, #0]
 8003c78:	0601      	lsls	r1, r0, #24
 8003c7a:	d501      	bpl.n	8003c80 <_printf_i+0xec>
 8003c7c:	681e      	ldr	r6, [r3, #0]
 8003c7e:	e002      	b.n	8003c86 <_printf_i+0xf2>
 8003c80:	0646      	lsls	r6, r0, #25
 8003c82:	d5fb      	bpl.n	8003c7c <_printf_i+0xe8>
 8003c84:	881e      	ldrh	r6, [r3, #0]
 8003c86:	4854      	ldr	r0, [pc, #336]	; (8003dd8 <_printf_i+0x244>)
 8003c88:	2f6f      	cmp	r7, #111	; 0x6f
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2308      	moveq	r3, #8
 8003c8e:	230a      	movne	r3, #10
 8003c90:	2100      	movs	r1, #0
 8003c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c96:	6865      	ldr	r5, [r4, #4]
 8003c98:	60a5      	str	r5, [r4, #8]
 8003c9a:	2d00      	cmp	r5, #0
 8003c9c:	bfa2      	ittt	ge
 8003c9e:	6821      	ldrge	r1, [r4, #0]
 8003ca0:	f021 0104 	bicge.w	r1, r1, #4
 8003ca4:	6021      	strge	r1, [r4, #0]
 8003ca6:	b90e      	cbnz	r6, 8003cac <_printf_i+0x118>
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	d04d      	beq.n	8003d48 <_printf_i+0x1b4>
 8003cac:	4615      	mov	r5, r2
 8003cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8003cb6:	5dc7      	ldrb	r7, [r0, r7]
 8003cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cbc:	4637      	mov	r7, r6
 8003cbe:	42bb      	cmp	r3, r7
 8003cc0:	460e      	mov	r6, r1
 8003cc2:	d9f4      	bls.n	8003cae <_printf_i+0x11a>
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d10b      	bne.n	8003ce0 <_printf_i+0x14c>
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	07de      	lsls	r6, r3, #31
 8003ccc:	d508      	bpl.n	8003ce0 <_printf_i+0x14c>
 8003cce:	6923      	ldr	r3, [r4, #16]
 8003cd0:	6861      	ldr	r1, [r4, #4]
 8003cd2:	4299      	cmp	r1, r3
 8003cd4:	bfde      	ittt	le
 8003cd6:	2330      	movle	r3, #48	; 0x30
 8003cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ce0:	1b52      	subs	r2, r2, r5
 8003ce2:	6122      	str	r2, [r4, #16]
 8003ce4:	f8cd a000 	str.w	sl, [sp]
 8003ce8:	464b      	mov	r3, r9
 8003cea:	aa03      	add	r2, sp, #12
 8003cec:	4621      	mov	r1, r4
 8003cee:	4640      	mov	r0, r8
 8003cf0:	f7ff fee2 	bl	8003ab8 <_printf_common>
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d14c      	bne.n	8003d92 <_printf_i+0x1fe>
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	b004      	add	sp, #16
 8003cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d02:	4835      	ldr	r0, [pc, #212]	; (8003dd8 <_printf_i+0x244>)
 8003d04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d08:	6829      	ldr	r1, [r5, #0]
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d10:	6029      	str	r1, [r5, #0]
 8003d12:	061d      	lsls	r5, r3, #24
 8003d14:	d514      	bpl.n	8003d40 <_printf_i+0x1ac>
 8003d16:	07df      	lsls	r7, r3, #31
 8003d18:	bf44      	itt	mi
 8003d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8003d1e:	6023      	strmi	r3, [r4, #0]
 8003d20:	b91e      	cbnz	r6, 8003d2a <_printf_i+0x196>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	f023 0320 	bic.w	r3, r3, #32
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	e7b0      	b.n	8003c90 <_printf_i+0xfc>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	f043 0320 	orr.w	r3, r3, #32
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	2378      	movs	r3, #120	; 0x78
 8003d38:	4828      	ldr	r0, [pc, #160]	; (8003ddc <_printf_i+0x248>)
 8003d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d3e:	e7e3      	b.n	8003d08 <_printf_i+0x174>
 8003d40:	0659      	lsls	r1, r3, #25
 8003d42:	bf48      	it	mi
 8003d44:	b2b6      	uxthmi	r6, r6
 8003d46:	e7e6      	b.n	8003d16 <_printf_i+0x182>
 8003d48:	4615      	mov	r5, r2
 8003d4a:	e7bb      	b.n	8003cc4 <_printf_i+0x130>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	6826      	ldr	r6, [r4, #0]
 8003d50:	6961      	ldr	r1, [r4, #20]
 8003d52:	1d18      	adds	r0, r3, #4
 8003d54:	6028      	str	r0, [r5, #0]
 8003d56:	0635      	lsls	r5, r6, #24
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	d501      	bpl.n	8003d60 <_printf_i+0x1cc>
 8003d5c:	6019      	str	r1, [r3, #0]
 8003d5e:	e002      	b.n	8003d66 <_printf_i+0x1d2>
 8003d60:	0670      	lsls	r0, r6, #25
 8003d62:	d5fb      	bpl.n	8003d5c <_printf_i+0x1c8>
 8003d64:	8019      	strh	r1, [r3, #0]
 8003d66:	2300      	movs	r3, #0
 8003d68:	6123      	str	r3, [r4, #16]
 8003d6a:	4615      	mov	r5, r2
 8003d6c:	e7ba      	b.n	8003ce4 <_printf_i+0x150>
 8003d6e:	682b      	ldr	r3, [r5, #0]
 8003d70:	1d1a      	adds	r2, r3, #4
 8003d72:	602a      	str	r2, [r5, #0]
 8003d74:	681d      	ldr	r5, [r3, #0]
 8003d76:	6862      	ldr	r2, [r4, #4]
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	f7fc fa30 	bl	80001e0 <memchr>
 8003d80:	b108      	cbz	r0, 8003d86 <_printf_i+0x1f2>
 8003d82:	1b40      	subs	r0, r0, r5
 8003d84:	6060      	str	r0, [r4, #4]
 8003d86:	6863      	ldr	r3, [r4, #4]
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d90:	e7a8      	b.n	8003ce4 <_printf_i+0x150>
 8003d92:	6923      	ldr	r3, [r4, #16]
 8003d94:	462a      	mov	r2, r5
 8003d96:	4649      	mov	r1, r9
 8003d98:	4640      	mov	r0, r8
 8003d9a:	47d0      	blx	sl
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d0ab      	beq.n	8003cf8 <_printf_i+0x164>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	079b      	lsls	r3, r3, #30
 8003da4:	d413      	bmi.n	8003dce <_printf_i+0x23a>
 8003da6:	68e0      	ldr	r0, [r4, #12]
 8003da8:	9b03      	ldr	r3, [sp, #12]
 8003daa:	4298      	cmp	r0, r3
 8003dac:	bfb8      	it	lt
 8003dae:	4618      	movlt	r0, r3
 8003db0:	e7a4      	b.n	8003cfc <_printf_i+0x168>
 8003db2:	2301      	movs	r3, #1
 8003db4:	4632      	mov	r2, r6
 8003db6:	4649      	mov	r1, r9
 8003db8:	4640      	mov	r0, r8
 8003dba:	47d0      	blx	sl
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d09b      	beq.n	8003cf8 <_printf_i+0x164>
 8003dc0:	3501      	adds	r5, #1
 8003dc2:	68e3      	ldr	r3, [r4, #12]
 8003dc4:	9903      	ldr	r1, [sp, #12]
 8003dc6:	1a5b      	subs	r3, r3, r1
 8003dc8:	42ab      	cmp	r3, r5
 8003dca:	dcf2      	bgt.n	8003db2 <_printf_i+0x21e>
 8003dcc:	e7eb      	b.n	8003da6 <_printf_i+0x212>
 8003dce:	2500      	movs	r5, #0
 8003dd0:	f104 0619 	add.w	r6, r4, #25
 8003dd4:	e7f5      	b.n	8003dc2 <_printf_i+0x22e>
 8003dd6:	bf00      	nop
 8003dd8:	08005215 	.word	0x08005215
 8003ddc:	08005226 	.word	0x08005226

08003de0 <__sread>:
 8003de0:	b510      	push	{r4, lr}
 8003de2:	460c      	mov	r4, r1
 8003de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de8:	f000 fa5a 	bl	80042a0 <_read_r>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	bfab      	itete	ge
 8003df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003df2:	89a3      	ldrhlt	r3, [r4, #12]
 8003df4:	181b      	addge	r3, r3, r0
 8003df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dfa:	bfac      	ite	ge
 8003dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003dfe:	81a3      	strhlt	r3, [r4, #12]
 8003e00:	bd10      	pop	{r4, pc}

08003e02 <__swrite>:
 8003e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e06:	461f      	mov	r7, r3
 8003e08:	898b      	ldrh	r3, [r1, #12]
 8003e0a:	05db      	lsls	r3, r3, #23
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	4616      	mov	r6, r2
 8003e12:	d505      	bpl.n	8003e20 <__swrite+0x1e>
 8003e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e18:	2302      	movs	r3, #2
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f000 f9c8 	bl	80041b0 <_lseek_r>
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	4632      	mov	r2, r6
 8003e2e:	463b      	mov	r3, r7
 8003e30:	4628      	mov	r0, r5
 8003e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e36:	f000 b869 	b.w	8003f0c <_write_r>

08003e3a <__sseek>:
 8003e3a:	b510      	push	{r4, lr}
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e42:	f000 f9b5 	bl	80041b0 <_lseek_r>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	bf15      	itete	ne
 8003e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e56:	81a3      	strheq	r3, [r4, #12]
 8003e58:	bf18      	it	ne
 8003e5a:	81a3      	strhne	r3, [r4, #12]
 8003e5c:	bd10      	pop	{r4, pc}

08003e5e <__sclose>:
 8003e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e62:	f000 b8d3 	b.w	800400c <_close_r>
	...

08003e68 <__swbuf_r>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	460e      	mov	r6, r1
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	4605      	mov	r5, r0
 8003e70:	b118      	cbz	r0, 8003e7a <__swbuf_r+0x12>
 8003e72:	6983      	ldr	r3, [r0, #24]
 8003e74:	b90b      	cbnz	r3, 8003e7a <__swbuf_r+0x12>
 8003e76:	f7ff fc19 	bl	80036ac <__sinit>
 8003e7a:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <__swbuf_r+0x98>)
 8003e7c:	429c      	cmp	r4, r3
 8003e7e:	d12b      	bne.n	8003ed8 <__swbuf_r+0x70>
 8003e80:	686c      	ldr	r4, [r5, #4]
 8003e82:	69a3      	ldr	r3, [r4, #24]
 8003e84:	60a3      	str	r3, [r4, #8]
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	071a      	lsls	r2, r3, #28
 8003e8a:	d52f      	bpl.n	8003eec <__swbuf_r+0x84>
 8003e8c:	6923      	ldr	r3, [r4, #16]
 8003e8e:	b36b      	cbz	r3, 8003eec <__swbuf_r+0x84>
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	1ac0      	subs	r0, r0, r3
 8003e96:	6963      	ldr	r3, [r4, #20]
 8003e98:	b2f6      	uxtb	r6, r6
 8003e9a:	4283      	cmp	r3, r0
 8003e9c:	4637      	mov	r7, r6
 8003e9e:	dc04      	bgt.n	8003eaa <__swbuf_r+0x42>
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f000 f948 	bl	8004138 <_fflush_r>
 8003ea8:	bb30      	cbnz	r0, 8003ef8 <__swbuf_r+0x90>
 8003eaa:	68a3      	ldr	r3, [r4, #8]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	6022      	str	r2, [r4, #0]
 8003eb6:	701e      	strb	r6, [r3, #0]
 8003eb8:	6963      	ldr	r3, [r4, #20]
 8003eba:	3001      	adds	r0, #1
 8003ebc:	4283      	cmp	r3, r0
 8003ebe:	d004      	beq.n	8003eca <__swbuf_r+0x62>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	07db      	lsls	r3, r3, #31
 8003ec4:	d506      	bpl.n	8003ed4 <__swbuf_r+0x6c>
 8003ec6:	2e0a      	cmp	r6, #10
 8003ec8:	d104      	bne.n	8003ed4 <__swbuf_r+0x6c>
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 f933 	bl	8004138 <_fflush_r>
 8003ed2:	b988      	cbnz	r0, 8003ef8 <__swbuf_r+0x90>
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <__swbuf_r+0x9c>)
 8003eda:	429c      	cmp	r4, r3
 8003edc:	d101      	bne.n	8003ee2 <__swbuf_r+0x7a>
 8003ede:	68ac      	ldr	r4, [r5, #8]
 8003ee0:	e7cf      	b.n	8003e82 <__swbuf_r+0x1a>
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <__swbuf_r+0xa0>)
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	bf08      	it	eq
 8003ee8:	68ec      	ldreq	r4, [r5, #12]
 8003eea:	e7ca      	b.n	8003e82 <__swbuf_r+0x1a>
 8003eec:	4621      	mov	r1, r4
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 f81e 	bl	8003f30 <__swsetup_r>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d0cb      	beq.n	8003e90 <__swbuf_r+0x28>
 8003ef8:	f04f 37ff 	mov.w	r7, #4294967295
 8003efc:	e7ea      	b.n	8003ed4 <__swbuf_r+0x6c>
 8003efe:	bf00      	nop
 8003f00:	080051c4 	.word	0x080051c4
 8003f04:	080051e4 	.word	0x080051e4
 8003f08:	080051a4 	.word	0x080051a4

08003f0c <_write_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4d07      	ldr	r5, [pc, #28]	; (8003f2c <_write_r+0x20>)
 8003f10:	4604      	mov	r4, r0
 8003f12:	4608      	mov	r0, r1
 8003f14:	4611      	mov	r1, r2
 8003f16:	2200      	movs	r2, #0
 8003f18:	602a      	str	r2, [r5, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f7fd fae2 	bl	80014e4 <_write>
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	d102      	bne.n	8003f2a <_write_r+0x1e>
 8003f24:	682b      	ldr	r3, [r5, #0]
 8003f26:	b103      	cbz	r3, 8003f2a <_write_r+0x1e>
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
 8003f2c:	20000308 	.word	0x20000308

08003f30 <__swsetup_r>:
 8003f30:	4b32      	ldr	r3, [pc, #200]	; (8003ffc <__swsetup_r+0xcc>)
 8003f32:	b570      	push	{r4, r5, r6, lr}
 8003f34:	681d      	ldr	r5, [r3, #0]
 8003f36:	4606      	mov	r6, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	b125      	cbz	r5, 8003f46 <__swsetup_r+0x16>
 8003f3c:	69ab      	ldr	r3, [r5, #24]
 8003f3e:	b913      	cbnz	r3, 8003f46 <__swsetup_r+0x16>
 8003f40:	4628      	mov	r0, r5
 8003f42:	f7ff fbb3 	bl	80036ac <__sinit>
 8003f46:	4b2e      	ldr	r3, [pc, #184]	; (8004000 <__swsetup_r+0xd0>)
 8003f48:	429c      	cmp	r4, r3
 8003f4a:	d10f      	bne.n	8003f6c <__swsetup_r+0x3c>
 8003f4c:	686c      	ldr	r4, [r5, #4]
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f54:	0719      	lsls	r1, r3, #28
 8003f56:	d42c      	bmi.n	8003fb2 <__swsetup_r+0x82>
 8003f58:	06dd      	lsls	r5, r3, #27
 8003f5a:	d411      	bmi.n	8003f80 <__swsetup_r+0x50>
 8003f5c:	2309      	movs	r3, #9
 8003f5e:	6033      	str	r3, [r6, #0]
 8003f60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f64:	81a3      	strh	r3, [r4, #12]
 8003f66:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6a:	e03e      	b.n	8003fea <__swsetup_r+0xba>
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <__swsetup_r+0xd4>)
 8003f6e:	429c      	cmp	r4, r3
 8003f70:	d101      	bne.n	8003f76 <__swsetup_r+0x46>
 8003f72:	68ac      	ldr	r4, [r5, #8]
 8003f74:	e7eb      	b.n	8003f4e <__swsetup_r+0x1e>
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <__swsetup_r+0xd8>)
 8003f78:	429c      	cmp	r4, r3
 8003f7a:	bf08      	it	eq
 8003f7c:	68ec      	ldreq	r4, [r5, #12]
 8003f7e:	e7e6      	b.n	8003f4e <__swsetup_r+0x1e>
 8003f80:	0758      	lsls	r0, r3, #29
 8003f82:	d512      	bpl.n	8003faa <__swsetup_r+0x7a>
 8003f84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f86:	b141      	cbz	r1, 8003f9a <__swsetup_r+0x6a>
 8003f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f8c:	4299      	cmp	r1, r3
 8003f8e:	d002      	beq.n	8003f96 <__swsetup_r+0x66>
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7ff fa2b 	bl	80033ec <_free_r>
 8003f96:	2300      	movs	r3, #0
 8003f98:	6363      	str	r3, [r4, #52]	; 0x34
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fa0:	81a3      	strh	r3, [r4, #12]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6063      	str	r3, [r4, #4]
 8003fa6:	6923      	ldr	r3, [r4, #16]
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	f043 0308 	orr.w	r3, r3, #8
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	6923      	ldr	r3, [r4, #16]
 8003fb4:	b94b      	cbnz	r3, 8003fca <__swsetup_r+0x9a>
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc0:	d003      	beq.n	8003fca <__swsetup_r+0x9a>
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f000 f92b 	bl	8004220 <__smakebuf_r>
 8003fca:	89a0      	ldrh	r0, [r4, #12]
 8003fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fd0:	f010 0301 	ands.w	r3, r0, #1
 8003fd4:	d00a      	beq.n	8003fec <__swsetup_r+0xbc>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60a3      	str	r3, [r4, #8]
 8003fda:	6963      	ldr	r3, [r4, #20]
 8003fdc:	425b      	negs	r3, r3
 8003fde:	61a3      	str	r3, [r4, #24]
 8003fe0:	6923      	ldr	r3, [r4, #16]
 8003fe2:	b943      	cbnz	r3, 8003ff6 <__swsetup_r+0xc6>
 8003fe4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fe8:	d1ba      	bne.n	8003f60 <__swsetup_r+0x30>
 8003fea:	bd70      	pop	{r4, r5, r6, pc}
 8003fec:	0781      	lsls	r1, r0, #30
 8003fee:	bf58      	it	pl
 8003ff0:	6963      	ldrpl	r3, [r4, #20]
 8003ff2:	60a3      	str	r3, [r4, #8]
 8003ff4:	e7f4      	b.n	8003fe0 <__swsetup_r+0xb0>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e7f7      	b.n	8003fea <__swsetup_r+0xba>
 8003ffa:	bf00      	nop
 8003ffc:	2000000c 	.word	0x2000000c
 8004000:	080051c4 	.word	0x080051c4
 8004004:	080051e4 	.word	0x080051e4
 8004008:	080051a4 	.word	0x080051a4

0800400c <_close_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4d06      	ldr	r5, [pc, #24]	; (8004028 <_close_r+0x1c>)
 8004010:	2300      	movs	r3, #0
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	f7fd fa80 	bl	800151c <_close>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_close_r+0x1a>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_close_r+0x1a>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	20000308 	.word	0x20000308

0800402c <__sflush_r>:
 800402c:	898a      	ldrh	r2, [r1, #12]
 800402e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004032:	4605      	mov	r5, r0
 8004034:	0710      	lsls	r0, r2, #28
 8004036:	460c      	mov	r4, r1
 8004038:	d458      	bmi.n	80040ec <__sflush_r+0xc0>
 800403a:	684b      	ldr	r3, [r1, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	dc05      	bgt.n	800404c <__sflush_r+0x20>
 8004040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	dc02      	bgt.n	800404c <__sflush_r+0x20>
 8004046:	2000      	movs	r0, #0
 8004048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800404c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800404e:	2e00      	cmp	r6, #0
 8004050:	d0f9      	beq.n	8004046 <__sflush_r+0x1a>
 8004052:	2300      	movs	r3, #0
 8004054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004058:	682f      	ldr	r7, [r5, #0]
 800405a:	602b      	str	r3, [r5, #0]
 800405c:	d032      	beq.n	80040c4 <__sflush_r+0x98>
 800405e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	075a      	lsls	r2, r3, #29
 8004064:	d505      	bpl.n	8004072 <__sflush_r+0x46>
 8004066:	6863      	ldr	r3, [r4, #4]
 8004068:	1ac0      	subs	r0, r0, r3
 800406a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800406c:	b10b      	cbz	r3, 8004072 <__sflush_r+0x46>
 800406e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004070:	1ac0      	subs	r0, r0, r3
 8004072:	2300      	movs	r3, #0
 8004074:	4602      	mov	r2, r0
 8004076:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004078:	6a21      	ldr	r1, [r4, #32]
 800407a:	4628      	mov	r0, r5
 800407c:	47b0      	blx	r6
 800407e:	1c43      	adds	r3, r0, #1
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	d106      	bne.n	8004092 <__sflush_r+0x66>
 8004084:	6829      	ldr	r1, [r5, #0]
 8004086:	291d      	cmp	r1, #29
 8004088:	d82c      	bhi.n	80040e4 <__sflush_r+0xb8>
 800408a:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <__sflush_r+0x108>)
 800408c:	40ca      	lsrs	r2, r1
 800408e:	07d6      	lsls	r6, r2, #31
 8004090:	d528      	bpl.n	80040e4 <__sflush_r+0xb8>
 8004092:	2200      	movs	r2, #0
 8004094:	6062      	str	r2, [r4, #4]
 8004096:	04d9      	lsls	r1, r3, #19
 8004098:	6922      	ldr	r2, [r4, #16]
 800409a:	6022      	str	r2, [r4, #0]
 800409c:	d504      	bpl.n	80040a8 <__sflush_r+0x7c>
 800409e:	1c42      	adds	r2, r0, #1
 80040a0:	d101      	bne.n	80040a6 <__sflush_r+0x7a>
 80040a2:	682b      	ldr	r3, [r5, #0]
 80040a4:	b903      	cbnz	r3, 80040a8 <__sflush_r+0x7c>
 80040a6:	6560      	str	r0, [r4, #84]	; 0x54
 80040a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040aa:	602f      	str	r7, [r5, #0]
 80040ac:	2900      	cmp	r1, #0
 80040ae:	d0ca      	beq.n	8004046 <__sflush_r+0x1a>
 80040b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040b4:	4299      	cmp	r1, r3
 80040b6:	d002      	beq.n	80040be <__sflush_r+0x92>
 80040b8:	4628      	mov	r0, r5
 80040ba:	f7ff f997 	bl	80033ec <_free_r>
 80040be:	2000      	movs	r0, #0
 80040c0:	6360      	str	r0, [r4, #52]	; 0x34
 80040c2:	e7c1      	b.n	8004048 <__sflush_r+0x1c>
 80040c4:	6a21      	ldr	r1, [r4, #32]
 80040c6:	2301      	movs	r3, #1
 80040c8:	4628      	mov	r0, r5
 80040ca:	47b0      	blx	r6
 80040cc:	1c41      	adds	r1, r0, #1
 80040ce:	d1c7      	bne.n	8004060 <__sflush_r+0x34>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0c4      	beq.n	8004060 <__sflush_r+0x34>
 80040d6:	2b1d      	cmp	r3, #29
 80040d8:	d001      	beq.n	80040de <__sflush_r+0xb2>
 80040da:	2b16      	cmp	r3, #22
 80040dc:	d101      	bne.n	80040e2 <__sflush_r+0xb6>
 80040de:	602f      	str	r7, [r5, #0]
 80040e0:	e7b1      	b.n	8004046 <__sflush_r+0x1a>
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e8:	81a3      	strh	r3, [r4, #12]
 80040ea:	e7ad      	b.n	8004048 <__sflush_r+0x1c>
 80040ec:	690f      	ldr	r7, [r1, #16]
 80040ee:	2f00      	cmp	r7, #0
 80040f0:	d0a9      	beq.n	8004046 <__sflush_r+0x1a>
 80040f2:	0793      	lsls	r3, r2, #30
 80040f4:	680e      	ldr	r6, [r1, #0]
 80040f6:	bf08      	it	eq
 80040f8:	694b      	ldreq	r3, [r1, #20]
 80040fa:	600f      	str	r7, [r1, #0]
 80040fc:	bf18      	it	ne
 80040fe:	2300      	movne	r3, #0
 8004100:	eba6 0807 	sub.w	r8, r6, r7
 8004104:	608b      	str	r3, [r1, #8]
 8004106:	f1b8 0f00 	cmp.w	r8, #0
 800410a:	dd9c      	ble.n	8004046 <__sflush_r+0x1a>
 800410c:	6a21      	ldr	r1, [r4, #32]
 800410e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004110:	4643      	mov	r3, r8
 8004112:	463a      	mov	r2, r7
 8004114:	4628      	mov	r0, r5
 8004116:	47b0      	blx	r6
 8004118:	2800      	cmp	r0, #0
 800411a:	dc06      	bgt.n	800412a <__sflush_r+0xfe>
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	e78e      	b.n	8004048 <__sflush_r+0x1c>
 800412a:	4407      	add	r7, r0
 800412c:	eba8 0800 	sub.w	r8, r8, r0
 8004130:	e7e9      	b.n	8004106 <__sflush_r+0xda>
 8004132:	bf00      	nop
 8004134:	20400001 	.word	0x20400001

08004138 <_fflush_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	690b      	ldr	r3, [r1, #16]
 800413c:	4605      	mov	r5, r0
 800413e:	460c      	mov	r4, r1
 8004140:	b913      	cbnz	r3, 8004148 <_fflush_r+0x10>
 8004142:	2500      	movs	r5, #0
 8004144:	4628      	mov	r0, r5
 8004146:	bd38      	pop	{r3, r4, r5, pc}
 8004148:	b118      	cbz	r0, 8004152 <_fflush_r+0x1a>
 800414a:	6983      	ldr	r3, [r0, #24]
 800414c:	b90b      	cbnz	r3, 8004152 <_fflush_r+0x1a>
 800414e:	f7ff faad 	bl	80036ac <__sinit>
 8004152:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <_fflush_r+0x6c>)
 8004154:	429c      	cmp	r4, r3
 8004156:	d11b      	bne.n	8004190 <_fflush_r+0x58>
 8004158:	686c      	ldr	r4, [r5, #4]
 800415a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ef      	beq.n	8004142 <_fflush_r+0xa>
 8004162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004164:	07d0      	lsls	r0, r2, #31
 8004166:	d404      	bmi.n	8004172 <_fflush_r+0x3a>
 8004168:	0599      	lsls	r1, r3, #22
 800416a:	d402      	bmi.n	8004172 <_fflush_r+0x3a>
 800416c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800416e:	f7ff fb3b 	bl	80037e8 <__retarget_lock_acquire_recursive>
 8004172:	4628      	mov	r0, r5
 8004174:	4621      	mov	r1, r4
 8004176:	f7ff ff59 	bl	800402c <__sflush_r>
 800417a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800417c:	07da      	lsls	r2, r3, #31
 800417e:	4605      	mov	r5, r0
 8004180:	d4e0      	bmi.n	8004144 <_fflush_r+0xc>
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	059b      	lsls	r3, r3, #22
 8004186:	d4dd      	bmi.n	8004144 <_fflush_r+0xc>
 8004188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800418a:	f7ff fb2e 	bl	80037ea <__retarget_lock_release_recursive>
 800418e:	e7d9      	b.n	8004144 <_fflush_r+0xc>
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <_fflush_r+0x70>)
 8004192:	429c      	cmp	r4, r3
 8004194:	d101      	bne.n	800419a <_fflush_r+0x62>
 8004196:	68ac      	ldr	r4, [r5, #8]
 8004198:	e7df      	b.n	800415a <_fflush_r+0x22>
 800419a:	4b04      	ldr	r3, [pc, #16]	; (80041ac <_fflush_r+0x74>)
 800419c:	429c      	cmp	r4, r3
 800419e:	bf08      	it	eq
 80041a0:	68ec      	ldreq	r4, [r5, #12]
 80041a2:	e7da      	b.n	800415a <_fflush_r+0x22>
 80041a4:	080051c4 	.word	0x080051c4
 80041a8:	080051e4 	.word	0x080051e4
 80041ac:	080051a4 	.word	0x080051a4

080041b0 <_lseek_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4d07      	ldr	r5, [pc, #28]	; (80041d0 <_lseek_r+0x20>)
 80041b4:	4604      	mov	r4, r0
 80041b6:	4608      	mov	r0, r1
 80041b8:	4611      	mov	r1, r2
 80041ba:	2200      	movs	r2, #0
 80041bc:	602a      	str	r2, [r5, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	f7fd f9d3 	bl	800156a <_lseek>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	d102      	bne.n	80041ce <_lseek_r+0x1e>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	b103      	cbz	r3, 80041ce <_lseek_r+0x1e>
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
 80041d0:	20000308 	.word	0x20000308

080041d4 <__swhatbuf_r>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	460e      	mov	r6, r1
 80041d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041dc:	2900      	cmp	r1, #0
 80041de:	b096      	sub	sp, #88	; 0x58
 80041e0:	4614      	mov	r4, r2
 80041e2:	461d      	mov	r5, r3
 80041e4:	da08      	bge.n	80041f8 <__swhatbuf_r+0x24>
 80041e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	602a      	str	r2, [r5, #0]
 80041ee:	061a      	lsls	r2, r3, #24
 80041f0:	d410      	bmi.n	8004214 <__swhatbuf_r+0x40>
 80041f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f6:	e00e      	b.n	8004216 <__swhatbuf_r+0x42>
 80041f8:	466a      	mov	r2, sp
 80041fa:	f000 f863 	bl	80042c4 <_fstat_r>
 80041fe:	2800      	cmp	r0, #0
 8004200:	dbf1      	blt.n	80041e6 <__swhatbuf_r+0x12>
 8004202:	9a01      	ldr	r2, [sp, #4]
 8004204:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004208:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800420c:	425a      	negs	r2, r3
 800420e:	415a      	adcs	r2, r3
 8004210:	602a      	str	r2, [r5, #0]
 8004212:	e7ee      	b.n	80041f2 <__swhatbuf_r+0x1e>
 8004214:	2340      	movs	r3, #64	; 0x40
 8004216:	2000      	movs	r0, #0
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	b016      	add	sp, #88	; 0x58
 800421c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004220 <__smakebuf_r>:
 8004220:	898b      	ldrh	r3, [r1, #12]
 8004222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004224:	079d      	lsls	r5, r3, #30
 8004226:	4606      	mov	r6, r0
 8004228:	460c      	mov	r4, r1
 800422a:	d507      	bpl.n	800423c <__smakebuf_r+0x1c>
 800422c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	6123      	str	r3, [r4, #16]
 8004234:	2301      	movs	r3, #1
 8004236:	6163      	str	r3, [r4, #20]
 8004238:	b002      	add	sp, #8
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	ab01      	add	r3, sp, #4
 800423e:	466a      	mov	r2, sp
 8004240:	f7ff ffc8 	bl	80041d4 <__swhatbuf_r>
 8004244:	9900      	ldr	r1, [sp, #0]
 8004246:	4605      	mov	r5, r0
 8004248:	4630      	mov	r0, r6
 800424a:	f7ff f93b 	bl	80034c4 <_malloc_r>
 800424e:	b948      	cbnz	r0, 8004264 <__smakebuf_r+0x44>
 8004250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004254:	059a      	lsls	r2, r3, #22
 8004256:	d4ef      	bmi.n	8004238 <__smakebuf_r+0x18>
 8004258:	f023 0303 	bic.w	r3, r3, #3
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	81a3      	strh	r3, [r4, #12]
 8004262:	e7e3      	b.n	800422c <__smakebuf_r+0xc>
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <__smakebuf_r+0x7c>)
 8004266:	62b3      	str	r3, [r6, #40]	; 0x28
 8004268:	89a3      	ldrh	r3, [r4, #12]
 800426a:	6020      	str	r0, [r4, #0]
 800426c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004270:	81a3      	strh	r3, [r4, #12]
 8004272:	9b00      	ldr	r3, [sp, #0]
 8004274:	6163      	str	r3, [r4, #20]
 8004276:	9b01      	ldr	r3, [sp, #4]
 8004278:	6120      	str	r0, [r4, #16]
 800427a:	b15b      	cbz	r3, 8004294 <__smakebuf_r+0x74>
 800427c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004280:	4630      	mov	r0, r6
 8004282:	f000 f831 	bl	80042e8 <_isatty_r>
 8004286:	b128      	cbz	r0, 8004294 <__smakebuf_r+0x74>
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	f023 0303 	bic.w	r3, r3, #3
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	81a3      	strh	r3, [r4, #12]
 8004294:	89a0      	ldrh	r0, [r4, #12]
 8004296:	4305      	orrs	r5, r0
 8004298:	81a5      	strh	r5, [r4, #12]
 800429a:	e7cd      	b.n	8004238 <__smakebuf_r+0x18>
 800429c:	08003645 	.word	0x08003645

080042a0 <_read_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	4d07      	ldr	r5, [pc, #28]	; (80042c0 <_read_r+0x20>)
 80042a4:	4604      	mov	r4, r0
 80042a6:	4608      	mov	r0, r1
 80042a8:	4611      	mov	r1, r2
 80042aa:	2200      	movs	r2, #0
 80042ac:	602a      	str	r2, [r5, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f7fd f8fb 	bl	80014aa <_read>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d102      	bne.n	80042be <_read_r+0x1e>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	b103      	cbz	r3, 80042be <_read_r+0x1e>
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	20000308 	.word	0x20000308

080042c4 <_fstat_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	4d07      	ldr	r5, [pc, #28]	; (80042e4 <_fstat_r+0x20>)
 80042c8:	2300      	movs	r3, #0
 80042ca:	4604      	mov	r4, r0
 80042cc:	4608      	mov	r0, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	602b      	str	r3, [r5, #0]
 80042d2:	f7fd f92f 	bl	8001534 <_fstat>
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	d102      	bne.n	80042e0 <_fstat_r+0x1c>
 80042da:	682b      	ldr	r3, [r5, #0]
 80042dc:	b103      	cbz	r3, 80042e0 <_fstat_r+0x1c>
 80042de:	6023      	str	r3, [r4, #0]
 80042e0:	bd38      	pop	{r3, r4, r5, pc}
 80042e2:	bf00      	nop
 80042e4:	20000308 	.word	0x20000308

080042e8 <_isatty_r>:
 80042e8:	b538      	push	{r3, r4, r5, lr}
 80042ea:	4d06      	ldr	r5, [pc, #24]	; (8004304 <_isatty_r+0x1c>)
 80042ec:	2300      	movs	r3, #0
 80042ee:	4604      	mov	r4, r0
 80042f0:	4608      	mov	r0, r1
 80042f2:	602b      	str	r3, [r5, #0]
 80042f4:	f7fd f92e 	bl	8001554 <_isatty>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	d102      	bne.n	8004302 <_isatty_r+0x1a>
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	b103      	cbz	r3, 8004302 <_isatty_r+0x1a>
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	bd38      	pop	{r3, r4, r5, pc}
 8004304:	20000308 	.word	0x20000308

08004308 <pow>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	ed2d 8b02 	vpush	{d8}
 800430e:	eeb0 8a40 	vmov.f32	s16, s0
 8004312:	eef0 8a60 	vmov.f32	s17, s1
 8004316:	ec55 4b11 	vmov	r4, r5, d1
 800431a:	f000 f865 	bl	80043e8 <__ieee754_pow>
 800431e:	4622      	mov	r2, r4
 8004320:	462b      	mov	r3, r5
 8004322:	4620      	mov	r0, r4
 8004324:	4629      	mov	r1, r5
 8004326:	ec57 6b10 	vmov	r6, r7, d0
 800432a:	f7fc fbff 	bl	8000b2c <__aeabi_dcmpun>
 800432e:	2800      	cmp	r0, #0
 8004330:	d13b      	bne.n	80043aa <pow+0xa2>
 8004332:	ec51 0b18 	vmov	r0, r1, d8
 8004336:	2200      	movs	r2, #0
 8004338:	2300      	movs	r3, #0
 800433a:	f7fc fbc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800433e:	b1b8      	cbz	r0, 8004370 <pow+0x68>
 8004340:	2200      	movs	r2, #0
 8004342:	2300      	movs	r3, #0
 8004344:	4620      	mov	r0, r4
 8004346:	4629      	mov	r1, r5
 8004348:	f7fc fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800434c:	2800      	cmp	r0, #0
 800434e:	d146      	bne.n	80043de <pow+0xd6>
 8004350:	ec45 4b10 	vmov	d0, r4, r5
 8004354:	f000 fe61 	bl	800501a <finite>
 8004358:	b338      	cbz	r0, 80043aa <pow+0xa2>
 800435a:	2200      	movs	r2, #0
 800435c:	2300      	movs	r3, #0
 800435e:	4620      	mov	r0, r4
 8004360:	4629      	mov	r1, r5
 8004362:	f7fc fbbb 	bl	8000adc <__aeabi_dcmplt>
 8004366:	b300      	cbz	r0, 80043aa <pow+0xa2>
 8004368:	f7ff f806 	bl	8003378 <__errno>
 800436c:	2322      	movs	r3, #34	; 0x22
 800436e:	e01b      	b.n	80043a8 <pow+0xa0>
 8004370:	ec47 6b10 	vmov	d0, r6, r7
 8004374:	f000 fe51 	bl	800501a <finite>
 8004378:	b9e0      	cbnz	r0, 80043b4 <pow+0xac>
 800437a:	eeb0 0a48 	vmov.f32	s0, s16
 800437e:	eef0 0a68 	vmov.f32	s1, s17
 8004382:	f000 fe4a 	bl	800501a <finite>
 8004386:	b1a8      	cbz	r0, 80043b4 <pow+0xac>
 8004388:	ec45 4b10 	vmov	d0, r4, r5
 800438c:	f000 fe45 	bl	800501a <finite>
 8004390:	b180      	cbz	r0, 80043b4 <pow+0xac>
 8004392:	4632      	mov	r2, r6
 8004394:	463b      	mov	r3, r7
 8004396:	4630      	mov	r0, r6
 8004398:	4639      	mov	r1, r7
 800439a:	f7fc fbc7 	bl	8000b2c <__aeabi_dcmpun>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d0e2      	beq.n	8004368 <pow+0x60>
 80043a2:	f7fe ffe9 	bl	8003378 <__errno>
 80043a6:	2321      	movs	r3, #33	; 0x21
 80043a8:	6003      	str	r3, [r0, #0]
 80043aa:	ecbd 8b02 	vpop	{d8}
 80043ae:	ec47 6b10 	vmov	d0, r6, r7
 80043b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b4:	2200      	movs	r2, #0
 80043b6:	2300      	movs	r3, #0
 80043b8:	4630      	mov	r0, r6
 80043ba:	4639      	mov	r1, r7
 80043bc:	f7fc fb84 	bl	8000ac8 <__aeabi_dcmpeq>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d0f2      	beq.n	80043aa <pow+0xa2>
 80043c4:	eeb0 0a48 	vmov.f32	s0, s16
 80043c8:	eef0 0a68 	vmov.f32	s1, s17
 80043cc:	f000 fe25 	bl	800501a <finite>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d0ea      	beq.n	80043aa <pow+0xa2>
 80043d4:	ec45 4b10 	vmov	d0, r4, r5
 80043d8:	f000 fe1f 	bl	800501a <finite>
 80043dc:	e7c3      	b.n	8004366 <pow+0x5e>
 80043de:	4f01      	ldr	r7, [pc, #4]	; (80043e4 <pow+0xdc>)
 80043e0:	2600      	movs	r6, #0
 80043e2:	e7e2      	b.n	80043aa <pow+0xa2>
 80043e4:	3ff00000 	.word	0x3ff00000

080043e8 <__ieee754_pow>:
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	ed2d 8b06 	vpush	{d8-d10}
 80043f0:	b089      	sub	sp, #36	; 0x24
 80043f2:	ed8d 1b00 	vstr	d1, [sp]
 80043f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80043fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80043fe:	ea58 0102 	orrs.w	r1, r8, r2
 8004402:	ec57 6b10 	vmov	r6, r7, d0
 8004406:	d115      	bne.n	8004434 <__ieee754_pow+0x4c>
 8004408:	19b3      	adds	r3, r6, r6
 800440a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800440e:	4152      	adcs	r2, r2
 8004410:	4299      	cmp	r1, r3
 8004412:	4b89      	ldr	r3, [pc, #548]	; (8004638 <__ieee754_pow+0x250>)
 8004414:	4193      	sbcs	r3, r2
 8004416:	f080 84d2 	bcs.w	8004dbe <__ieee754_pow+0x9d6>
 800441a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800441e:	4630      	mov	r0, r6
 8004420:	4639      	mov	r1, r7
 8004422:	f7fb ff33 	bl	800028c <__adddf3>
 8004426:	ec41 0b10 	vmov	d0, r0, r1
 800442a:	b009      	add	sp, #36	; 0x24
 800442c:	ecbd 8b06 	vpop	{d8-d10}
 8004430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004434:	4b81      	ldr	r3, [pc, #516]	; (800463c <__ieee754_pow+0x254>)
 8004436:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800443a:	429c      	cmp	r4, r3
 800443c:	ee10 aa10 	vmov	sl, s0
 8004440:	463d      	mov	r5, r7
 8004442:	dc06      	bgt.n	8004452 <__ieee754_pow+0x6a>
 8004444:	d101      	bne.n	800444a <__ieee754_pow+0x62>
 8004446:	2e00      	cmp	r6, #0
 8004448:	d1e7      	bne.n	800441a <__ieee754_pow+0x32>
 800444a:	4598      	cmp	r8, r3
 800444c:	dc01      	bgt.n	8004452 <__ieee754_pow+0x6a>
 800444e:	d10f      	bne.n	8004470 <__ieee754_pow+0x88>
 8004450:	b172      	cbz	r2, 8004470 <__ieee754_pow+0x88>
 8004452:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004456:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800445a:	ea55 050a 	orrs.w	r5, r5, sl
 800445e:	d1dc      	bne.n	800441a <__ieee754_pow+0x32>
 8004460:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004464:	18db      	adds	r3, r3, r3
 8004466:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800446a:	4152      	adcs	r2, r2
 800446c:	429d      	cmp	r5, r3
 800446e:	e7d0      	b.n	8004412 <__ieee754_pow+0x2a>
 8004470:	2d00      	cmp	r5, #0
 8004472:	da3b      	bge.n	80044ec <__ieee754_pow+0x104>
 8004474:	4b72      	ldr	r3, [pc, #456]	; (8004640 <__ieee754_pow+0x258>)
 8004476:	4598      	cmp	r8, r3
 8004478:	dc51      	bgt.n	800451e <__ieee754_pow+0x136>
 800447a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800447e:	4598      	cmp	r8, r3
 8004480:	f340 84ac 	ble.w	8004ddc <__ieee754_pow+0x9f4>
 8004484:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004488:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800448c:	2b14      	cmp	r3, #20
 800448e:	dd0f      	ble.n	80044b0 <__ieee754_pow+0xc8>
 8004490:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004494:	fa22 f103 	lsr.w	r1, r2, r3
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	4293      	cmp	r3, r2
 800449e:	f040 849d 	bne.w	8004ddc <__ieee754_pow+0x9f4>
 80044a2:	f001 0101 	and.w	r1, r1, #1
 80044a6:	f1c1 0302 	rsb	r3, r1, #2
 80044aa:	9304      	str	r3, [sp, #16]
 80044ac:	b182      	cbz	r2, 80044d0 <__ieee754_pow+0xe8>
 80044ae:	e05f      	b.n	8004570 <__ieee754_pow+0x188>
 80044b0:	2a00      	cmp	r2, #0
 80044b2:	d15b      	bne.n	800456c <__ieee754_pow+0x184>
 80044b4:	f1c3 0314 	rsb	r3, r3, #20
 80044b8:	fa48 f103 	asr.w	r1, r8, r3
 80044bc:	fa01 f303 	lsl.w	r3, r1, r3
 80044c0:	4543      	cmp	r3, r8
 80044c2:	f040 8488 	bne.w	8004dd6 <__ieee754_pow+0x9ee>
 80044c6:	f001 0101 	and.w	r1, r1, #1
 80044ca:	f1c1 0302 	rsb	r3, r1, #2
 80044ce:	9304      	str	r3, [sp, #16]
 80044d0:	4b5c      	ldr	r3, [pc, #368]	; (8004644 <__ieee754_pow+0x25c>)
 80044d2:	4598      	cmp	r8, r3
 80044d4:	d132      	bne.n	800453c <__ieee754_pow+0x154>
 80044d6:	f1b9 0f00 	cmp.w	r9, #0
 80044da:	f280 8478 	bge.w	8004dce <__ieee754_pow+0x9e6>
 80044de:	4959      	ldr	r1, [pc, #356]	; (8004644 <__ieee754_pow+0x25c>)
 80044e0:	4632      	mov	r2, r6
 80044e2:	463b      	mov	r3, r7
 80044e4:	2000      	movs	r0, #0
 80044e6:	f7fc f9b1 	bl	800084c <__aeabi_ddiv>
 80044ea:	e79c      	b.n	8004426 <__ieee754_pow+0x3e>
 80044ec:	2300      	movs	r3, #0
 80044ee:	9304      	str	r3, [sp, #16]
 80044f0:	2a00      	cmp	r2, #0
 80044f2:	d13d      	bne.n	8004570 <__ieee754_pow+0x188>
 80044f4:	4b51      	ldr	r3, [pc, #324]	; (800463c <__ieee754_pow+0x254>)
 80044f6:	4598      	cmp	r8, r3
 80044f8:	d1ea      	bne.n	80044d0 <__ieee754_pow+0xe8>
 80044fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80044fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004502:	ea53 030a 	orrs.w	r3, r3, sl
 8004506:	f000 845a 	beq.w	8004dbe <__ieee754_pow+0x9d6>
 800450a:	4b4f      	ldr	r3, [pc, #316]	; (8004648 <__ieee754_pow+0x260>)
 800450c:	429c      	cmp	r4, r3
 800450e:	dd08      	ble.n	8004522 <__ieee754_pow+0x13a>
 8004510:	f1b9 0f00 	cmp.w	r9, #0
 8004514:	f2c0 8457 	blt.w	8004dc6 <__ieee754_pow+0x9de>
 8004518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800451c:	e783      	b.n	8004426 <__ieee754_pow+0x3e>
 800451e:	2302      	movs	r3, #2
 8004520:	e7e5      	b.n	80044ee <__ieee754_pow+0x106>
 8004522:	f1b9 0f00 	cmp.w	r9, #0
 8004526:	f04f 0000 	mov.w	r0, #0
 800452a:	f04f 0100 	mov.w	r1, #0
 800452e:	f6bf af7a 	bge.w	8004426 <__ieee754_pow+0x3e>
 8004532:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004536:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800453a:	e774      	b.n	8004426 <__ieee754_pow+0x3e>
 800453c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004540:	d106      	bne.n	8004550 <__ieee754_pow+0x168>
 8004542:	4632      	mov	r2, r6
 8004544:	463b      	mov	r3, r7
 8004546:	4630      	mov	r0, r6
 8004548:	4639      	mov	r1, r7
 800454a:	f7fc f855 	bl	80005f8 <__aeabi_dmul>
 800454e:	e76a      	b.n	8004426 <__ieee754_pow+0x3e>
 8004550:	4b3e      	ldr	r3, [pc, #248]	; (800464c <__ieee754_pow+0x264>)
 8004552:	4599      	cmp	r9, r3
 8004554:	d10c      	bne.n	8004570 <__ieee754_pow+0x188>
 8004556:	2d00      	cmp	r5, #0
 8004558:	db0a      	blt.n	8004570 <__ieee754_pow+0x188>
 800455a:	ec47 6b10 	vmov	d0, r6, r7
 800455e:	b009      	add	sp, #36	; 0x24
 8004560:	ecbd 8b06 	vpop	{d8-d10}
 8004564:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004568:	f000 bc6c 	b.w	8004e44 <__ieee754_sqrt>
 800456c:	2300      	movs	r3, #0
 800456e:	9304      	str	r3, [sp, #16]
 8004570:	ec47 6b10 	vmov	d0, r6, r7
 8004574:	f000 fd48 	bl	8005008 <fabs>
 8004578:	ec51 0b10 	vmov	r0, r1, d0
 800457c:	f1ba 0f00 	cmp.w	sl, #0
 8004580:	d129      	bne.n	80045d6 <__ieee754_pow+0x1ee>
 8004582:	b124      	cbz	r4, 800458e <__ieee754_pow+0x1a6>
 8004584:	4b2f      	ldr	r3, [pc, #188]	; (8004644 <__ieee754_pow+0x25c>)
 8004586:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800458a:	429a      	cmp	r2, r3
 800458c:	d123      	bne.n	80045d6 <__ieee754_pow+0x1ee>
 800458e:	f1b9 0f00 	cmp.w	r9, #0
 8004592:	da05      	bge.n	80045a0 <__ieee754_pow+0x1b8>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	2000      	movs	r0, #0
 800459a:	492a      	ldr	r1, [pc, #168]	; (8004644 <__ieee754_pow+0x25c>)
 800459c:	f7fc f956 	bl	800084c <__aeabi_ddiv>
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	f6bf af40 	bge.w	8004426 <__ieee754_pow+0x3e>
 80045a6:	9b04      	ldr	r3, [sp, #16]
 80045a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80045ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80045b0:	4323      	orrs	r3, r4
 80045b2:	d108      	bne.n	80045c6 <__ieee754_pow+0x1de>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	f7fb fe64 	bl	8000288 <__aeabi_dsub>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	e78f      	b.n	80044e6 <__ieee754_pow+0xfe>
 80045c6:	9b04      	ldr	r3, [sp, #16]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	f47f af2c 	bne.w	8004426 <__ieee754_pow+0x3e>
 80045ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045d2:	4619      	mov	r1, r3
 80045d4:	e727      	b.n	8004426 <__ieee754_pow+0x3e>
 80045d6:	0feb      	lsrs	r3, r5, #31
 80045d8:	3b01      	subs	r3, #1
 80045da:	9306      	str	r3, [sp, #24]
 80045dc:	9a06      	ldr	r2, [sp, #24]
 80045de:	9b04      	ldr	r3, [sp, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d102      	bne.n	80045ea <__ieee754_pow+0x202>
 80045e4:	4632      	mov	r2, r6
 80045e6:	463b      	mov	r3, r7
 80045e8:	e7e6      	b.n	80045b8 <__ieee754_pow+0x1d0>
 80045ea:	4b19      	ldr	r3, [pc, #100]	; (8004650 <__ieee754_pow+0x268>)
 80045ec:	4598      	cmp	r8, r3
 80045ee:	f340 80fb 	ble.w	80047e8 <__ieee754_pow+0x400>
 80045f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80045f6:	4598      	cmp	r8, r3
 80045f8:	4b13      	ldr	r3, [pc, #76]	; (8004648 <__ieee754_pow+0x260>)
 80045fa:	dd0c      	ble.n	8004616 <__ieee754_pow+0x22e>
 80045fc:	429c      	cmp	r4, r3
 80045fe:	dc0f      	bgt.n	8004620 <__ieee754_pow+0x238>
 8004600:	f1b9 0f00 	cmp.w	r9, #0
 8004604:	da0f      	bge.n	8004626 <__ieee754_pow+0x23e>
 8004606:	2000      	movs	r0, #0
 8004608:	b009      	add	sp, #36	; 0x24
 800460a:	ecbd 8b06 	vpop	{d8-d10}
 800460e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004612:	f000 bcf0 	b.w	8004ff6 <__math_oflow>
 8004616:	429c      	cmp	r4, r3
 8004618:	dbf2      	blt.n	8004600 <__ieee754_pow+0x218>
 800461a:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <__ieee754_pow+0x25c>)
 800461c:	429c      	cmp	r4, r3
 800461e:	dd19      	ble.n	8004654 <__ieee754_pow+0x26c>
 8004620:	f1b9 0f00 	cmp.w	r9, #0
 8004624:	dcef      	bgt.n	8004606 <__ieee754_pow+0x21e>
 8004626:	2000      	movs	r0, #0
 8004628:	b009      	add	sp, #36	; 0x24
 800462a:	ecbd 8b06 	vpop	{d8-d10}
 800462e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004632:	f000 bcd7 	b.w	8004fe4 <__math_uflow>
 8004636:	bf00      	nop
 8004638:	fff00000 	.word	0xfff00000
 800463c:	7ff00000 	.word	0x7ff00000
 8004640:	433fffff 	.word	0x433fffff
 8004644:	3ff00000 	.word	0x3ff00000
 8004648:	3fefffff 	.word	0x3fefffff
 800464c:	3fe00000 	.word	0x3fe00000
 8004650:	41e00000 	.word	0x41e00000
 8004654:	4b60      	ldr	r3, [pc, #384]	; (80047d8 <__ieee754_pow+0x3f0>)
 8004656:	2200      	movs	r2, #0
 8004658:	f7fb fe16 	bl	8000288 <__aeabi_dsub>
 800465c:	a354      	add	r3, pc, #336	; (adr r3, 80047b0 <__ieee754_pow+0x3c8>)
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	4604      	mov	r4, r0
 8004664:	460d      	mov	r5, r1
 8004666:	f7fb ffc7 	bl	80005f8 <__aeabi_dmul>
 800466a:	a353      	add	r3, pc, #332	; (adr r3, 80047b8 <__ieee754_pow+0x3d0>)
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	4606      	mov	r6, r0
 8004672:	460f      	mov	r7, r1
 8004674:	4620      	mov	r0, r4
 8004676:	4629      	mov	r1, r5
 8004678:	f7fb ffbe 	bl	80005f8 <__aeabi_dmul>
 800467c:	4b57      	ldr	r3, [pc, #348]	; (80047dc <__ieee754_pow+0x3f4>)
 800467e:	4682      	mov	sl, r0
 8004680:	468b      	mov	fp, r1
 8004682:	2200      	movs	r2, #0
 8004684:	4620      	mov	r0, r4
 8004686:	4629      	mov	r1, r5
 8004688:	f7fb ffb6 	bl	80005f8 <__aeabi_dmul>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	a14b      	add	r1, pc, #300	; (adr r1, 80047c0 <__ieee754_pow+0x3d8>)
 8004692:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004696:	f7fb fdf7 	bl	8000288 <__aeabi_dsub>
 800469a:	4622      	mov	r2, r4
 800469c:	462b      	mov	r3, r5
 800469e:	f7fb ffab 	bl	80005f8 <__aeabi_dmul>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	2000      	movs	r0, #0
 80046a8:	494d      	ldr	r1, [pc, #308]	; (80047e0 <__ieee754_pow+0x3f8>)
 80046aa:	f7fb fded 	bl	8000288 <__aeabi_dsub>
 80046ae:	4622      	mov	r2, r4
 80046b0:	4680      	mov	r8, r0
 80046b2:	4689      	mov	r9, r1
 80046b4:	462b      	mov	r3, r5
 80046b6:	4620      	mov	r0, r4
 80046b8:	4629      	mov	r1, r5
 80046ba:	f7fb ff9d 	bl	80005f8 <__aeabi_dmul>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4640      	mov	r0, r8
 80046c4:	4649      	mov	r1, r9
 80046c6:	f7fb ff97 	bl	80005f8 <__aeabi_dmul>
 80046ca:	a33f      	add	r3, pc, #252	; (adr r3, 80047c8 <__ieee754_pow+0x3e0>)
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f7fb ff92 	bl	80005f8 <__aeabi_dmul>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4650      	mov	r0, sl
 80046da:	4659      	mov	r1, fp
 80046dc:	f7fb fdd4 	bl	8000288 <__aeabi_dsub>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4680      	mov	r8, r0
 80046e6:	4689      	mov	r9, r1
 80046e8:	4630      	mov	r0, r6
 80046ea:	4639      	mov	r1, r7
 80046ec:	f7fb fdce 	bl	800028c <__adddf3>
 80046f0:	2000      	movs	r0, #0
 80046f2:	4632      	mov	r2, r6
 80046f4:	463b      	mov	r3, r7
 80046f6:	4604      	mov	r4, r0
 80046f8:	460d      	mov	r5, r1
 80046fa:	f7fb fdc5 	bl	8000288 <__aeabi_dsub>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4640      	mov	r0, r8
 8004704:	4649      	mov	r1, r9
 8004706:	f7fb fdbf 	bl	8000288 <__aeabi_dsub>
 800470a:	9b04      	ldr	r3, [sp, #16]
 800470c:	9a06      	ldr	r2, [sp, #24]
 800470e:	3b01      	subs	r3, #1
 8004710:	4313      	orrs	r3, r2
 8004712:	4682      	mov	sl, r0
 8004714:	468b      	mov	fp, r1
 8004716:	f040 81e7 	bne.w	8004ae8 <__ieee754_pow+0x700>
 800471a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80047d0 <__ieee754_pow+0x3e8>
 800471e:	eeb0 8a47 	vmov.f32	s16, s14
 8004722:	eef0 8a67 	vmov.f32	s17, s15
 8004726:	e9dd 6700 	ldrd	r6, r7, [sp]
 800472a:	2600      	movs	r6, #0
 800472c:	4632      	mov	r2, r6
 800472e:	463b      	mov	r3, r7
 8004730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004734:	f7fb fda8 	bl	8000288 <__aeabi_dsub>
 8004738:	4622      	mov	r2, r4
 800473a:	462b      	mov	r3, r5
 800473c:	f7fb ff5c 	bl	80005f8 <__aeabi_dmul>
 8004740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004744:	4680      	mov	r8, r0
 8004746:	4689      	mov	r9, r1
 8004748:	4650      	mov	r0, sl
 800474a:	4659      	mov	r1, fp
 800474c:	f7fb ff54 	bl	80005f8 <__aeabi_dmul>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4640      	mov	r0, r8
 8004756:	4649      	mov	r1, r9
 8004758:	f7fb fd98 	bl	800028c <__adddf3>
 800475c:	4632      	mov	r2, r6
 800475e:	463b      	mov	r3, r7
 8004760:	4680      	mov	r8, r0
 8004762:	4689      	mov	r9, r1
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fb ff46 	bl	80005f8 <__aeabi_dmul>
 800476c:	460b      	mov	r3, r1
 800476e:	4604      	mov	r4, r0
 8004770:	460d      	mov	r5, r1
 8004772:	4602      	mov	r2, r0
 8004774:	4649      	mov	r1, r9
 8004776:	4640      	mov	r0, r8
 8004778:	f7fb fd88 	bl	800028c <__adddf3>
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <__ieee754_pow+0x3fc>)
 800477e:	4299      	cmp	r1, r3
 8004780:	ec45 4b19 	vmov	d9, r4, r5
 8004784:	4606      	mov	r6, r0
 8004786:	460f      	mov	r7, r1
 8004788:	468b      	mov	fp, r1
 800478a:	f340 82f1 	ble.w	8004d70 <__ieee754_pow+0x988>
 800478e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004792:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004796:	4303      	orrs	r3, r0
 8004798:	f000 81e4 	beq.w	8004b64 <__ieee754_pow+0x77c>
 800479c:	ec51 0b18 	vmov	r0, r1, d8
 80047a0:	2200      	movs	r2, #0
 80047a2:	2300      	movs	r3, #0
 80047a4:	f7fc f99a 	bl	8000adc <__aeabi_dcmplt>
 80047a8:	3800      	subs	r0, #0
 80047aa:	bf18      	it	ne
 80047ac:	2001      	movne	r0, #1
 80047ae:	e72b      	b.n	8004608 <__ieee754_pow+0x220>
 80047b0:	60000000 	.word	0x60000000
 80047b4:	3ff71547 	.word	0x3ff71547
 80047b8:	f85ddf44 	.word	0xf85ddf44
 80047bc:	3e54ae0b 	.word	0x3e54ae0b
 80047c0:	55555555 	.word	0x55555555
 80047c4:	3fd55555 	.word	0x3fd55555
 80047c8:	652b82fe 	.word	0x652b82fe
 80047cc:	3ff71547 	.word	0x3ff71547
 80047d0:	00000000 	.word	0x00000000
 80047d4:	bff00000 	.word	0xbff00000
 80047d8:	3ff00000 	.word	0x3ff00000
 80047dc:	3fd00000 	.word	0x3fd00000
 80047e0:	3fe00000 	.word	0x3fe00000
 80047e4:	408fffff 	.word	0x408fffff
 80047e8:	4bd5      	ldr	r3, [pc, #852]	; (8004b40 <__ieee754_pow+0x758>)
 80047ea:	402b      	ands	r3, r5
 80047ec:	2200      	movs	r2, #0
 80047ee:	b92b      	cbnz	r3, 80047fc <__ieee754_pow+0x414>
 80047f0:	4bd4      	ldr	r3, [pc, #848]	; (8004b44 <__ieee754_pow+0x75c>)
 80047f2:	f7fb ff01 	bl	80005f8 <__aeabi_dmul>
 80047f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80047fa:	460c      	mov	r4, r1
 80047fc:	1523      	asrs	r3, r4, #20
 80047fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004802:	4413      	add	r3, r2
 8004804:	9305      	str	r3, [sp, #20]
 8004806:	4bd0      	ldr	r3, [pc, #832]	; (8004b48 <__ieee754_pow+0x760>)
 8004808:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800480c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004810:	429c      	cmp	r4, r3
 8004812:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004816:	dd08      	ble.n	800482a <__ieee754_pow+0x442>
 8004818:	4bcc      	ldr	r3, [pc, #816]	; (8004b4c <__ieee754_pow+0x764>)
 800481a:	429c      	cmp	r4, r3
 800481c:	f340 8162 	ble.w	8004ae4 <__ieee754_pow+0x6fc>
 8004820:	9b05      	ldr	r3, [sp, #20]
 8004822:	3301      	adds	r3, #1
 8004824:	9305      	str	r3, [sp, #20]
 8004826:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800482a:	2400      	movs	r4, #0
 800482c:	00e3      	lsls	r3, r4, #3
 800482e:	9307      	str	r3, [sp, #28]
 8004830:	4bc7      	ldr	r3, [pc, #796]	; (8004b50 <__ieee754_pow+0x768>)
 8004832:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004836:	ed93 7b00 	vldr	d7, [r3]
 800483a:	4629      	mov	r1, r5
 800483c:	ec53 2b17 	vmov	r2, r3, d7
 8004840:	eeb0 9a47 	vmov.f32	s18, s14
 8004844:	eef0 9a67 	vmov.f32	s19, s15
 8004848:	4682      	mov	sl, r0
 800484a:	f7fb fd1d 	bl	8000288 <__aeabi_dsub>
 800484e:	4652      	mov	r2, sl
 8004850:	4606      	mov	r6, r0
 8004852:	460f      	mov	r7, r1
 8004854:	462b      	mov	r3, r5
 8004856:	ec51 0b19 	vmov	r0, r1, d9
 800485a:	f7fb fd17 	bl	800028c <__adddf3>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	2000      	movs	r0, #0
 8004864:	49bb      	ldr	r1, [pc, #748]	; (8004b54 <__ieee754_pow+0x76c>)
 8004866:	f7fb fff1 	bl	800084c <__aeabi_ddiv>
 800486a:	ec41 0b1a 	vmov	d10, r0, r1
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4630      	mov	r0, r6
 8004874:	4639      	mov	r1, r7
 8004876:	f7fb febf 	bl	80005f8 <__aeabi_dmul>
 800487a:	2300      	movs	r3, #0
 800487c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004880:	9302      	str	r3, [sp, #8]
 8004882:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004886:	46ab      	mov	fp, r5
 8004888:	106d      	asrs	r5, r5, #1
 800488a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800488e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004892:	ec41 0b18 	vmov	d8, r0, r1
 8004896:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800489a:	2200      	movs	r2, #0
 800489c:	4640      	mov	r0, r8
 800489e:	4649      	mov	r1, r9
 80048a0:	4614      	mov	r4, r2
 80048a2:	461d      	mov	r5, r3
 80048a4:	f7fb fea8 	bl	80005f8 <__aeabi_dmul>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4630      	mov	r0, r6
 80048ae:	4639      	mov	r1, r7
 80048b0:	f7fb fcea 	bl	8000288 <__aeabi_dsub>
 80048b4:	ec53 2b19 	vmov	r2, r3, d9
 80048b8:	4606      	mov	r6, r0
 80048ba:	460f      	mov	r7, r1
 80048bc:	4620      	mov	r0, r4
 80048be:	4629      	mov	r1, r5
 80048c0:	f7fb fce2 	bl	8000288 <__aeabi_dsub>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4650      	mov	r0, sl
 80048ca:	4659      	mov	r1, fp
 80048cc:	f7fb fcdc 	bl	8000288 <__aeabi_dsub>
 80048d0:	4642      	mov	r2, r8
 80048d2:	464b      	mov	r3, r9
 80048d4:	f7fb fe90 	bl	80005f8 <__aeabi_dmul>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4630      	mov	r0, r6
 80048de:	4639      	mov	r1, r7
 80048e0:	f7fb fcd2 	bl	8000288 <__aeabi_dsub>
 80048e4:	ec53 2b1a 	vmov	r2, r3, d10
 80048e8:	f7fb fe86 	bl	80005f8 <__aeabi_dmul>
 80048ec:	ec53 2b18 	vmov	r2, r3, d8
 80048f0:	ec41 0b19 	vmov	d9, r0, r1
 80048f4:	ec51 0b18 	vmov	r0, r1, d8
 80048f8:	f7fb fe7e 	bl	80005f8 <__aeabi_dmul>
 80048fc:	a37c      	add	r3, pc, #496	; (adr r3, 8004af0 <__ieee754_pow+0x708>)
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	4604      	mov	r4, r0
 8004904:	460d      	mov	r5, r1
 8004906:	f7fb fe77 	bl	80005f8 <__aeabi_dmul>
 800490a:	a37b      	add	r3, pc, #492	; (adr r3, 8004af8 <__ieee754_pow+0x710>)
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f7fb fcbc 	bl	800028c <__adddf3>
 8004914:	4622      	mov	r2, r4
 8004916:	462b      	mov	r3, r5
 8004918:	f7fb fe6e 	bl	80005f8 <__aeabi_dmul>
 800491c:	a378      	add	r3, pc, #480	; (adr r3, 8004b00 <__ieee754_pow+0x718>)
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	f7fb fcb3 	bl	800028c <__adddf3>
 8004926:	4622      	mov	r2, r4
 8004928:	462b      	mov	r3, r5
 800492a:	f7fb fe65 	bl	80005f8 <__aeabi_dmul>
 800492e:	a376      	add	r3, pc, #472	; (adr r3, 8004b08 <__ieee754_pow+0x720>)
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f7fb fcaa 	bl	800028c <__adddf3>
 8004938:	4622      	mov	r2, r4
 800493a:	462b      	mov	r3, r5
 800493c:	f7fb fe5c 	bl	80005f8 <__aeabi_dmul>
 8004940:	a373      	add	r3, pc, #460	; (adr r3, 8004b10 <__ieee754_pow+0x728>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f7fb fca1 	bl	800028c <__adddf3>
 800494a:	4622      	mov	r2, r4
 800494c:	462b      	mov	r3, r5
 800494e:	f7fb fe53 	bl	80005f8 <__aeabi_dmul>
 8004952:	a371      	add	r3, pc, #452	; (adr r3, 8004b18 <__ieee754_pow+0x730>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fb fc98 	bl	800028c <__adddf3>
 800495c:	4622      	mov	r2, r4
 800495e:	4606      	mov	r6, r0
 8004960:	460f      	mov	r7, r1
 8004962:	462b      	mov	r3, r5
 8004964:	4620      	mov	r0, r4
 8004966:	4629      	mov	r1, r5
 8004968:	f7fb fe46 	bl	80005f8 <__aeabi_dmul>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4630      	mov	r0, r6
 8004972:	4639      	mov	r1, r7
 8004974:	f7fb fe40 	bl	80005f8 <__aeabi_dmul>
 8004978:	4642      	mov	r2, r8
 800497a:	4604      	mov	r4, r0
 800497c:	460d      	mov	r5, r1
 800497e:	464b      	mov	r3, r9
 8004980:	ec51 0b18 	vmov	r0, r1, d8
 8004984:	f7fb fc82 	bl	800028c <__adddf3>
 8004988:	ec53 2b19 	vmov	r2, r3, d9
 800498c:	f7fb fe34 	bl	80005f8 <__aeabi_dmul>
 8004990:	4622      	mov	r2, r4
 8004992:	462b      	mov	r3, r5
 8004994:	f7fb fc7a 	bl	800028c <__adddf3>
 8004998:	4642      	mov	r2, r8
 800499a:	4682      	mov	sl, r0
 800499c:	468b      	mov	fp, r1
 800499e:	464b      	mov	r3, r9
 80049a0:	4640      	mov	r0, r8
 80049a2:	4649      	mov	r1, r9
 80049a4:	f7fb fe28 	bl	80005f8 <__aeabi_dmul>
 80049a8:	4b6b      	ldr	r3, [pc, #428]	; (8004b58 <__ieee754_pow+0x770>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	4606      	mov	r6, r0
 80049ae:	460f      	mov	r7, r1
 80049b0:	f7fb fc6c 	bl	800028c <__adddf3>
 80049b4:	4652      	mov	r2, sl
 80049b6:	465b      	mov	r3, fp
 80049b8:	f7fb fc68 	bl	800028c <__adddf3>
 80049bc:	2000      	movs	r0, #0
 80049be:	4604      	mov	r4, r0
 80049c0:	460d      	mov	r5, r1
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4640      	mov	r0, r8
 80049c8:	4649      	mov	r1, r9
 80049ca:	f7fb fe15 	bl	80005f8 <__aeabi_dmul>
 80049ce:	4b62      	ldr	r3, [pc, #392]	; (8004b58 <__ieee754_pow+0x770>)
 80049d0:	4680      	mov	r8, r0
 80049d2:	4689      	mov	r9, r1
 80049d4:	2200      	movs	r2, #0
 80049d6:	4620      	mov	r0, r4
 80049d8:	4629      	mov	r1, r5
 80049da:	f7fb fc55 	bl	8000288 <__aeabi_dsub>
 80049de:	4632      	mov	r2, r6
 80049e0:	463b      	mov	r3, r7
 80049e2:	f7fb fc51 	bl	8000288 <__aeabi_dsub>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4650      	mov	r0, sl
 80049ec:	4659      	mov	r1, fp
 80049ee:	f7fb fc4b 	bl	8000288 <__aeabi_dsub>
 80049f2:	ec53 2b18 	vmov	r2, r3, d8
 80049f6:	f7fb fdff 	bl	80005f8 <__aeabi_dmul>
 80049fa:	4622      	mov	r2, r4
 80049fc:	4606      	mov	r6, r0
 80049fe:	460f      	mov	r7, r1
 8004a00:	462b      	mov	r3, r5
 8004a02:	ec51 0b19 	vmov	r0, r1, d9
 8004a06:	f7fb fdf7 	bl	80005f8 <__aeabi_dmul>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4630      	mov	r0, r6
 8004a10:	4639      	mov	r1, r7
 8004a12:	f7fb fc3b 	bl	800028c <__adddf3>
 8004a16:	4606      	mov	r6, r0
 8004a18:	460f      	mov	r7, r1
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4640      	mov	r0, r8
 8004a20:	4649      	mov	r1, r9
 8004a22:	f7fb fc33 	bl	800028c <__adddf3>
 8004a26:	a33e      	add	r3, pc, #248	; (adr r3, 8004b20 <__ieee754_pow+0x738>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	4604      	mov	r4, r0
 8004a30:	460d      	mov	r5, r1
 8004a32:	f7fb fde1 	bl	80005f8 <__aeabi_dmul>
 8004a36:	4642      	mov	r2, r8
 8004a38:	ec41 0b18 	vmov	d8, r0, r1
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	f7fb fc21 	bl	8000288 <__aeabi_dsub>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	f7fb fc1b 	bl	8000288 <__aeabi_dsub>
 8004a52:	a335      	add	r3, pc, #212	; (adr r3, 8004b28 <__ieee754_pow+0x740>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f7fb fdce 	bl	80005f8 <__aeabi_dmul>
 8004a5c:	a334      	add	r3, pc, #208	; (adr r3, 8004b30 <__ieee754_pow+0x748>)
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	4606      	mov	r6, r0
 8004a64:	460f      	mov	r7, r1
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f7fb fdc5 	bl	80005f8 <__aeabi_dmul>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4630      	mov	r0, r6
 8004a74:	4639      	mov	r1, r7
 8004a76:	f7fb fc09 	bl	800028c <__adddf3>
 8004a7a:	9a07      	ldr	r2, [sp, #28]
 8004a7c:	4b37      	ldr	r3, [pc, #220]	; (8004b5c <__ieee754_pow+0x774>)
 8004a7e:	4413      	add	r3, r2
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	f7fb fc02 	bl	800028c <__adddf3>
 8004a88:	4682      	mov	sl, r0
 8004a8a:	9805      	ldr	r0, [sp, #20]
 8004a8c:	468b      	mov	fp, r1
 8004a8e:	f7fb fd49 	bl	8000524 <__aeabi_i2d>
 8004a92:	9a07      	ldr	r2, [sp, #28]
 8004a94:	4b32      	ldr	r3, [pc, #200]	; (8004b60 <__ieee754_pow+0x778>)
 8004a96:	4413      	add	r3, r2
 8004a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	460f      	mov	r7, r1
 8004aa0:	4652      	mov	r2, sl
 8004aa2:	465b      	mov	r3, fp
 8004aa4:	ec51 0b18 	vmov	r0, r1, d8
 8004aa8:	f7fb fbf0 	bl	800028c <__adddf3>
 8004aac:	4642      	mov	r2, r8
 8004aae:	464b      	mov	r3, r9
 8004ab0:	f7fb fbec 	bl	800028c <__adddf3>
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	f7fb fbe8 	bl	800028c <__adddf3>
 8004abc:	2000      	movs	r0, #0
 8004abe:	4632      	mov	r2, r6
 8004ac0:	463b      	mov	r3, r7
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	460d      	mov	r5, r1
 8004ac6:	f7fb fbdf 	bl	8000288 <__aeabi_dsub>
 8004aca:	4642      	mov	r2, r8
 8004acc:	464b      	mov	r3, r9
 8004ace:	f7fb fbdb 	bl	8000288 <__aeabi_dsub>
 8004ad2:	ec53 2b18 	vmov	r2, r3, d8
 8004ad6:	f7fb fbd7 	bl	8000288 <__aeabi_dsub>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4650      	mov	r0, sl
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	e610      	b.n	8004706 <__ieee754_pow+0x31e>
 8004ae4:	2401      	movs	r4, #1
 8004ae6:	e6a1      	b.n	800482c <__ieee754_pow+0x444>
 8004ae8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004b38 <__ieee754_pow+0x750>
 8004aec:	e617      	b.n	800471e <__ieee754_pow+0x336>
 8004aee:	bf00      	nop
 8004af0:	4a454eef 	.word	0x4a454eef
 8004af4:	3fca7e28 	.word	0x3fca7e28
 8004af8:	93c9db65 	.word	0x93c9db65
 8004afc:	3fcd864a 	.word	0x3fcd864a
 8004b00:	a91d4101 	.word	0xa91d4101
 8004b04:	3fd17460 	.word	0x3fd17460
 8004b08:	518f264d 	.word	0x518f264d
 8004b0c:	3fd55555 	.word	0x3fd55555
 8004b10:	db6fabff 	.word	0xdb6fabff
 8004b14:	3fdb6db6 	.word	0x3fdb6db6
 8004b18:	33333303 	.word	0x33333303
 8004b1c:	3fe33333 	.word	0x3fe33333
 8004b20:	e0000000 	.word	0xe0000000
 8004b24:	3feec709 	.word	0x3feec709
 8004b28:	dc3a03fd 	.word	0xdc3a03fd
 8004b2c:	3feec709 	.word	0x3feec709
 8004b30:	145b01f5 	.word	0x145b01f5
 8004b34:	be3e2fe0 	.word	0xbe3e2fe0
 8004b38:	00000000 	.word	0x00000000
 8004b3c:	3ff00000 	.word	0x3ff00000
 8004b40:	7ff00000 	.word	0x7ff00000
 8004b44:	43400000 	.word	0x43400000
 8004b48:	0003988e 	.word	0x0003988e
 8004b4c:	000bb679 	.word	0x000bb679
 8004b50:	08005238 	.word	0x08005238
 8004b54:	3ff00000 	.word	0x3ff00000
 8004b58:	40080000 	.word	0x40080000
 8004b5c:	08005258 	.word	0x08005258
 8004b60:	08005248 	.word	0x08005248
 8004b64:	a3b5      	add	r3, pc, #724	; (adr r3, 8004e3c <__ieee754_pow+0xa54>)
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	f7fb fb8d 	bl	800028c <__adddf3>
 8004b72:	4622      	mov	r2, r4
 8004b74:	ec41 0b1a 	vmov	d10, r0, r1
 8004b78:	462b      	mov	r3, r5
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	4639      	mov	r1, r7
 8004b7e:	f7fb fb83 	bl	8000288 <__aeabi_dsub>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	ec51 0b1a 	vmov	r0, r1, d10
 8004b8a:	f7fb ffc5 	bl	8000b18 <__aeabi_dcmpgt>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	f47f ae04 	bne.w	800479c <__ieee754_pow+0x3b4>
 8004b94:	4aa4      	ldr	r2, [pc, #656]	; (8004e28 <__ieee754_pow+0xa40>)
 8004b96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	f340 8108 	ble.w	8004db0 <__ieee754_pow+0x9c8>
 8004ba0:	151b      	asrs	r3, r3, #20
 8004ba2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004ba6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004baa:	fa4a f303 	asr.w	r3, sl, r3
 8004bae:	445b      	add	r3, fp
 8004bb0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004bb4:	4e9d      	ldr	r6, [pc, #628]	; (8004e2c <__ieee754_pow+0xa44>)
 8004bb6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004bba:	4116      	asrs	r6, r2
 8004bbc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	ea23 0106 	bic.w	r1, r3, r6
 8004bc6:	f1c2 0214 	rsb	r2, r2, #20
 8004bca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004bce:	fa4a fa02 	asr.w	sl, sl, r2
 8004bd2:	f1bb 0f00 	cmp.w	fp, #0
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4620      	mov	r0, r4
 8004bdc:	4629      	mov	r1, r5
 8004bde:	bfb8      	it	lt
 8004be0:	f1ca 0a00 	rsblt	sl, sl, #0
 8004be4:	f7fb fb50 	bl	8000288 <__aeabi_dsub>
 8004be8:	ec41 0b19 	vmov	d9, r0, r1
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	ec51 0b19 	vmov	r0, r1, d9
 8004bf4:	f7fb fb4a 	bl	800028c <__adddf3>
 8004bf8:	a37b      	add	r3, pc, #492	; (adr r3, 8004de8 <__ieee754_pow+0xa00>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	2000      	movs	r0, #0
 8004c00:	4604      	mov	r4, r0
 8004c02:	460d      	mov	r5, r1
 8004c04:	f7fb fcf8 	bl	80005f8 <__aeabi_dmul>
 8004c08:	ec53 2b19 	vmov	r2, r3, d9
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	460f      	mov	r7, r1
 8004c10:	4620      	mov	r0, r4
 8004c12:	4629      	mov	r1, r5
 8004c14:	f7fb fb38 	bl	8000288 <__aeabi_dsub>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	4649      	mov	r1, r9
 8004c20:	f7fb fb32 	bl	8000288 <__aeabi_dsub>
 8004c24:	a372      	add	r3, pc, #456	; (adr r3, 8004df0 <__ieee754_pow+0xa08>)
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f7fb fce5 	bl	80005f8 <__aeabi_dmul>
 8004c2e:	a372      	add	r3, pc, #456	; (adr r3, 8004df8 <__ieee754_pow+0xa10>)
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	4680      	mov	r8, r0
 8004c36:	4689      	mov	r9, r1
 8004c38:	4620      	mov	r0, r4
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	f7fb fcdc 	bl	80005f8 <__aeabi_dmul>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4640      	mov	r0, r8
 8004c46:	4649      	mov	r1, r9
 8004c48:	f7fb fb20 	bl	800028c <__adddf3>
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	460d      	mov	r5, r1
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4630      	mov	r0, r6
 8004c56:	4639      	mov	r1, r7
 8004c58:	f7fb fb18 	bl	800028c <__adddf3>
 8004c5c:	4632      	mov	r2, r6
 8004c5e:	463b      	mov	r3, r7
 8004c60:	4680      	mov	r8, r0
 8004c62:	4689      	mov	r9, r1
 8004c64:	f7fb fb10 	bl	8000288 <__aeabi_dsub>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f7fb fb0a 	bl	8000288 <__aeabi_dsub>
 8004c74:	4642      	mov	r2, r8
 8004c76:	4606      	mov	r6, r0
 8004c78:	460f      	mov	r7, r1
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	4640      	mov	r0, r8
 8004c7e:	4649      	mov	r1, r9
 8004c80:	f7fb fcba 	bl	80005f8 <__aeabi_dmul>
 8004c84:	a35e      	add	r3, pc, #376	; (adr r3, 8004e00 <__ieee754_pow+0xa18>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	f7fb fcb3 	bl	80005f8 <__aeabi_dmul>
 8004c92:	a35d      	add	r3, pc, #372	; (adr r3, 8004e08 <__ieee754_pow+0xa20>)
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	f7fb faf6 	bl	8000288 <__aeabi_dsub>
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	f7fb fcaa 	bl	80005f8 <__aeabi_dmul>
 8004ca4:	a35a      	add	r3, pc, #360	; (adr r3, 8004e10 <__ieee754_pow+0xa28>)
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	f7fb faef 	bl	800028c <__adddf3>
 8004cae:	4622      	mov	r2, r4
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	f7fb fca1 	bl	80005f8 <__aeabi_dmul>
 8004cb6:	a358      	add	r3, pc, #352	; (adr r3, 8004e18 <__ieee754_pow+0xa30>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f7fb fae4 	bl	8000288 <__aeabi_dsub>
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	462b      	mov	r3, r5
 8004cc4:	f7fb fc98 	bl	80005f8 <__aeabi_dmul>
 8004cc8:	a355      	add	r3, pc, #340	; (adr r3, 8004e20 <__ieee754_pow+0xa38>)
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	f7fb fadd 	bl	800028c <__adddf3>
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	f7fb fc8f 	bl	80005f8 <__aeabi_dmul>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4640      	mov	r0, r8
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	f7fb fad1 	bl	8000288 <__aeabi_dsub>
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	460d      	mov	r5, r1
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4640      	mov	r0, r8
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	f7fb fc81 	bl	80005f8 <__aeabi_dmul>
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	ec41 0b19 	vmov	d9, r0, r1
 8004cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d00:	4620      	mov	r0, r4
 8004d02:	4629      	mov	r1, r5
 8004d04:	f7fb fac0 	bl	8000288 <__aeabi_dsub>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	ec51 0b19 	vmov	r0, r1, d9
 8004d10:	f7fb fd9c 	bl	800084c <__aeabi_ddiv>
 8004d14:	4632      	mov	r2, r6
 8004d16:	4604      	mov	r4, r0
 8004d18:	460d      	mov	r5, r1
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	4649      	mov	r1, r9
 8004d20:	f7fb fc6a 	bl	80005f8 <__aeabi_dmul>
 8004d24:	4632      	mov	r2, r6
 8004d26:	463b      	mov	r3, r7
 8004d28:	f7fb fab0 	bl	800028c <__adddf3>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4620      	mov	r0, r4
 8004d32:	4629      	mov	r1, r5
 8004d34:	f7fb faa8 	bl	8000288 <__aeabi_dsub>
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	f7fb faa4 	bl	8000288 <__aeabi_dsub>
 8004d40:	460b      	mov	r3, r1
 8004d42:	4602      	mov	r2, r0
 8004d44:	493a      	ldr	r1, [pc, #232]	; (8004e30 <__ieee754_pow+0xa48>)
 8004d46:	2000      	movs	r0, #0
 8004d48:	f7fb fa9e 	bl	8000288 <__aeabi_dsub>
 8004d4c:	ec41 0b10 	vmov	d0, r0, r1
 8004d50:	ee10 3a90 	vmov	r3, s1
 8004d54:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d5c:	da2b      	bge.n	8004db6 <__ieee754_pow+0x9ce>
 8004d5e:	4650      	mov	r0, sl
 8004d60:	f000 f966 	bl	8005030 <scalbn>
 8004d64:	ec51 0b10 	vmov	r0, r1, d0
 8004d68:	ec53 2b18 	vmov	r2, r3, d8
 8004d6c:	f7ff bbed 	b.w	800454a <__ieee754_pow+0x162>
 8004d70:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <__ieee754_pow+0xa4c>)
 8004d72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004d76:	429e      	cmp	r6, r3
 8004d78:	f77f af0c 	ble.w	8004b94 <__ieee754_pow+0x7ac>
 8004d7c:	4b2e      	ldr	r3, [pc, #184]	; (8004e38 <__ieee754_pow+0xa50>)
 8004d7e:	440b      	add	r3, r1
 8004d80:	4303      	orrs	r3, r0
 8004d82:	d009      	beq.n	8004d98 <__ieee754_pow+0x9b0>
 8004d84:	ec51 0b18 	vmov	r0, r1, d8
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f7fb fea6 	bl	8000adc <__aeabi_dcmplt>
 8004d90:	3800      	subs	r0, #0
 8004d92:	bf18      	it	ne
 8004d94:	2001      	movne	r0, #1
 8004d96:	e447      	b.n	8004628 <__ieee754_pow+0x240>
 8004d98:	4622      	mov	r2, r4
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	f7fb fa74 	bl	8000288 <__aeabi_dsub>
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	f7fb feae 	bl	8000b04 <__aeabi_dcmpge>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	f43f aef3 	beq.w	8004b94 <__ieee754_pow+0x7ac>
 8004dae:	e7e9      	b.n	8004d84 <__ieee754_pow+0x99c>
 8004db0:	f04f 0a00 	mov.w	sl, #0
 8004db4:	e71a      	b.n	8004bec <__ieee754_pow+0x804>
 8004db6:	ec51 0b10 	vmov	r0, r1, d0
 8004dba:	4619      	mov	r1, r3
 8004dbc:	e7d4      	b.n	8004d68 <__ieee754_pow+0x980>
 8004dbe:	491c      	ldr	r1, [pc, #112]	; (8004e30 <__ieee754_pow+0xa48>)
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	f7ff bb30 	b.w	8004426 <__ieee754_pow+0x3e>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f7ff bb2c 	b.w	8004426 <__ieee754_pow+0x3e>
 8004dce:	4630      	mov	r0, r6
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	f7ff bb28 	b.w	8004426 <__ieee754_pow+0x3e>
 8004dd6:	9204      	str	r2, [sp, #16]
 8004dd8:	f7ff bb7a 	b.w	80044d0 <__ieee754_pow+0xe8>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f7ff bb64 	b.w	80044aa <__ieee754_pow+0xc2>
 8004de2:	bf00      	nop
 8004de4:	f3af 8000 	nop.w
 8004de8:	00000000 	.word	0x00000000
 8004dec:	3fe62e43 	.word	0x3fe62e43
 8004df0:	fefa39ef 	.word	0xfefa39ef
 8004df4:	3fe62e42 	.word	0x3fe62e42
 8004df8:	0ca86c39 	.word	0x0ca86c39
 8004dfc:	be205c61 	.word	0xbe205c61
 8004e00:	72bea4d0 	.word	0x72bea4d0
 8004e04:	3e663769 	.word	0x3e663769
 8004e08:	c5d26bf1 	.word	0xc5d26bf1
 8004e0c:	3ebbbd41 	.word	0x3ebbbd41
 8004e10:	af25de2c 	.word	0xaf25de2c
 8004e14:	3f11566a 	.word	0x3f11566a
 8004e18:	16bebd93 	.word	0x16bebd93
 8004e1c:	3f66c16c 	.word	0x3f66c16c
 8004e20:	5555553e 	.word	0x5555553e
 8004e24:	3fc55555 	.word	0x3fc55555
 8004e28:	3fe00000 	.word	0x3fe00000
 8004e2c:	000fffff 	.word	0x000fffff
 8004e30:	3ff00000 	.word	0x3ff00000
 8004e34:	4090cbff 	.word	0x4090cbff
 8004e38:	3f6f3400 	.word	0x3f6f3400
 8004e3c:	652b82fe 	.word	0x652b82fe
 8004e40:	3c971547 	.word	0x3c971547

08004e44 <__ieee754_sqrt>:
 8004e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e48:	ec55 4b10 	vmov	r4, r5, d0
 8004e4c:	4e55      	ldr	r6, [pc, #340]	; (8004fa4 <__ieee754_sqrt+0x160>)
 8004e4e:	43ae      	bics	r6, r5
 8004e50:	ee10 0a10 	vmov	r0, s0
 8004e54:	ee10 3a10 	vmov	r3, s0
 8004e58:	462a      	mov	r2, r5
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	d110      	bne.n	8004e80 <__ieee754_sqrt+0x3c>
 8004e5e:	ee10 2a10 	vmov	r2, s0
 8004e62:	462b      	mov	r3, r5
 8004e64:	f7fb fbc8 	bl	80005f8 <__aeabi_dmul>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	f7fb fa0c 	bl	800028c <__adddf3>
 8004e74:	4604      	mov	r4, r0
 8004e76:	460d      	mov	r5, r1
 8004e78:	ec45 4b10 	vmov	d0, r4, r5
 8004e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e80:	2d00      	cmp	r5, #0
 8004e82:	dc10      	bgt.n	8004ea6 <__ieee754_sqrt+0x62>
 8004e84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004e88:	4330      	orrs	r0, r6
 8004e8a:	d0f5      	beq.n	8004e78 <__ieee754_sqrt+0x34>
 8004e8c:	b15d      	cbz	r5, 8004ea6 <__ieee754_sqrt+0x62>
 8004e8e:	ee10 2a10 	vmov	r2, s0
 8004e92:	462b      	mov	r3, r5
 8004e94:	ee10 0a10 	vmov	r0, s0
 8004e98:	f7fb f9f6 	bl	8000288 <__aeabi_dsub>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	f7fb fcd4 	bl	800084c <__aeabi_ddiv>
 8004ea4:	e7e6      	b.n	8004e74 <__ieee754_sqrt+0x30>
 8004ea6:	1512      	asrs	r2, r2, #20
 8004ea8:	d074      	beq.n	8004f94 <__ieee754_sqrt+0x150>
 8004eaa:	07d4      	lsls	r4, r2, #31
 8004eac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004eb0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004eb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004eb8:	bf5e      	ittt	pl
 8004eba:	0fda      	lsrpl	r2, r3, #31
 8004ebc:	005b      	lslpl	r3, r3, #1
 8004ebe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004ec2:	2400      	movs	r4, #0
 8004ec4:	0fda      	lsrs	r2, r3, #31
 8004ec6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004eca:	107f      	asrs	r7, r7, #1
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	2516      	movs	r5, #22
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ed6:	1886      	adds	r6, r0, r2
 8004ed8:	428e      	cmp	r6, r1
 8004eda:	bfde      	ittt	le
 8004edc:	1b89      	suble	r1, r1, r6
 8004ede:	18b0      	addle	r0, r6, r2
 8004ee0:	18a4      	addle	r4, r4, r2
 8004ee2:	0049      	lsls	r1, r1, #1
 8004ee4:	3d01      	subs	r5, #1
 8004ee6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004eea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004eee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004ef2:	d1f0      	bne.n	8004ed6 <__ieee754_sqrt+0x92>
 8004ef4:	462a      	mov	r2, r5
 8004ef6:	f04f 0e20 	mov.w	lr, #32
 8004efa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004efe:	4281      	cmp	r1, r0
 8004f00:	eb06 0c05 	add.w	ip, r6, r5
 8004f04:	dc02      	bgt.n	8004f0c <__ieee754_sqrt+0xc8>
 8004f06:	d113      	bne.n	8004f30 <__ieee754_sqrt+0xec>
 8004f08:	459c      	cmp	ip, r3
 8004f0a:	d811      	bhi.n	8004f30 <__ieee754_sqrt+0xec>
 8004f0c:	f1bc 0f00 	cmp.w	ip, #0
 8004f10:	eb0c 0506 	add.w	r5, ip, r6
 8004f14:	da43      	bge.n	8004f9e <__ieee754_sqrt+0x15a>
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	db41      	blt.n	8004f9e <__ieee754_sqrt+0x15a>
 8004f1a:	f100 0801 	add.w	r8, r0, #1
 8004f1e:	1a09      	subs	r1, r1, r0
 8004f20:	459c      	cmp	ip, r3
 8004f22:	bf88      	it	hi
 8004f24:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004f28:	eba3 030c 	sub.w	r3, r3, ip
 8004f2c:	4432      	add	r2, r6
 8004f2e:	4640      	mov	r0, r8
 8004f30:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004f34:	f1be 0e01 	subs.w	lr, lr, #1
 8004f38:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004f3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004f40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004f44:	d1db      	bne.n	8004efe <__ieee754_sqrt+0xba>
 8004f46:	430b      	orrs	r3, r1
 8004f48:	d006      	beq.n	8004f58 <__ieee754_sqrt+0x114>
 8004f4a:	1c50      	adds	r0, r2, #1
 8004f4c:	bf13      	iteet	ne
 8004f4e:	3201      	addne	r2, #1
 8004f50:	3401      	addeq	r4, #1
 8004f52:	4672      	moveq	r2, lr
 8004f54:	f022 0201 	bicne.w	r2, r2, #1
 8004f58:	1063      	asrs	r3, r4, #1
 8004f5a:	0852      	lsrs	r2, r2, #1
 8004f5c:	07e1      	lsls	r1, r4, #31
 8004f5e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004f62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004f66:	bf48      	it	mi
 8004f68:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004f6c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004f70:	4614      	mov	r4, r2
 8004f72:	e781      	b.n	8004e78 <__ieee754_sqrt+0x34>
 8004f74:	0ad9      	lsrs	r1, r3, #11
 8004f76:	3815      	subs	r0, #21
 8004f78:	055b      	lsls	r3, r3, #21
 8004f7a:	2900      	cmp	r1, #0
 8004f7c:	d0fa      	beq.n	8004f74 <__ieee754_sqrt+0x130>
 8004f7e:	02cd      	lsls	r5, r1, #11
 8004f80:	d50a      	bpl.n	8004f98 <__ieee754_sqrt+0x154>
 8004f82:	f1c2 0420 	rsb	r4, r2, #32
 8004f86:	fa23 f404 	lsr.w	r4, r3, r4
 8004f8a:	1e55      	subs	r5, r2, #1
 8004f8c:	4093      	lsls	r3, r2
 8004f8e:	4321      	orrs	r1, r4
 8004f90:	1b42      	subs	r2, r0, r5
 8004f92:	e78a      	b.n	8004eaa <__ieee754_sqrt+0x66>
 8004f94:	4610      	mov	r0, r2
 8004f96:	e7f0      	b.n	8004f7a <__ieee754_sqrt+0x136>
 8004f98:	0049      	lsls	r1, r1, #1
 8004f9a:	3201      	adds	r2, #1
 8004f9c:	e7ef      	b.n	8004f7e <__ieee754_sqrt+0x13a>
 8004f9e:	4680      	mov	r8, r0
 8004fa0:	e7bd      	b.n	8004f1e <__ieee754_sqrt+0xda>
 8004fa2:	bf00      	nop
 8004fa4:	7ff00000 	.word	0x7ff00000

08004fa8 <with_errno>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4604      	mov	r4, r0
 8004fac:	460d      	mov	r5, r1
 8004fae:	4616      	mov	r6, r2
 8004fb0:	f7fe f9e2 	bl	8003378 <__errno>
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	6006      	str	r6, [r0, #0]
 8004fb8:	4620      	mov	r0, r4
 8004fba:	bd70      	pop	{r4, r5, r6, pc}

08004fbc <xflow>:
 8004fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fbe:	4614      	mov	r4, r2
 8004fc0:	461d      	mov	r5, r3
 8004fc2:	b108      	cbz	r0, 8004fc8 <xflow+0xc>
 8004fc4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004fc8:	e9cd 2300 	strd	r2, r3, [sp]
 8004fcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	f7fb fb10 	bl	80005f8 <__aeabi_dmul>
 8004fd8:	2222      	movs	r2, #34	; 0x22
 8004fda:	b003      	add	sp, #12
 8004fdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fe0:	f7ff bfe2 	b.w	8004fa8 <with_errno>

08004fe4 <__math_uflow>:
 8004fe4:	b508      	push	{r3, lr}
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004fec:	f7ff ffe6 	bl	8004fbc <xflow>
 8004ff0:	ec41 0b10 	vmov	d0, r0, r1
 8004ff4:	bd08      	pop	{r3, pc}

08004ff6 <__math_oflow>:
 8004ff6:	b508      	push	{r3, lr}
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004ffe:	f7ff ffdd 	bl	8004fbc <xflow>
 8005002:	ec41 0b10 	vmov	d0, r0, r1
 8005006:	bd08      	pop	{r3, pc}

08005008 <fabs>:
 8005008:	ec51 0b10 	vmov	r0, r1, d0
 800500c:	ee10 2a10 	vmov	r2, s0
 8005010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005014:	ec43 2b10 	vmov	d0, r2, r3
 8005018:	4770      	bx	lr

0800501a <finite>:
 800501a:	b082      	sub	sp, #8
 800501c:	ed8d 0b00 	vstr	d0, [sp]
 8005020:	9801      	ldr	r0, [sp, #4]
 8005022:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005026:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800502a:	0fc0      	lsrs	r0, r0, #31
 800502c:	b002      	add	sp, #8
 800502e:	4770      	bx	lr

08005030 <scalbn>:
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	ec55 4b10 	vmov	r4, r5, d0
 8005036:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800503a:	4606      	mov	r6, r0
 800503c:	462b      	mov	r3, r5
 800503e:	b99a      	cbnz	r2, 8005068 <scalbn+0x38>
 8005040:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005044:	4323      	orrs	r3, r4
 8005046:	d036      	beq.n	80050b6 <scalbn+0x86>
 8005048:	4b39      	ldr	r3, [pc, #228]	; (8005130 <scalbn+0x100>)
 800504a:	4629      	mov	r1, r5
 800504c:	ee10 0a10 	vmov	r0, s0
 8005050:	2200      	movs	r2, #0
 8005052:	f7fb fad1 	bl	80005f8 <__aeabi_dmul>
 8005056:	4b37      	ldr	r3, [pc, #220]	; (8005134 <scalbn+0x104>)
 8005058:	429e      	cmp	r6, r3
 800505a:	4604      	mov	r4, r0
 800505c:	460d      	mov	r5, r1
 800505e:	da10      	bge.n	8005082 <scalbn+0x52>
 8005060:	a32b      	add	r3, pc, #172	; (adr r3, 8005110 <scalbn+0xe0>)
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	e03a      	b.n	80050de <scalbn+0xae>
 8005068:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800506c:	428a      	cmp	r2, r1
 800506e:	d10c      	bne.n	800508a <scalbn+0x5a>
 8005070:	ee10 2a10 	vmov	r2, s0
 8005074:	4620      	mov	r0, r4
 8005076:	4629      	mov	r1, r5
 8005078:	f7fb f908 	bl	800028c <__adddf3>
 800507c:	4604      	mov	r4, r0
 800507e:	460d      	mov	r5, r1
 8005080:	e019      	b.n	80050b6 <scalbn+0x86>
 8005082:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005086:	460b      	mov	r3, r1
 8005088:	3a36      	subs	r2, #54	; 0x36
 800508a:	4432      	add	r2, r6
 800508c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005090:	428a      	cmp	r2, r1
 8005092:	dd08      	ble.n	80050a6 <scalbn+0x76>
 8005094:	2d00      	cmp	r5, #0
 8005096:	a120      	add	r1, pc, #128	; (adr r1, 8005118 <scalbn+0xe8>)
 8005098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800509c:	da1c      	bge.n	80050d8 <scalbn+0xa8>
 800509e:	a120      	add	r1, pc, #128	; (adr r1, 8005120 <scalbn+0xf0>)
 80050a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050a4:	e018      	b.n	80050d8 <scalbn+0xa8>
 80050a6:	2a00      	cmp	r2, #0
 80050a8:	dd08      	ble.n	80050bc <scalbn+0x8c>
 80050aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80050ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80050b6:	ec45 4b10 	vmov	d0, r4, r5
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80050c0:	da19      	bge.n	80050f6 <scalbn+0xc6>
 80050c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80050c6:	429e      	cmp	r6, r3
 80050c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80050cc:	dd0a      	ble.n	80050e4 <scalbn+0xb4>
 80050ce:	a112      	add	r1, pc, #72	; (adr r1, 8005118 <scalbn+0xe8>)
 80050d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e2      	bne.n	800509e <scalbn+0x6e>
 80050d8:	a30f      	add	r3, pc, #60	; (adr r3, 8005118 <scalbn+0xe8>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f7fb fa8b 	bl	80005f8 <__aeabi_dmul>
 80050e2:	e7cb      	b.n	800507c <scalbn+0x4c>
 80050e4:	a10a      	add	r1, pc, #40	; (adr r1, 8005110 <scalbn+0xe0>)
 80050e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0b8      	beq.n	8005060 <scalbn+0x30>
 80050ee:	a10e      	add	r1, pc, #56	; (adr r1, 8005128 <scalbn+0xf8>)
 80050f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050f4:	e7b4      	b.n	8005060 <scalbn+0x30>
 80050f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80050fa:	3236      	adds	r2, #54	; 0x36
 80050fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005100:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005104:	4620      	mov	r0, r4
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <scalbn+0x108>)
 8005108:	2200      	movs	r2, #0
 800510a:	e7e8      	b.n	80050de <scalbn+0xae>
 800510c:	f3af 8000 	nop.w
 8005110:	c2f8f359 	.word	0xc2f8f359
 8005114:	01a56e1f 	.word	0x01a56e1f
 8005118:	8800759c 	.word	0x8800759c
 800511c:	7e37e43c 	.word	0x7e37e43c
 8005120:	8800759c 	.word	0x8800759c
 8005124:	fe37e43c 	.word	0xfe37e43c
 8005128:	c2f8f359 	.word	0xc2f8f359
 800512c:	81a56e1f 	.word	0x81a56e1f
 8005130:	43500000 	.word	0x43500000
 8005134:	ffff3cb0 	.word	0xffff3cb0
 8005138:	3c900000 	.word	0x3c900000

0800513c <_init>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr

08005148 <_fini>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr
